// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef XHWHB_H
#define XHWHB_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xhwhb_hw.h"

#define HWHB_ADDR 0x43C30000

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Bus_a_BaseAddress;
} XHwhb_Config;
#endif

typedef struct {
    u32 Bus_a_BaseAddress;
    u32 IsReady;
} XHwhb;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XHwhb_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XHwhb_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XHwhb_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XHwhb_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XHwhb_Initialize(XHwhb *InstancePtr, u16 DeviceId);
XHwhb_Config* XHwhb_LookupConfig(u16 DeviceId);
int XHwhb_CfgInitialize(XHwhb *InstancePtr, XHwhb_Config *ConfigPtr);
#else
int XHwhb_Initialize(XHwhb *InstancePtr, const char* InstanceName);
int XHwhb_Release(XHwhb *InstancePtr);
#endif

XHwhb setup_XHwhb(void);

void XHwhb_Start(XHwhb *InstancePtr);
u32 XHwhb_IsDone(XHwhb *InstancePtr);
u32 XHwhb_IsIdle(XHwhb *InstancePtr);
u32 XHwhb_IsReady(XHwhb *InstancePtr);
void XHwhb_EnableAutoRestart(XHwhb *InstancePtr);
void XHwhb_DisableAutoRestart(XHwhb *InstancePtr);

void XHwhb_SetInappid(XHwhb *InstancePtr, u32 Data);
u32 XHwhb_GetInappid(XHwhb *InstancePtr);
void XHwhb_SetApp_list_addr(XHwhb *InstancePtr, u32 Data);
u32 XHwhb_GetApp_list_addr(XHwhb *InstancePtr);

void XHwhb_InterruptGlobalEnable(XHwhb *InstancePtr);
void XHwhb_InterruptGlobalDisable(XHwhb *InstancePtr);
void XHwhb_InterruptEnable(XHwhb *InstancePtr, u32 Mask);
void XHwhb_InterruptDisable(XHwhb *InstancePtr, u32 Mask);
void XHwhb_InterruptClear(XHwhb *InstancePtr, u32 Mask);
u32 XHwhb_InterruptGetEnabled(XHwhb *InstancePtr);
u32 XHwhb_InterruptGetStatus(XHwhb *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
