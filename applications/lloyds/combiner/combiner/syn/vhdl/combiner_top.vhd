-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity combiner_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    master_portA_req_din : OUT STD_LOGIC;
    master_portA_req_full_n : IN STD_LOGIC;
    master_portA_req_write : OUT STD_LOGIC;
    master_portA_rsp_empty_n : IN STD_LOGIC;
    master_portA_rsp_read : OUT STD_LOGIC;
    master_portA_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    master_portA_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    master_portA_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    master_portA_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_points_in_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_info_in_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    centres_out_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    distortion_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    k : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of combiner_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "combiner_top,hls_ip_2013_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_pp1_stg0_fsm_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_ST_st14_fsm_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_ST_pp2_stg0_fsm_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_ST_st23_fsm_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st24_fsm_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_ST_st25_fsm_10 : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_ST_st26_fsm_11 : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_ST_pp4_stg0_fsm_12 : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_ST_pp4_stg1_fsm_13 : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_ST_pp4_stg2_fsm_14 : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_ST_st66_fsm_15 : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_ST_pp5_stg0_fsm_16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_ST_st70_fsm_17 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_ST_st71_fsm_18 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal data_points_in_addr0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal data_points_in_addr0vld_reg : STD_LOGIC := '0';
    signal data_points_in_addr0ack_out : STD_LOGIC;
    signal kernel_info_in_addr0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_info_in_addr0vld_reg : STD_LOGIC := '0';
    signal kernel_info_in_addr0ack_out : STD_LOGIC;
    signal centres_out_addr0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal centres_out_addr0vld_reg : STD_LOGIC := '0';
    signal centres_out_addr0ack_out : STD_LOGIC;
    signal distortion_out1data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal distortion_out1vld_reg : STD_LOGIC := '0';
    signal distortion_out1vld_in : STD_LOGIC;
    signal distortion_out1ack_in : STD_LOGIC;
    signal n0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal n0vld_reg : STD_LOGIC := '0';
    signal n0ack_out : STD_LOGIC;
    signal k0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal k0vld_reg : STD_LOGIC := '0';
    signal k0ack_out : STD_LOGIC;
    signal indvar_reg_483 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar_reg_483_pp1_it1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it5 : STD_LOGIC := '0';
    signal exitcond9_reg_1097 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond9_reg_1097_pp1_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_218 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it7 : STD_LOGIC := '0';
    signal ap_reg_ppstg_indvar_reg_483_pp1_it2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar_reg_483_pp1_it3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar_reg_483_pp1_it4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar_reg_483_pp1_it5 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar_reg_483_pp1_it6 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar2_reg_495 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar2_reg_495_pp2_it1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppiten_pp2_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it5 : STD_LOGIC := '0';
    signal exitcond1_reg_1116 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_1116_pp2_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_251 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it7 : STD_LOGIC := '0';
    signal ap_reg_ppstg_indvar2_reg_495_pp2_it2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar2_reg_495_pp2_it3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar2_reg_495_pp2_it4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar2_reg_495_pp2_it5 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar2_reg_495_pp2_it6 : STD_LOGIC_VECTOR (5 downto 0);
    signal total_distortion_reg_518 : STD_LOGIC_VECTOR (31 downto 0);
    signal i5_reg_530 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar1_reg_553 : STD_LOGIC_VECTOR (29 downto 0);
    signal reg_565 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_577_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_cast_fu_601_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_5_cast_reg_1078 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_cast_fu_614_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_cast_reg_1083 : STD_LOGIC_VECTOR (32 downto 0);
    signal master_portA_addr_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond9_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond9_reg_1097_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond9_reg_1097_pp1_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond9_reg_1097_pp1_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond9_reg_1097_pp1_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond9_reg_1097_pp1_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_660_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_next_reg_1101 : STD_LOGIC_VECTOR (5 downto 0);
    signal isIter0_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isIter0_reg_1106 : STD_LOGIC_VECTOR (0 downto 0);
    signal master_portA_addr_1_reg_1110 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_1116_pp2_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_1116_pp2_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_1116_pp2_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_1116_pp2_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_1116_pp2_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next2_fu_708_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_next2_reg_1120 : STD_LOGIC_VECTOR (5 downto 0);
    signal isIter1_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isIter1_reg_1125 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond6_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond6_reg_1129 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_731_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_1133 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_36_fu_741_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_36_reg_1138 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_22_fu_768_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_22_reg_1148 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_buffer_load_reg_1168 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_buffer_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_buffer_load_1_reg_1173 : STD_LOGIC_VECTOR (31 downto 0);
    signal centre_buffer_count_addr_2_reg_1183 : STD_LOGIC_VECTOR (7 downto 0);
    signal centre_buffer_sum_sq_addr_2_reg_1188 : STD_LOGIC_VECTOR (7 downto 0);
    signal centre_buffer_0_wgtCent_value_addr_2_reg_1193 : STD_LOGIC_VECTOR (7 downto 0);
    signal centre_buffer_1_wgtCent_value_addr_2_reg_1198 : STD_LOGIC_VECTOR (7 downto 0);
    signal centre_buffer_2_wgtCent_value_addr_2_reg_1203 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_1_fu_866_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1213 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp4_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it12 : STD_LOGIC := '0';
    signal ap_reg_ppstg_tmp_1_reg_1213_pp4_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_1_reg_1213_pp4_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_1_reg_1213_pp4_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_1_reg_1213_pp4_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_1_reg_1213_pp4_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_1_reg_1213_pp4_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_1_reg_1213_pp4_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_1_reg_1213_pp4_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_1_reg_1213_pp4_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_1_reg_1213_pp4_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_1_reg_1213_pp4_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_1_reg_1213_pp4_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_877_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_1217 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_883_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_1222 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_894_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_1235 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_1235_pp4_it1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_1235_pp4_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_1235_pp4_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_1235_pp4_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_1235_pp4_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_1235_pp4_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_1235_pp4_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_1235_pp4_it8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_1235_pp4_it9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_1235_pp4_it10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_1235_pp4_it11 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_1235_pp4_it12 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1242 : STD_LOGIC_VECTOR (0 downto 0);
    signal centre_buffer_count_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_reg_1246 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_count_fu_910_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_count_reg_1262 : STD_LOGIC_VECTOR (31 downto 0);
    signal centre_buffer_0_wgtCent_value_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_distortion_2_fu_924_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_distortion_2_reg_1284 : STD_LOGIC_VECTOR (31 downto 0);
    signal centre_buffer_1_wgtCent_value_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal centre_buffer_2_wgtCent_value_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal centre_buffer_2_wgtCent_value_load_reg_1295 : STD_LOGIC_VECTOR (31 downto 0);
    signal master_portA_addr_2_reg_1300 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_add_i32_shr_fu_1006_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_38_add_i32_shr_reg_1305 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_25_fu_1016_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_1310 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_1315 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp5_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp5_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_1315_pp5_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_565 : BOOLEAN;
    signal ap_reg_ppiten_pp5_it2 : STD_LOGIC := '0';
    signal indvar_next1_fu_1025_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal isIter_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isIter_reg_1329 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_isIter_reg_1329_pp5_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_buffer_load_reg_1333 : STD_LOGIC_VECTOR (31 downto 0);
    signal centre_buffer_0_wgtCent_value_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal centre_buffer_0_wgtCent_value_ce0 : STD_LOGIC;
    signal centre_buffer_0_wgtCent_value_we0 : STD_LOGIC;
    signal centre_buffer_0_wgtCent_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal centre_buffer_1_wgtCent_value_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal centre_buffer_1_wgtCent_value_ce0 : STD_LOGIC;
    signal centre_buffer_1_wgtCent_value_we0 : STD_LOGIC;
    signal centre_buffer_1_wgtCent_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal centre_buffer_2_wgtCent_value_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal centre_buffer_2_wgtCent_value_ce0 : STD_LOGIC;
    signal centre_buffer_2_wgtCent_value_we0 : STD_LOGIC;
    signal centre_buffer_2_wgtCent_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal centre_buffer_sum_sq_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal centre_buffer_sum_sq_ce0 : STD_LOGIC;
    signal centre_buffer_sum_sq_we0 : STD_LOGIC;
    signal centre_buffer_sum_sq_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal centre_buffer_sum_sq_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal centre_buffer_count_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal centre_buffer_count_ce0 : STD_LOGIC;
    signal centre_buffer_count_we0 : STD_LOGIC;
    signal centre_buffer_count_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_buffer_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_buffer_ce0 : STD_LOGIC;
    signal i_buffer_we0 : STD_LOGIC;
    signal i_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_buffer_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_buffer_ce0 : STD_LOGIC;
    signal p_buffer_we0 : STD_LOGIC;
    signal p_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_buffer_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_buffer_ce1 : STD_LOGIC;
    signal c_buffer_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_buffer_ce0 : STD_LOGIC;
    signal c_buffer_we0 : STD_LOGIC;
    signal c_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_460 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond8_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_phi_fu_487_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar2_phi_fu_499_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal i1_reg_507 : STD_LOGIC_VECTOR (4 downto 0);
    signal total_distortion_phi_fu_522_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i5_phi_fu_534_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_distortion_1_reg_541 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_1_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_805_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_2_fu_819_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_824_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_941_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_1_fu_950_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_2_fu_960_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_1031_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_sum_cast_fu_644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_sum1_cast_fu_692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_974_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_833_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_840_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_847_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_1_fu_853_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_2_fu_859_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_917_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_930_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_936_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_592_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_s_fu_605_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_10_fu_623_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_629_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_cast_fu_635_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_sum_fu_639_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_35_fu_677_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_cast_fu_683_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_sum1_fu_687_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_37_fu_745_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl4_fu_756_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_cast_fu_764_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal i1_cast2_fu_737_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_30_fu_778_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_768_p2_temp: signed (7-1 downto 0);
    signal tmp_28_1_fu_783_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_29_1_fu_793_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_1_fu_783_p2_temp: signed (7-1 downto 0);
    signal tmp_20_fu_798_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_28_2_fu_810_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_29_2_fu_819_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_2_fu_810_p2_temp: signed (7-1 downto 0);
    signal tmp_17_fu_888_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_917_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_917_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_930_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_930_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_936_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_936_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_1_fu_945_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_2_fu_955_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_965_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_18_fu_984_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_989_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_994_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_1000_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_917_ce : STD_LOGIC;
    signal grp_fu_930_ce : STD_LOGIC;
    signal grp_fu_936_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_bdd_1186 : BOOLEAN;
    signal ap_sig_bdd_1189 : BOOLEAN;

    component combiner_top_sdiv_32ns_32ns_32_35 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component combiner_top_centre_buffer_0_wgtCent_value IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component combiner_top_i_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component combiner_top_p_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component combiner_top_c_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    centre_buffer_0_wgtCent_value_U : component combiner_top_centre_buffer_0_wgtCent_value
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => centre_buffer_0_wgtCent_value_address0,
        ce0 => centre_buffer_0_wgtCent_value_ce0,
        we0 => centre_buffer_0_wgtCent_value_we0,
        d0 => centre_buffer_0_wgtCent_value_d0,
        q0 => centre_buffer_0_wgtCent_value_q0);

    centre_buffer_1_wgtCent_value_U : component combiner_top_centre_buffer_0_wgtCent_value
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => centre_buffer_1_wgtCent_value_address0,
        ce0 => centre_buffer_1_wgtCent_value_ce0,
        we0 => centre_buffer_1_wgtCent_value_we0,
        d0 => centre_buffer_1_wgtCent_value_d0,
        q0 => centre_buffer_1_wgtCent_value_q0);

    centre_buffer_2_wgtCent_value_U : component combiner_top_centre_buffer_0_wgtCent_value
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => centre_buffer_2_wgtCent_value_address0,
        ce0 => centre_buffer_2_wgtCent_value_ce0,
        we0 => centre_buffer_2_wgtCent_value_we0,
        d0 => centre_buffer_2_wgtCent_value_d0,
        q0 => centre_buffer_2_wgtCent_value_q0);

    centre_buffer_sum_sq_U : component combiner_top_centre_buffer_0_wgtCent_value
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => centre_buffer_sum_sq_address0,
        ce0 => centre_buffer_sum_sq_ce0,
        we0 => centre_buffer_sum_sq_we0,
        d0 => centre_buffer_sum_sq_d0,
        q0 => centre_buffer_sum_sq_q0);

    centre_buffer_count_U : component combiner_top_centre_buffer_0_wgtCent_value
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => centre_buffer_count_address0,
        ce0 => centre_buffer_count_ce0,
        we0 => centre_buffer_count_we0,
        d0 => centre_buffer_count_d0,
        q0 => centre_buffer_count_q0);

    i_buffer_U : component combiner_top_i_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => i_buffer_address0,
        ce0 => i_buffer_ce0,
        we0 => i_buffer_we0,
        d0 => i_buffer_d0,
        q0 => i_buffer_q0);

    p_buffer_U : component combiner_top_p_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_buffer_address0,
        ce0 => p_buffer_ce0,
        we0 => p_buffer_we0,
        d0 => p_buffer_d0,
        q0 => p_buffer_q0,
        address1 => p_buffer_address1,
        ce1 => p_buffer_ce1,
        q1 => p_buffer_q1);

    c_buffer_U : component combiner_top_c_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_buffer_address0,
        ce0 => c_buffer_ce0,
        we0 => c_buffer_we0,
        d0 => c_buffer_d0,
        q0 => c_buffer_q0);

    combiner_top_sdiv_32ns_32ns_32_35_U1 : component combiner_top_sdiv_32ns_32ns_32_35
    generic map (
        ID => 1,
        NUM_STAGE => 35,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_917_p0,
        din1 => grp_fu_917_p1,
        ce => grp_fu_917_ce,
        dout => grp_fu_917_p2);

    combiner_top_sdiv_32ns_32ns_32_35_U2 : component combiner_top_sdiv_32ns_32ns_32_35
    generic map (
        ID => 2,
        NUM_STAGE => 35,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_930_p0,
        din1 => grp_fu_930_p1,
        ce => grp_fu_930_ce,
        dout => grp_fu_930_p2);

    combiner_top_sdiv_32ns_32ns_32_35_U3 : component combiner_top_sdiv_32ns_32ns_32_35
    generic map (
        ID => 3,
        NUM_STAGE => 35,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_936_p0,
        din1 => grp_fu_936_p1,
        ce => grp_fu_936_ce,
        dout => grp_fu_936_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and not((ap_const_lv1_0 = exitcond9_fu_654_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_3_fu_618_p2))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and (ap_const_lv1_0 = exitcond9_fu_654_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_3_fu_618_p2)) or ((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and not((ap_const_lv1_0 = exitcond9_fu_654_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it3 assign process. --
    ap_reg_ppiten_pp1_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it3 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then 
                    ap_reg_ppiten_pp1_it3 <= ap_reg_ppiten_pp1_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it4 assign process. --
    ap_reg_ppiten_pp1_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it4 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then 
                    ap_reg_ppiten_pp1_it4 <= ap_reg_ppiten_pp1_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it5 assign process. --
    ap_reg_ppiten_pp1_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it5 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then 
                    ap_reg_ppiten_pp1_it5 <= ap_reg_ppiten_pp1_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it6 assign process. --
    ap_reg_ppiten_pp1_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it6 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then 
                    ap_reg_ppiten_pp1_it6 <= ap_reg_ppiten_pp1_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it7 assign process. --
    ap_reg_ppiten_pp1_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it7 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then 
                    ap_reg_ppiten_pp1_it7 <= ap_reg_ppiten_pp1_it6;
                elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_3_fu_618_p2))) then 
                    ap_reg_ppiten_pp1_it7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it0 assign process. --
    ap_reg_ppiten_pp2_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_lv1_0 = exitcond1_fu_702_p2)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
                elsif ((ap_ST_st14_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it1 assign process. --
    ap_reg_ppiten_pp2_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and (ap_const_lv1_0 = exitcond1_fu_702_p2))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
                elsif (((ap_ST_st14_fsm_6 = ap_CS_fsm) or ((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_lv1_0 = exitcond1_fu_702_p2))))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it2 assign process. --
    ap_reg_ppiten_pp2_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then 
                    ap_reg_ppiten_pp2_it2 <= ap_reg_ppiten_pp2_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it3 assign process. --
    ap_reg_ppiten_pp2_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it3 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then 
                    ap_reg_ppiten_pp2_it3 <= ap_reg_ppiten_pp2_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it4 assign process. --
    ap_reg_ppiten_pp2_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it4 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then 
                    ap_reg_ppiten_pp2_it4 <= ap_reg_ppiten_pp2_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it5 assign process. --
    ap_reg_ppiten_pp2_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it5 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then 
                    ap_reg_ppiten_pp2_it5 <= ap_reg_ppiten_pp2_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it6 assign process. --
    ap_reg_ppiten_pp2_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it6 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then 
                    ap_reg_ppiten_pp2_it6 <= ap_reg_ppiten_pp2_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it7 assign process. --
    ap_reg_ppiten_pp2_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it7 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then 
                    ap_reg_ppiten_pp2_it7 <= ap_reg_ppiten_pp2_it6;
                elsif ((ap_ST_st14_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp2_it7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it0 assign process. --
    ap_reg_ppiten_pp4_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm) and (not((ap_const_lv1_0 = tmp_1_reg_1213)) or ((ap_const_lv1_0 = tmp_1_reg_1213) and not((ap_const_lv1_0 = tmp_13_reg_1242)))))) then 
                    ap_reg_ppiten_pp4_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_3_fu_618_p2)))) then 
                    ap_reg_ppiten_pp4_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it1 assign process. --
    ap_reg_ppiten_pp4_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it1 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it1 <= ap_reg_ppiten_pp4_it0;
                elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_3_fu_618_p2)))) then 
                    ap_reg_ppiten_pp4_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it10 assign process. --
    ap_reg_ppiten_pp4_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it10 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it10 <= ap_reg_ppiten_pp4_it9;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it11 assign process. --
    ap_reg_ppiten_pp4_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it11 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it11 <= ap_reg_ppiten_pp4_it10;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it12 assign process. --
    ap_reg_ppiten_pp4_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it12 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it12 <= ap_reg_ppiten_pp4_it11;
                elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_3_fu_618_p2)))) then 
                    ap_reg_ppiten_pp4_it12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it2 assign process. --
    ap_reg_ppiten_pp4_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it2 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it2 <= ap_reg_ppiten_pp4_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it3 assign process. --
    ap_reg_ppiten_pp4_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it3 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it3 <= ap_reg_ppiten_pp4_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it4 assign process. --
    ap_reg_ppiten_pp4_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it4 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it4 <= ap_reg_ppiten_pp4_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it5 assign process. --
    ap_reg_ppiten_pp4_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it5 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it5 <= ap_reg_ppiten_pp4_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it6 assign process. --
    ap_reg_ppiten_pp4_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it6 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it6 <= ap_reg_ppiten_pp4_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it7 assign process. --
    ap_reg_ppiten_pp4_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it7 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it7 <= ap_reg_ppiten_pp4_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it8 assign process. --
    ap_reg_ppiten_pp4_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it8 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it8 <= ap_reg_ppiten_pp4_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it9 assign process. --
    ap_reg_ppiten_pp4_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it9 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it9 <= ap_reg_ppiten_pp4_it8;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp5_it0 assign process. --
    ap_reg_ppiten_pp5_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp5_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp5_stg0_fsm_16 = ap_CS_fsm) and not((ap_sig_bdd_565 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_lv1_0 = exitcond_fu_1020_p2)))) then 
                    ap_reg_ppiten_pp5_it0 <= ap_const_logic_0;
                elsif ((ap_ST_st66_fsm_15 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp5_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp5_it1 assign process. --
    ap_reg_ppiten_pp5_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp5_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp5_stg0_fsm_16 = ap_CS_fsm) and not((ap_sig_bdd_565 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and (ap_const_lv1_0 = exitcond_fu_1020_p2))) then 
                    ap_reg_ppiten_pp5_it1 <= ap_const_logic_1;
                elsif (((ap_ST_st66_fsm_15 = ap_CS_fsm) or ((ap_ST_pp5_stg0_fsm_16 = ap_CS_fsm) and not((ap_sig_bdd_565 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_lv1_0 = exitcond_fu_1020_p2))))) then 
                    ap_reg_ppiten_pp5_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp5_it2 assign process. --
    ap_reg_ppiten_pp5_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp5_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp5_stg0_fsm_16 = ap_CS_fsm) and not((ap_sig_bdd_565 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))))) then 
                    ap_reg_ppiten_pp5_it2 <= ap_reg_ppiten_pp5_it1;
                elsif ((ap_ST_st66_fsm_15 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp5_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- centres_out_addr0data_reg assign process. --
    centres_out_addr0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                centres_out_addr0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = centres_out_addr0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = centres_out_addr0vld_reg) and (ap_const_logic_1 = centres_out_addr0ack_out)))) then 
                    centres_out_addr0data_reg <= centres_out_addr;
                end if; 
            end if;
        end if;
    end process;


    -- centres_out_addr0vld_reg assign process. --
    centres_out_addr0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- data_points_in_addr0data_reg assign process. --
    data_points_in_addr0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                data_points_in_addr0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = data_points_in_addr0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = data_points_in_addr0vld_reg) and (ap_const_logic_1 = data_points_in_addr0ack_out)))) then 
                    data_points_in_addr0data_reg <= data_points_in_addr;
                end if; 
            end if;
        end if;
    end process;


    -- data_points_in_addr0vld_reg assign process. --
    data_points_in_addr0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- distortion_out1data_reg assign process. --
    distortion_out1data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                distortion_out1data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = distortion_out1vld_in) and (ap_const_logic_0 = distortion_out1vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = distortion_out1vld_in) and (ap_const_logic_1 = distortion_out1vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
                    distortion_out1data_reg <= total_distortion_1_reg_541;
                end if; 
            end if;
        end if;
    end process;


    -- distortion_out1vld_reg assign process. --
    distortion_out1vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- k0data_reg assign process. --
    k0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                k0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = k0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = k0vld_reg) and (ap_const_logic_1 = k0ack_out)))) then 
                    k0data_reg <= k;
                end if; 
            end if;
        end if;
    end process;


    -- k0vld_reg assign process. --
    k0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- kernel_info_in_addr0data_reg assign process. --
    kernel_info_in_addr0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                kernel_info_in_addr0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = kernel_info_in_addr0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = kernel_info_in_addr0vld_reg) and (ap_const_logic_1 = kernel_info_in_addr0ack_out)))) then 
                    kernel_info_in_addr0data_reg <= kernel_info_in_addr;
                end if; 
            end if;
        end if;
    end process;


    -- kernel_info_in_addr0vld_reg assign process. --
    kernel_info_in_addr0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- n0data_reg assign process. --
    n0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                n0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = n0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = n0vld_reg) and (ap_const_logic_1 = n0ack_out)))) then 
                    n0data_reg <= n;
                end if; 
            end if;
        end if;
    end process;


    -- n0vld_reg assign process. --
    n0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- b_reg_471 assign process. --
    b_reg_471_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                b_reg_471 <= ap_const_lv32_0;
            elsif ((ap_ST_st26_fsm_11 = ap_CS_fsm)) then 
                b_reg_471 <= b_1_fu_866_p2;
            end if; 
        end if;
    end process;

    -- i1_reg_507 assign process. --
    i1_reg_507_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_lv1_0 = exitcond1_fu_702_p2)))) then 
                i1_reg_507 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_0 = exitcond6_reg_1129) and (ap_ST_st25_fsm_10 = ap_CS_fsm))) then 
                i1_reg_507 <= i_3_reg_1133;
            end if; 
        end if;
    end process;

    -- i5_reg_530 assign process. --
    i5_reg_530_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_3_fu_618_p2)))) then 
                i5_reg_530 <= ap_const_lv32_0;
            elsif (((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it1) and (ap_const_lv1_0 = tmp_1_reg_1213) and (ap_const_lv1_0 = tmp_13_reg_1242))) then 
                i5_reg_530 <= i_2_reg_1217;
            end if; 
        end if;
    end process;

    -- i_reg_460 assign process. --
    i_reg_460_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_571_p2))) then 
                i_reg_460 <= i_1_fu_577_p2;
            elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
                i_reg_460 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- indvar1_reg_553 assign process. --
    indvar1_reg_553_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st66_fsm_15 = ap_CS_fsm)) then 
                indvar1_reg_553 <= ap_const_lv30_0;
            elsif (((ap_ST_pp5_stg0_fsm_16 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not((ap_sig_bdd_565 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and (ap_const_lv1_0 = exitcond_fu_1020_p2))) then 
                indvar1_reg_553 <= indvar_next1_fu_1025_p2;
            end if; 
        end if;
    end process;

    -- indvar2_reg_495 assign process. --
    indvar2_reg_495_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st14_fsm_6 = ap_CS_fsm)) then 
                indvar2_reg_495 <= ap_const_lv6_0;
            elsif (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and (ap_const_lv1_0 = exitcond1_reg_1116))) then 
                indvar2_reg_495 <= indvar_next2_reg_1120;
            end if; 
        end if;
    end process;

    -- indvar_reg_483 assign process. --
    indvar_reg_483_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_3_fu_618_p2))) then 
                indvar_reg_483 <= ap_const_lv6_0;
            elsif (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and (exitcond9_reg_1097 = ap_const_lv1_0))) then 
                indvar_reg_483 <= indvar_next_reg_1101;
            end if; 
        end if;
    end process;

    -- total_distortion_1_reg_541 assign process. --
    total_distortion_1_reg_541_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_reg_ppiten_pp4_it0)) then
                if (ap_sig_bdd_1189) then 
                    total_distortion_1_reg_541 <= total_distortion_2_fu_924_p2;
                elsif (ap_sig_bdd_1186) then 
                    total_distortion_1_reg_541 <= total_distortion_phi_fu_522_p4;
                end if;
            end if; 
        end if;
    end process;

    -- total_distortion_reg_518 assign process. --
    total_distortion_reg_518_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_3_fu_618_p2)))) then 
                total_distortion_reg_518 <= ap_const_lv32_0;
            elsif (((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it1) and (ap_const_lv1_0 = tmp_1_reg_1213) and (ap_const_lv1_0 = tmp_13_reg_1242))) then 
                total_distortion_reg_518 <= total_distortion_2_reg_1284;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then
                ap_reg_ppstg_exitcond1_reg_1116_pp2_it1 <= exitcond1_reg_1116;
                ap_reg_ppstg_exitcond1_reg_1116_pp2_it2 <= ap_reg_ppstg_exitcond1_reg_1116_pp2_it1;
                ap_reg_ppstg_exitcond1_reg_1116_pp2_it3 <= ap_reg_ppstg_exitcond1_reg_1116_pp2_it2;
                ap_reg_ppstg_exitcond1_reg_1116_pp2_it4 <= ap_reg_ppstg_exitcond1_reg_1116_pp2_it3;
                ap_reg_ppstg_exitcond1_reg_1116_pp2_it5 <= ap_reg_ppstg_exitcond1_reg_1116_pp2_it4;
                ap_reg_ppstg_exitcond1_reg_1116_pp2_it6 <= ap_reg_ppstg_exitcond1_reg_1116_pp2_it5;
                ap_reg_ppstg_indvar2_reg_495_pp2_it1 <= indvar2_reg_495;
                ap_reg_ppstg_indvar2_reg_495_pp2_it2 <= ap_reg_ppstg_indvar2_reg_495_pp2_it1;
                ap_reg_ppstg_indvar2_reg_495_pp2_it3 <= ap_reg_ppstg_indvar2_reg_495_pp2_it2;
                ap_reg_ppstg_indvar2_reg_495_pp2_it4 <= ap_reg_ppstg_indvar2_reg_495_pp2_it3;
                ap_reg_ppstg_indvar2_reg_495_pp2_it5 <= ap_reg_ppstg_indvar2_reg_495_pp2_it4;
                ap_reg_ppstg_indvar2_reg_495_pp2_it6 <= ap_reg_ppstg_indvar2_reg_495_pp2_it5;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then
                ap_reg_ppstg_exitcond9_reg_1097_pp1_it1 <= exitcond9_reg_1097;
                ap_reg_ppstg_exitcond9_reg_1097_pp1_it2 <= ap_reg_ppstg_exitcond9_reg_1097_pp1_it1;
                ap_reg_ppstg_exitcond9_reg_1097_pp1_it3 <= ap_reg_ppstg_exitcond9_reg_1097_pp1_it2;
                ap_reg_ppstg_exitcond9_reg_1097_pp1_it4 <= ap_reg_ppstg_exitcond9_reg_1097_pp1_it3;
                ap_reg_ppstg_exitcond9_reg_1097_pp1_it5 <= ap_reg_ppstg_exitcond9_reg_1097_pp1_it4;
                ap_reg_ppstg_exitcond9_reg_1097_pp1_it6 <= ap_reg_ppstg_exitcond9_reg_1097_pp1_it5;
                ap_reg_ppstg_indvar_reg_483_pp1_it1 <= indvar_reg_483;
                ap_reg_ppstg_indvar_reg_483_pp1_it2 <= ap_reg_ppstg_indvar_reg_483_pp1_it1;
                ap_reg_ppstg_indvar_reg_483_pp1_it3 <= ap_reg_ppstg_indvar_reg_483_pp1_it2;
                ap_reg_ppstg_indvar_reg_483_pp1_it4 <= ap_reg_ppstg_indvar_reg_483_pp1_it3;
                ap_reg_ppstg_indvar_reg_483_pp1_it5 <= ap_reg_ppstg_indvar_reg_483_pp1_it4;
                ap_reg_ppstg_indvar_reg_483_pp1_it6 <= ap_reg_ppstg_indvar_reg_483_pp1_it5;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp5_stg0_fsm_16 = ap_CS_fsm) and not((ap_sig_bdd_565 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))))) then
                ap_reg_ppstg_exitcond_reg_1315_pp5_it1 <= exitcond_reg_1315;
                ap_reg_ppstg_isIter_reg_1329_pp5_it1 <= isIter_reg_1329;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm)) then
                ap_reg_ppstg_tmp_11_reg_1235_pp4_it1 <= tmp_11_reg_1235;
                ap_reg_ppstg_tmp_11_reg_1235_pp4_it10 <= ap_reg_ppstg_tmp_11_reg_1235_pp4_it9;
                ap_reg_ppstg_tmp_11_reg_1235_pp4_it11 <= ap_reg_ppstg_tmp_11_reg_1235_pp4_it10;
                ap_reg_ppstg_tmp_11_reg_1235_pp4_it12 <= ap_reg_ppstg_tmp_11_reg_1235_pp4_it11;
                ap_reg_ppstg_tmp_11_reg_1235_pp4_it2 <= ap_reg_ppstg_tmp_11_reg_1235_pp4_it1;
                ap_reg_ppstg_tmp_11_reg_1235_pp4_it3 <= ap_reg_ppstg_tmp_11_reg_1235_pp4_it2;
                ap_reg_ppstg_tmp_11_reg_1235_pp4_it4 <= ap_reg_ppstg_tmp_11_reg_1235_pp4_it3;
                ap_reg_ppstg_tmp_11_reg_1235_pp4_it5 <= ap_reg_ppstg_tmp_11_reg_1235_pp4_it4;
                ap_reg_ppstg_tmp_11_reg_1235_pp4_it6 <= ap_reg_ppstg_tmp_11_reg_1235_pp4_it5;
                ap_reg_ppstg_tmp_11_reg_1235_pp4_it7 <= ap_reg_ppstg_tmp_11_reg_1235_pp4_it6;
                ap_reg_ppstg_tmp_11_reg_1235_pp4_it8 <= ap_reg_ppstg_tmp_11_reg_1235_pp4_it7;
                ap_reg_ppstg_tmp_11_reg_1235_pp4_it9 <= ap_reg_ppstg_tmp_11_reg_1235_pp4_it8;
                ap_reg_ppstg_tmp_1_reg_1213_pp4_it1 <= tmp_1_reg_1213;
                ap_reg_ppstg_tmp_1_reg_1213_pp4_it10 <= ap_reg_ppstg_tmp_1_reg_1213_pp4_it9;
                ap_reg_ppstg_tmp_1_reg_1213_pp4_it11 <= ap_reg_ppstg_tmp_1_reg_1213_pp4_it10;
                ap_reg_ppstg_tmp_1_reg_1213_pp4_it12 <= ap_reg_ppstg_tmp_1_reg_1213_pp4_it11;
                ap_reg_ppstg_tmp_1_reg_1213_pp4_it2 <= ap_reg_ppstg_tmp_1_reg_1213_pp4_it1;
                ap_reg_ppstg_tmp_1_reg_1213_pp4_it3 <= ap_reg_ppstg_tmp_1_reg_1213_pp4_it2;
                ap_reg_ppstg_tmp_1_reg_1213_pp4_it4 <= ap_reg_ppstg_tmp_1_reg_1213_pp4_it3;
                ap_reg_ppstg_tmp_1_reg_1213_pp4_it5 <= ap_reg_ppstg_tmp_1_reg_1213_pp4_it4;
                ap_reg_ppstg_tmp_1_reg_1213_pp4_it6 <= ap_reg_ppstg_tmp_1_reg_1213_pp4_it5;
                ap_reg_ppstg_tmp_1_reg_1213_pp4_it7 <= ap_reg_ppstg_tmp_1_reg_1213_pp4_it6;
                ap_reg_ppstg_tmp_1_reg_1213_pp4_it8 <= ap_reg_ppstg_tmp_1_reg_1213_pp4_it7;
                ap_reg_ppstg_tmp_1_reg_1213_pp4_it9 <= ap_reg_ppstg_tmp_1_reg_1213_pp4_it8;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp5_stg0_fsm_16 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1) and not((ap_sig_bdd_565 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and (ap_const_lv1_0 = exitcond_reg_1315))) then
                c_buffer_load_reg_1333 <= c_buffer_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st24_fsm_9 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond6_reg_1129))) then
                centre_buffer_0_wgtCent_value_addr_2_reg_1193 <= tmp_27_fu_824_p1(8 - 1 downto 0);
                centre_buffer_1_wgtCent_value_addr_2_reg_1198 <= tmp_27_fu_824_p1(8 - 1 downto 0);
                centre_buffer_2_wgtCent_value_addr_2_reg_1203 <= tmp_27_fu_824_p1(8 - 1 downto 0);
                centre_buffer_count_addr_2_reg_1183 <= tmp_27_fu_824_p1(8 - 1 downto 0);
                centre_buffer_sum_sq_addr_2_reg_1188 <= tmp_27_fu_824_p1(8 - 1 downto 0);
                p_buffer_load_1_reg_1173 <= p_buffer_q1;
                p_buffer_load_reg_1168 <= p_buffer_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it1) and (ap_const_lv1_0 = tmp_1_reg_1213))) then
                centre_buffer_2_wgtCent_value_load_reg_1295 <= centre_buffer_2_wgtCent_value_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_1_reg_1213))) then
                count_reg_1246 <= centre_buffer_count_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then
                exitcond1_reg_1116 <= exitcond1_fu_702_p2;
                indvar_next2_reg_1120 <= indvar_next2_fu_708_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st23_fsm_8 = ap_CS_fsm)) then
                exitcond6_reg_1129 <= exitcond6_fu_725_p2;
                i_3_reg_1133 <= i_3_fu_731_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then
                exitcond9_reg_1097 <= exitcond9_fu_654_p2;
                indvar_next_reg_1101 <= indvar_next_fu_660_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp5_stg0_fsm_16 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not((ap_sig_bdd_565 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))))) then
                exitcond_reg_1315 <= exitcond_fu_1020_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it0))) then
                i_2_reg_1217 <= i_2_fu_877_p2;
                tmp_1_reg_1213 <= tmp_1_fu_872_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_lv1_0 = tmp_1_reg_1213) and (ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm))) then
                i_count_reg_1262 <= i_count_fu_910_p3;
                total_distortion_2_reg_1284 <= total_distortion_2_fu_924_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and (ap_const_lv1_0 = exitcond9_fu_654_p2))) then
                isIter0_reg_1106 <= isIter0_fu_666_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and (ap_const_lv1_0 = exitcond1_fu_702_p2))) then
                isIter1_reg_1125 <= isIter1_fu_714_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp5_stg0_fsm_16 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not((ap_sig_bdd_565 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and (ap_const_lv1_0 = exitcond_fu_1020_p2))) then
                isIter_reg_1329 <= isIter_fu_1036_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st14_fsm_6 = ap_CS_fsm)) then
                master_portA_addr_1_reg_1110 <= p_sum1_cast_fu_692_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st66_fsm_15 = ap_CS_fsm)) then
                master_portA_addr_2_reg_1300(0) <= tmp_15_fu_974_p1(32 - 1 downto 0)(0);
    master_portA_addr_2_reg_1300(1) <= tmp_15_fu_974_p1(32 - 1 downto 0)(1);
    master_portA_addr_2_reg_1300(2) <= tmp_15_fu_974_p1(32 - 1 downto 0)(2);
    master_portA_addr_2_reg_1300(3) <= tmp_15_fu_974_p1(32 - 1 downto 0)(3);
    master_portA_addr_2_reg_1300(4) <= tmp_15_fu_974_p1(32 - 1 downto 0)(4);
    master_portA_addr_2_reg_1300(5) <= tmp_15_fu_974_p1(32 - 1 downto 0)(5);
    master_portA_addr_2_reg_1300(6) <= tmp_15_fu_974_p1(32 - 1 downto 0)(6);
    master_portA_addr_2_reg_1300(7) <= tmp_15_fu_974_p1(32 - 1 downto 0)(7);
    master_portA_addr_2_reg_1300(8) <= tmp_15_fu_974_p1(32 - 1 downto 0)(8);
    master_portA_addr_2_reg_1300(9) <= tmp_15_fu_974_p1(32 - 1 downto 0)(9);
    master_portA_addr_2_reg_1300(10) <= tmp_15_fu_974_p1(32 - 1 downto 0)(10);
    master_portA_addr_2_reg_1300(11) <= tmp_15_fu_974_p1(32 - 1 downto 0)(11);
    master_portA_addr_2_reg_1300(12) <= tmp_15_fu_974_p1(32 - 1 downto 0)(12);
    master_portA_addr_2_reg_1300(13) <= tmp_15_fu_974_p1(32 - 1 downto 0)(13);
    master_portA_addr_2_reg_1300(14) <= tmp_15_fu_974_p1(32 - 1 downto 0)(14);
    master_portA_addr_2_reg_1300(15) <= tmp_15_fu_974_p1(32 - 1 downto 0)(15);
    master_portA_addr_2_reg_1300(16) <= tmp_15_fu_974_p1(32 - 1 downto 0)(16);
    master_portA_addr_2_reg_1300(17) <= tmp_15_fu_974_p1(32 - 1 downto 0)(17);
    master_portA_addr_2_reg_1300(18) <= tmp_15_fu_974_p1(32 - 1 downto 0)(18);
    master_portA_addr_2_reg_1300(19) <= tmp_15_fu_974_p1(32 - 1 downto 0)(19);
    master_portA_addr_2_reg_1300(20) <= tmp_15_fu_974_p1(32 - 1 downto 0)(20);
    master_portA_addr_2_reg_1300(21) <= tmp_15_fu_974_p1(32 - 1 downto 0)(21);
    master_portA_addr_2_reg_1300(22) <= tmp_15_fu_974_p1(32 - 1 downto 0)(22);
    master_portA_addr_2_reg_1300(23) <= tmp_15_fu_974_p1(32 - 1 downto 0)(23);
    master_portA_addr_2_reg_1300(24) <= tmp_15_fu_974_p1(32 - 1 downto 0)(24);
    master_portA_addr_2_reg_1300(25) <= tmp_15_fu_974_p1(32 - 1 downto 0)(25);
    master_portA_addr_2_reg_1300(26) <= tmp_15_fu_974_p1(32 - 1 downto 0)(26);
    master_portA_addr_2_reg_1300(27) <= tmp_15_fu_974_p1(32 - 1 downto 0)(27);
    master_portA_addr_2_reg_1300(28) <= tmp_15_fu_974_p1(32 - 1 downto 0)(28);
    master_portA_addr_2_reg_1300(29) <= tmp_15_fu_974_p1(32 - 1 downto 0)(29);
                tmp_25_reg_1310(0) <= tmp_25_fu_1016_p1(0);
    tmp_25_reg_1310(1) <= tmp_25_fu_1016_p1(1);
    tmp_25_reg_1310(2) <= tmp_25_fu_1016_p1(2);
    tmp_25_reg_1310(3) <= tmp_25_fu_1016_p1(3);
    tmp_25_reg_1310(4) <= tmp_25_fu_1016_p1(4);
    tmp_25_reg_1310(5) <= tmp_25_fu_1016_p1(5);
    tmp_25_reg_1310(6) <= tmp_25_fu_1016_p1(6);
    tmp_25_reg_1310(7) <= tmp_25_fu_1016_p1(7);
    tmp_25_reg_1310(8) <= tmp_25_fu_1016_p1(8);
    tmp_25_reg_1310(9) <= tmp_25_fu_1016_p1(9);
    tmp_25_reg_1310(10) <= tmp_25_fu_1016_p1(10);
    tmp_25_reg_1310(11) <= tmp_25_fu_1016_p1(11);
    tmp_25_reg_1310(12) <= tmp_25_fu_1016_p1(12);
    tmp_25_reg_1310(13) <= tmp_25_fu_1016_p1(13);
    tmp_25_reg_1310(14) <= tmp_25_fu_1016_p1(14);
    tmp_25_reg_1310(15) <= tmp_25_fu_1016_p1(15);
    tmp_25_reg_1310(16) <= tmp_25_fu_1016_p1(16);
    tmp_25_reg_1310(17) <= tmp_25_fu_1016_p1(17);
    tmp_25_reg_1310(18) <= tmp_25_fu_1016_p1(18);
    tmp_25_reg_1310(19) <= tmp_25_fu_1016_p1(19);
    tmp_25_reg_1310(20) <= tmp_25_fu_1016_p1(20);
    tmp_25_reg_1310(21) <= tmp_25_fu_1016_p1(21);
    tmp_25_reg_1310(22) <= tmp_25_fu_1016_p1(22);
    tmp_25_reg_1310(23) <= tmp_25_fu_1016_p1(23);
    tmp_25_reg_1310(24) <= tmp_25_fu_1016_p1(24);
    tmp_25_reg_1310(25) <= tmp_25_fu_1016_p1(25);
    tmp_25_reg_1310(26) <= tmp_25_fu_1016_p1(26);
    tmp_25_reg_1310(27) <= tmp_25_fu_1016_p1(27);
    tmp_25_reg_1310(28) <= tmp_25_fu_1016_p1(28);
    tmp_25_reg_1310(29) <= tmp_25_fu_1016_p1(29);
                tmp_38_add_i32_shr_reg_1305 <= tmp_24_fu_1000_p2(31 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_3_fu_618_p2))) then
                master_portA_addr_reg_1091 <= p_sum_cast_fu_644_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_reg_ppstg_exitcond9_reg_1097_pp1_it5 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6)))) or ((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1116_pp2_it5) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6)))))) then
                reg_565 <= master_portA_datain;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_lv1_0 = tmp_1_fu_872_p2))) then
                tmp_11_reg_1235 <= tmp_11_fu_894_p2;
                tmp_13_reg_1242 <= tmp_13_fu_900_p2;
                tmp_8_reg_1222(0) <= tmp_8_fu_883_p1(0);
    tmp_8_reg_1222(1) <= tmp_8_fu_883_p1(1);
    tmp_8_reg_1222(2) <= tmp_8_fu_883_p1(2);
    tmp_8_reg_1222(3) <= tmp_8_fu_883_p1(3);
    tmp_8_reg_1222(4) <= tmp_8_fu_883_p1(4);
    tmp_8_reg_1222(5) <= tmp_8_fu_883_p1(5);
    tmp_8_reg_1222(6) <= tmp_8_fu_883_p1(6);
    tmp_8_reg_1222(7) <= tmp_8_fu_883_p1(7);
    tmp_8_reg_1222(8) <= tmp_8_fu_883_p1(8);
    tmp_8_reg_1222(9) <= tmp_8_fu_883_p1(9);
    tmp_8_reg_1222(10) <= tmp_8_fu_883_p1(10);
    tmp_8_reg_1222(11) <= tmp_8_fu_883_p1(11);
    tmp_8_reg_1222(12) <= tmp_8_fu_883_p1(12);
    tmp_8_reg_1222(13) <= tmp_8_fu_883_p1(13);
    tmp_8_reg_1222(14) <= tmp_8_fu_883_p1(14);
    tmp_8_reg_1222(15) <= tmp_8_fu_883_p1(15);
    tmp_8_reg_1222(16) <= tmp_8_fu_883_p1(16);
    tmp_8_reg_1222(17) <= tmp_8_fu_883_p1(17);
    tmp_8_reg_1222(18) <= tmp_8_fu_883_p1(18);
    tmp_8_reg_1222(19) <= tmp_8_fu_883_p1(19);
    tmp_8_reg_1222(20) <= tmp_8_fu_883_p1(20);
    tmp_8_reg_1222(21) <= tmp_8_fu_883_p1(21);
    tmp_8_reg_1222(22) <= tmp_8_fu_883_p1(22);
    tmp_8_reg_1222(23) <= tmp_8_fu_883_p1(23);
    tmp_8_reg_1222(24) <= tmp_8_fu_883_p1(24);
    tmp_8_reg_1222(25) <= tmp_8_fu_883_p1(25);
    tmp_8_reg_1222(26) <= tmp_8_fu_883_p1(26);
    tmp_8_reg_1222(27) <= tmp_8_fu_883_p1(27);
    tmp_8_reg_1222(28) <= tmp_8_fu_883_p1(28);
    tmp_8_reg_1222(29) <= tmp_8_fu_883_p1(29);
    tmp_8_reg_1222(30) <= tmp_8_fu_883_p1(30);
    tmp_8_reg_1222(31) <= tmp_8_fu_883_p1(31);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st23_fsm_8 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond6_fu_725_p2))) then
                tmp_22_reg_1148 <= tmp_22_fu_768_p2;
                tmp_36_reg_1138 <= tmp_36_fu_741_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then
                tmp_5_cast_reg_1078(0) <= tmp_5_cast_fu_601_p1(0);
    tmp_5_cast_reg_1078(1) <= tmp_5_cast_fu_601_p1(1);
    tmp_5_cast_reg_1078(2) <= tmp_5_cast_fu_601_p1(2);
    tmp_5_cast_reg_1078(3) <= tmp_5_cast_fu_601_p1(3);
    tmp_5_cast_reg_1078(4) <= tmp_5_cast_fu_601_p1(4);
    tmp_5_cast_reg_1078(5) <= tmp_5_cast_fu_601_p1(5);
    tmp_5_cast_reg_1078(6) <= tmp_5_cast_fu_601_p1(6);
    tmp_5_cast_reg_1078(7) <= tmp_5_cast_fu_601_p1(7);
    tmp_5_cast_reg_1078(8) <= tmp_5_cast_fu_601_p1(8);
    tmp_5_cast_reg_1078(9) <= tmp_5_cast_fu_601_p1(9);
    tmp_5_cast_reg_1078(10) <= tmp_5_cast_fu_601_p1(10);
    tmp_5_cast_reg_1078(11) <= tmp_5_cast_fu_601_p1(11);
    tmp_5_cast_reg_1078(12) <= tmp_5_cast_fu_601_p1(12);
    tmp_5_cast_reg_1078(13) <= tmp_5_cast_fu_601_p1(13);
    tmp_5_cast_reg_1078(14) <= tmp_5_cast_fu_601_p1(14);
    tmp_5_cast_reg_1078(15) <= tmp_5_cast_fu_601_p1(15);
    tmp_5_cast_reg_1078(16) <= tmp_5_cast_fu_601_p1(16);
    tmp_5_cast_reg_1078(17) <= tmp_5_cast_fu_601_p1(17);
    tmp_5_cast_reg_1078(18) <= tmp_5_cast_fu_601_p1(18);
    tmp_5_cast_reg_1078(19) <= tmp_5_cast_fu_601_p1(19);
    tmp_5_cast_reg_1078(20) <= tmp_5_cast_fu_601_p1(20);
    tmp_5_cast_reg_1078(21) <= tmp_5_cast_fu_601_p1(21);
    tmp_5_cast_reg_1078(22) <= tmp_5_cast_fu_601_p1(22);
    tmp_5_cast_reg_1078(23) <= tmp_5_cast_fu_601_p1(23);
    tmp_5_cast_reg_1078(24) <= tmp_5_cast_fu_601_p1(24);
    tmp_5_cast_reg_1078(25) <= tmp_5_cast_fu_601_p1(25);
    tmp_5_cast_reg_1078(26) <= tmp_5_cast_fu_601_p1(26);
    tmp_5_cast_reg_1078(27) <= tmp_5_cast_fu_601_p1(27);
    tmp_5_cast_reg_1078(28) <= tmp_5_cast_fu_601_p1(28);
    tmp_5_cast_reg_1078(29) <= tmp_5_cast_fu_601_p1(29);
                tmp_cast_reg_1083(0) <= tmp_cast_fu_614_p1(0);
    tmp_cast_reg_1083(1) <= tmp_cast_fu_614_p1(1);
    tmp_cast_reg_1083(2) <= tmp_cast_fu_614_p1(2);
    tmp_cast_reg_1083(3) <= tmp_cast_fu_614_p1(3);
    tmp_cast_reg_1083(4) <= tmp_cast_fu_614_p1(4);
    tmp_cast_reg_1083(5) <= tmp_cast_fu_614_p1(5);
    tmp_cast_reg_1083(6) <= tmp_cast_fu_614_p1(6);
    tmp_cast_reg_1083(7) <= tmp_cast_fu_614_p1(7);
    tmp_cast_reg_1083(8) <= tmp_cast_fu_614_p1(8);
    tmp_cast_reg_1083(9) <= tmp_cast_fu_614_p1(9);
    tmp_cast_reg_1083(10) <= tmp_cast_fu_614_p1(10);
    tmp_cast_reg_1083(11) <= tmp_cast_fu_614_p1(11);
    tmp_cast_reg_1083(12) <= tmp_cast_fu_614_p1(12);
    tmp_cast_reg_1083(13) <= tmp_cast_fu_614_p1(13);
    tmp_cast_reg_1083(14) <= tmp_cast_fu_614_p1(14);
    tmp_cast_reg_1083(15) <= tmp_cast_fu_614_p1(15);
    tmp_cast_reg_1083(16) <= tmp_cast_fu_614_p1(16);
    tmp_cast_reg_1083(17) <= tmp_cast_fu_614_p1(17);
    tmp_cast_reg_1083(18) <= tmp_cast_fu_614_p1(18);
    tmp_cast_reg_1083(19) <= tmp_cast_fu_614_p1(19);
    tmp_cast_reg_1083(20) <= tmp_cast_fu_614_p1(20);
    tmp_cast_reg_1083(21) <= tmp_cast_fu_614_p1(21);
    tmp_cast_reg_1083(22) <= tmp_cast_fu_614_p1(22);
    tmp_cast_reg_1083(23) <= tmp_cast_fu_614_p1(23);
    tmp_cast_reg_1083(24) <= tmp_cast_fu_614_p1(24);
    tmp_cast_reg_1083(25) <= tmp_cast_fu_614_p1(25);
    tmp_cast_reg_1083(26) <= tmp_cast_fu_614_p1(26);
    tmp_cast_reg_1083(27) <= tmp_cast_fu_614_p1(27);
    tmp_cast_reg_1083(28) <= tmp_cast_fu_614_p1(28);
    tmp_cast_reg_1083(29) <= tmp_cast_fu_614_p1(29);
            end if;
        end if;
    end process;
    data_points_in_addr0vld_reg <= '0';
    kernel_info_in_addr0vld_reg <= '0';
    centres_out_addr0vld_reg <= '0';
    distortion_out1vld_reg <= '0';
    n0vld_reg <= '0';
    k0vld_reg <= '0';
    tmp_5_cast_reg_1078(32 downto 30) <= "000";
    tmp_cast_reg_1083(32 downto 30) <= "000";
    tmp_8_reg_1222(63 downto 32) <= "00000000000000000000000000000000";
    master_portA_addr_2_reg_1300(31 downto 30) <= "00";
    tmp_25_reg_1310(31 downto 30) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , distortion_out1ack_in , ap_reg_ppiten_pp1_it0 , ap_reg_ppiten_pp1_it1 , ap_sig_bdd_218 , ap_reg_ppiten_pp1_it6 , ap_reg_ppiten_pp1_it7 , ap_reg_ppiten_pp2_it0 , ap_reg_ppiten_pp2_it1 , ap_sig_bdd_251 , ap_reg_ppiten_pp2_it6 , ap_reg_ppiten_pp2_it7 , tmp_3_fu_618_p2 , exitcond9_fu_654_p2 , exitcond1_fu_702_p2 , exitcond6_fu_725_p2 , ap_reg_ppiten_pp4_it11 , ap_reg_ppiten_pp4_it12 , exitcond_fu_1020_p2 , ap_reg_ppiten_pp5_it0 , ap_reg_ppiten_pp5_it1 , ap_sig_bdd_565 , ap_reg_ppiten_pp5_it2 , exitcond8_fu_571_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond8_fu_571_p2)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = tmp_3_fu_618_p2)) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp4_stg0_fsm_12;
                end if;
            when ap_ST_pp1_stg0_fsm_5 => 
                if ((not(((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it7) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it6)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and not((ap_const_lv1_0 = exitcond9_fu_654_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_5;
                elsif ((((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it7) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and not((ap_const_lv1_0 = exitcond9_fu_654_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_5;
                end if;
            when ap_ST_st14_fsm_6 => 
                ap_NS_fsm <= ap_ST_pp2_stg0_fsm_7;
            when ap_ST_pp2_stg0_fsm_7 => 
                if ((not(((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it7) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it6)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_lv1_0 = exitcond1_fu_702_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_7;
                elsif ((((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it7) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_lv1_0 = exitcond1_fu_702_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_7;
                end if;
            when ap_ST_st23_fsm_8 => 
                if ((ap_const_lv1_0 = exitcond6_fu_725_p2)) then
                    ap_NS_fsm <= ap_ST_st24_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_11;
                end if;
            when ap_ST_st24_fsm_9 => 
                ap_NS_fsm <= ap_ST_st25_fsm_10;
            when ap_ST_st25_fsm_10 => 
                ap_NS_fsm <= ap_ST_st23_fsm_8;
            when ap_ST_st26_fsm_11 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_pp4_stg0_fsm_12 => 
                ap_NS_fsm <= ap_ST_pp4_stg1_fsm_13;
            when ap_ST_pp4_stg1_fsm_13 => 
                ap_NS_fsm <= ap_ST_pp4_stg2_fsm_14;
            when ap_ST_pp4_stg2_fsm_14 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp4_it12) and (ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm) and not((ap_const_logic_1 = ap_reg_ppiten_pp4_it11))))) then
                    ap_NS_fsm <= ap_ST_pp4_stg0_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st66_fsm_15;
                end if;
            when ap_ST_st66_fsm_15 => 
                ap_NS_fsm <= ap_ST_pp5_stg0_fsm_16;
            when ap_ST_pp5_stg0_fsm_16 => 
                if ((not(((ap_ST_pp5_stg0_fsm_16 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2) and not((ap_sig_bdd_565 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp5_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not((ap_sig_bdd_565 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_lv1_0 = exitcond_fu_1020_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp5_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp5_stg0_fsm_16;
                elsif ((((ap_ST_pp5_stg0_fsm_16 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2) and not((ap_sig_bdd_565 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp5_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not((ap_sig_bdd_565 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_lv1_0 = exitcond_fu_1020_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp5_it1))))) then
                    ap_NS_fsm <= ap_ST_st70_fsm_17;
                else
                    ap_NS_fsm <= ap_ST_pp5_stg0_fsm_16;
                end if;
            when ap_ST_st70_fsm_17 => 
                ap_NS_fsm <= ap_ST_st71_fsm_18;
            when ap_ST_st71_fsm_18 => 
                if (not((distortion_out1ack_in = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st71_fsm_18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, distortion_out1ack_in)
    begin
        if (((ap_ST_st71_fsm_18 = ap_CS_fsm) and not((distortion_out1ack_in = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, distortion_out1ack_in)
    begin
        if (((ap_ST_st71_fsm_18 = ap_CS_fsm) and not((distortion_out1ack_in = ap_const_logic_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_1186 assign process. --
    ap_sig_bdd_1186_assign_proc : process(ap_CS_fsm, tmp_1_fu_872_p2)
    begin
                ap_sig_bdd_1186 <= ((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_1_fu_872_p2)));
    end process;


    -- ap_sig_bdd_1189 assign process. --
    ap_sig_bdd_1189_assign_proc : process(ap_CS_fsm, tmp_1_reg_1213, tmp_13_reg_1242)
    begin
                ap_sig_bdd_1189 <= ((ap_const_lv1_0 = tmp_1_reg_1213) and (ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_13_reg_1242)));
    end process;


    -- ap_sig_bdd_218 assign process. --
    ap_sig_bdd_218_assign_proc : process(master_portA_rsp_empty_n, ap_reg_ppstg_exitcond9_reg_1097_pp1_it5)
    begin
                ap_sig_bdd_218 <= ((master_portA_rsp_empty_n = ap_const_logic_0) and (ap_reg_ppstg_exitcond9_reg_1097_pp1_it5 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_251 assign process. --
    ap_sig_bdd_251_assign_proc : process(master_portA_rsp_empty_n, ap_reg_ppstg_exitcond1_reg_1116_pp2_it5)
    begin
                ap_sig_bdd_251 <= ((master_portA_rsp_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1116_pp2_it5));
    end process;


    -- ap_sig_bdd_565 assign process. --
    ap_sig_bdd_565_assign_proc : process(master_portA_req_full_n, ap_reg_ppstg_exitcond_reg_1315_pp5_it1)
    begin
                ap_sig_bdd_565 <= ((master_portA_req_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1315_pp5_it1));
    end process;

    b_1_fu_866_p2 <= std_logic_vector(unsigned(b_reg_471) + unsigned(ap_const_lv32_10));

    -- c_buffer_address0 assign process. --
    c_buffer_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it12, ap_reg_ppiten_pp5_it0, tmp_12_fu_941_p1, tmp_26_1_fu_950_p1, tmp_26_2_fu_960_p1, tmp_28_fu_1031_p1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp4_it12) and (ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm))) then 
            c_buffer_address0 <= tmp_26_2_fu_960_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp4_it12) and (ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm))) then 
            c_buffer_address0 <= tmp_26_1_fu_950_p1(10 - 1 downto 0);
        elsif (((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it12))) then 
            c_buffer_address0 <= tmp_12_fu_941_p1(10 - 1 downto 0);
        elsif (((ap_ST_pp5_stg0_fsm_16 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it0))) then 
            c_buffer_address0 <= tmp_28_fu_1031_p1(10 - 1 downto 0);
        else 
            c_buffer_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- c_buffer_ce0 assign process. --
    c_buffer_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it12, ap_reg_ppiten_pp5_it0, ap_sig_bdd_565, ap_reg_ppiten_pp5_it2)
    begin
        if ((((ap_ST_pp5_stg0_fsm_16 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not((ap_sig_bdd_565 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2)))) or ((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it12)) or ((ap_const_logic_1 = ap_reg_ppiten_pp4_it12) and (ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_reg_ppiten_pp4_it12) and (ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm)))) then 
            c_buffer_ce0 <= ap_const_logic_1;
        else 
            c_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_buffer_d0 assign process. --
    c_buffer_d0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it12, grp_fu_917_p2, grp_fu_930_p2, grp_fu_936_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp4_it12)) then
            if ((ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm)) then 
                c_buffer_d0 <= grp_fu_936_p2;
            elsif ((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) then 
                c_buffer_d0 <= grp_fu_930_p2;
            elsif ((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm)) then 
                c_buffer_d0 <= grp_fu_917_p2;
            else 
                c_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            c_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- c_buffer_we0 assign process. --
    c_buffer_we0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it12, ap_reg_ppstg_tmp_1_reg_1213_pp4_it11, ap_reg_ppstg_tmp_1_reg_1213_pp4_it12)
    begin
        if ((((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it12) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_1_reg_1213_pp4_it11)) or ((ap_const_logic_1 = ap_reg_ppiten_pp4_it12) and (ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_1_reg_1213_pp4_it12)) or ((ap_const_logic_1 = ap_reg_ppiten_pp4_it12) and (ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_1_reg_1213_pp4_it12)))) then 
            c_buffer_we0 <= ap_const_logic_1;
        else 
            c_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centre_buffer_0_wgtCent_value_address0 assign process. --
    centre_buffer_0_wgtCent_value_address0_assign_proc : process(ap_CS_fsm, centre_buffer_0_wgtCent_value_addr_2_reg_1193, ap_reg_ppiten_pp4_it0, tmp_8_reg_1222, tmp_2_fu_583_p1, tmp_27_fu_824_p1)
    begin
        if ((ap_ST_st25_fsm_10 = ap_CS_fsm)) then 
            centre_buffer_0_wgtCent_value_address0 <= centre_buffer_0_wgtCent_value_addr_2_reg_1193;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            centre_buffer_0_wgtCent_value_address0 <= tmp_2_fu_583_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm))) then 
            centre_buffer_0_wgtCent_value_address0 <= tmp_8_reg_1222(8 - 1 downto 0);
        elsif ((ap_ST_st24_fsm_9 = ap_CS_fsm)) then 
            centre_buffer_0_wgtCent_value_address0 <= tmp_27_fu_824_p1(8 - 1 downto 0);
        else 
            centre_buffer_0_wgtCent_value_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- centre_buffer_0_wgtCent_value_ce0 assign process. --
    centre_buffer_0_wgtCent_value_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it0)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st24_fsm_9 = ap_CS_fsm) or ((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) or (ap_ST_st25_fsm_10 = ap_CS_fsm))) then 
            centre_buffer_0_wgtCent_value_ce0 <= ap_const_logic_1;
        else 
            centre_buffer_0_wgtCent_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centre_buffer_0_wgtCent_value_d0 assign process. --
    centre_buffer_0_wgtCent_value_d0_assign_proc : process(ap_CS_fsm, tmp_33_fu_847_p2)
    begin
        if ((ap_ST_st25_fsm_10 = ap_CS_fsm)) then 
            centre_buffer_0_wgtCent_value_d0 <= tmp_33_fu_847_p2;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            centre_buffer_0_wgtCent_value_d0 <= ap_const_lv32_0;
        else 
            centre_buffer_0_wgtCent_value_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- centre_buffer_0_wgtCent_value_we0 assign process. --
    centre_buffer_0_wgtCent_value_we0_assign_proc : process(ap_CS_fsm, exitcond6_reg_1129, exitcond8_fu_571_p2)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_571_p2)) or ((ap_const_lv1_0 = exitcond6_reg_1129) and (ap_ST_st25_fsm_10 = ap_CS_fsm)))) then 
            centre_buffer_0_wgtCent_value_we0 <= ap_const_logic_1;
        else 
            centre_buffer_0_wgtCent_value_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centre_buffer_1_wgtCent_value_address0 assign process. --
    centre_buffer_1_wgtCent_value_address0_assign_proc : process(ap_CS_fsm, centre_buffer_1_wgtCent_value_addr_2_reg_1198, ap_reg_ppiten_pp4_it0, tmp_8_reg_1222, tmp_2_fu_583_p1, tmp_27_fu_824_p1)
    begin
        if ((ap_ST_st25_fsm_10 = ap_CS_fsm)) then 
            centre_buffer_1_wgtCent_value_address0 <= centre_buffer_1_wgtCent_value_addr_2_reg_1198;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            centre_buffer_1_wgtCent_value_address0 <= tmp_2_fu_583_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm))) then 
            centre_buffer_1_wgtCent_value_address0 <= tmp_8_reg_1222(8 - 1 downto 0);
        elsif ((ap_ST_st24_fsm_9 = ap_CS_fsm)) then 
            centre_buffer_1_wgtCent_value_address0 <= tmp_27_fu_824_p1(8 - 1 downto 0);
        else 
            centre_buffer_1_wgtCent_value_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- centre_buffer_1_wgtCent_value_ce0 assign process. --
    centre_buffer_1_wgtCent_value_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it0)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st24_fsm_9 = ap_CS_fsm) or ((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm)) or (ap_ST_st25_fsm_10 = ap_CS_fsm))) then 
            centre_buffer_1_wgtCent_value_ce0 <= ap_const_logic_1;
        else 
            centre_buffer_1_wgtCent_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centre_buffer_1_wgtCent_value_d0 assign process. --
    centre_buffer_1_wgtCent_value_d0_assign_proc : process(ap_CS_fsm, tmp_43_1_fu_853_p2)
    begin
        if ((ap_ST_st25_fsm_10 = ap_CS_fsm)) then 
            centre_buffer_1_wgtCent_value_d0 <= tmp_43_1_fu_853_p2;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            centre_buffer_1_wgtCent_value_d0 <= ap_const_lv32_0;
        else 
            centre_buffer_1_wgtCent_value_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- centre_buffer_1_wgtCent_value_we0 assign process. --
    centre_buffer_1_wgtCent_value_we0_assign_proc : process(ap_CS_fsm, exitcond6_reg_1129, exitcond8_fu_571_p2)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_571_p2)) or ((ap_const_lv1_0 = exitcond6_reg_1129) and (ap_ST_st25_fsm_10 = ap_CS_fsm)))) then 
            centre_buffer_1_wgtCent_value_we0 <= ap_const_logic_1;
        else 
            centre_buffer_1_wgtCent_value_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centre_buffer_2_wgtCent_value_address0 assign process. --
    centre_buffer_2_wgtCent_value_address0_assign_proc : process(ap_CS_fsm, centre_buffer_2_wgtCent_value_addr_2_reg_1203, ap_reg_ppiten_pp4_it0, tmp_8_reg_1222, tmp_2_fu_583_p1, tmp_27_fu_824_p1)
    begin
        if ((ap_ST_st25_fsm_10 = ap_CS_fsm)) then 
            centre_buffer_2_wgtCent_value_address0 <= centre_buffer_2_wgtCent_value_addr_2_reg_1203;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            centre_buffer_2_wgtCent_value_address0 <= tmp_2_fu_583_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm))) then 
            centre_buffer_2_wgtCent_value_address0 <= tmp_8_reg_1222(8 - 1 downto 0);
        elsif ((ap_ST_st24_fsm_9 = ap_CS_fsm)) then 
            centre_buffer_2_wgtCent_value_address0 <= tmp_27_fu_824_p1(8 - 1 downto 0);
        else 
            centre_buffer_2_wgtCent_value_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- centre_buffer_2_wgtCent_value_ce0 assign process. --
    centre_buffer_2_wgtCent_value_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it0)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st24_fsm_9 = ap_CS_fsm) or ((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_ST_pp4_stg2_fsm_14 = ap_CS_fsm)) or (ap_ST_st25_fsm_10 = ap_CS_fsm))) then 
            centre_buffer_2_wgtCent_value_ce0 <= ap_const_logic_1;
        else 
            centre_buffer_2_wgtCent_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centre_buffer_2_wgtCent_value_d0 assign process. --
    centre_buffer_2_wgtCent_value_d0_assign_proc : process(ap_CS_fsm, tmp_43_2_fu_859_p2)
    begin
        if ((ap_ST_st25_fsm_10 = ap_CS_fsm)) then 
            centre_buffer_2_wgtCent_value_d0 <= tmp_43_2_fu_859_p2;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            centre_buffer_2_wgtCent_value_d0 <= ap_const_lv32_0;
        else 
            centre_buffer_2_wgtCent_value_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- centre_buffer_2_wgtCent_value_we0 assign process. --
    centre_buffer_2_wgtCent_value_we0_assign_proc : process(ap_CS_fsm, exitcond6_reg_1129, exitcond8_fu_571_p2)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_571_p2)) or ((ap_const_lv1_0 = exitcond6_reg_1129) and (ap_ST_st25_fsm_10 = ap_CS_fsm)))) then 
            centre_buffer_2_wgtCent_value_we0 <= ap_const_logic_1;
        else 
            centre_buffer_2_wgtCent_value_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centre_buffer_count_address0 assign process. --
    centre_buffer_count_address0_assign_proc : process(ap_CS_fsm, centre_buffer_count_addr_2_reg_1183, ap_reg_ppiten_pp4_it0, tmp_8_fu_883_p1, tmp_2_fu_583_p1, tmp_27_fu_824_p1)
    begin
        if ((ap_ST_st25_fsm_10 = ap_CS_fsm)) then 
            centre_buffer_count_address0 <= centre_buffer_count_addr_2_reg_1183;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            centre_buffer_count_address0 <= tmp_2_fu_583_p1(8 - 1 downto 0);
        elsif (((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it0))) then 
            centre_buffer_count_address0 <= tmp_8_fu_883_p1(8 - 1 downto 0);
        elsif ((ap_ST_st24_fsm_9 = ap_CS_fsm)) then 
            centre_buffer_count_address0 <= tmp_27_fu_824_p1(8 - 1 downto 0);
        else 
            centre_buffer_count_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- centre_buffer_count_ce0 assign process. --
    centre_buffer_count_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it0)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st24_fsm_9 = ap_CS_fsm) or ((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it0)) or (ap_ST_st25_fsm_10 = ap_CS_fsm))) then 
            centre_buffer_count_ce0 <= ap_const_logic_1;
        else 
            centre_buffer_count_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centre_buffer_count_d0 assign process. --
    centre_buffer_count_d0_assign_proc : process(ap_CS_fsm, tmp_31_fu_833_p2)
    begin
        if ((ap_ST_st25_fsm_10 = ap_CS_fsm)) then 
            centre_buffer_count_d0 <= tmp_31_fu_833_p2;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            centre_buffer_count_d0 <= ap_const_lv32_0;
        else 
            centre_buffer_count_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- centre_buffer_count_we0 assign process. --
    centre_buffer_count_we0_assign_proc : process(ap_CS_fsm, exitcond6_reg_1129, exitcond8_fu_571_p2)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_571_p2)) or ((ap_const_lv1_0 = exitcond6_reg_1129) and (ap_ST_st25_fsm_10 = ap_CS_fsm)))) then 
            centre_buffer_count_we0 <= ap_const_logic_1;
        else 
            centre_buffer_count_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centre_buffer_sum_sq_address0 assign process. --
    centre_buffer_sum_sq_address0_assign_proc : process(ap_CS_fsm, centre_buffer_sum_sq_addr_2_reg_1188, ap_reg_ppiten_pp4_it0, tmp_8_reg_1222, tmp_2_fu_583_p1, tmp_27_fu_824_p1)
    begin
        if ((ap_ST_st25_fsm_10 = ap_CS_fsm)) then 
            centre_buffer_sum_sq_address0 <= centre_buffer_sum_sq_addr_2_reg_1188;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            centre_buffer_sum_sq_address0 <= tmp_2_fu_583_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm))) then 
            centre_buffer_sum_sq_address0 <= tmp_8_reg_1222(8 - 1 downto 0);
        elsif ((ap_ST_st24_fsm_9 = ap_CS_fsm)) then 
            centre_buffer_sum_sq_address0 <= tmp_27_fu_824_p1(8 - 1 downto 0);
        else 
            centre_buffer_sum_sq_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- centre_buffer_sum_sq_ce0 assign process. --
    centre_buffer_sum_sq_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it0)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st24_fsm_9 = ap_CS_fsm) or ((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) or (ap_ST_st25_fsm_10 = ap_CS_fsm))) then 
            centre_buffer_sum_sq_ce0 <= ap_const_logic_1;
        else 
            centre_buffer_sum_sq_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centre_buffer_sum_sq_d0 assign process. --
    centre_buffer_sum_sq_d0_assign_proc : process(ap_CS_fsm, tmp_32_fu_840_p2)
    begin
        if ((ap_ST_st25_fsm_10 = ap_CS_fsm)) then 
            centre_buffer_sum_sq_d0 <= tmp_32_fu_840_p2;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            centre_buffer_sum_sq_d0 <= ap_const_lv32_0;
        else 
            centre_buffer_sum_sq_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- centre_buffer_sum_sq_we0 assign process. --
    centre_buffer_sum_sq_we0_assign_proc : process(ap_CS_fsm, exitcond6_reg_1129, exitcond8_fu_571_p2)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_571_p2)) or ((ap_const_lv1_0 = exitcond6_reg_1129) and (ap_ST_st25_fsm_10 = ap_CS_fsm)))) then 
            centre_buffer_sum_sq_we0 <= ap_const_logic_1;
        else 
            centre_buffer_sum_sq_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centres_out_addr0ack_out assign process. --
    centres_out_addr0ack_out_assign_proc : process(ap_CS_fsm, distortion_out1ack_in)
    begin
        if (((ap_ST_st71_fsm_18 = ap_CS_fsm) and not((distortion_out1ack_in = ap_const_logic_0)))) then 
            centres_out_addr0ack_out <= ap_const_logic_1;
        else 
            centres_out_addr0ack_out <= ap_const_logic_0;
        end if; 
    end process;


    -- data_points_in_addr0ack_out assign process. --
    data_points_in_addr0ack_out_assign_proc : process(ap_CS_fsm, distortion_out1ack_in)
    begin
        if (((ap_ST_st71_fsm_18 = ap_CS_fsm) and not((distortion_out1ack_in = ap_const_logic_0)))) then 
            data_points_in_addr0ack_out <= ap_const_logic_1;
        else 
            data_points_in_addr0ack_out <= ap_const_logic_0;
        end if; 
    end process;

    distortion_out <= distortion_out1data_reg;

    -- distortion_out1ack_in assign process. --
    distortion_out1ack_in_assign_proc : process(distortion_out1vld_reg)
    begin
        if (((ap_const_logic_0 = distortion_out1vld_reg) or ((ap_const_logic_1 = distortion_out1vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            distortion_out1ack_in <= ap_const_logic_1;
        else 
            distortion_out1ack_in <= ap_const_logic_0;
        end if; 
    end process;


    -- distortion_out1vld_in assign process. --
    distortion_out1vld_in_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st70_fsm_17 = ap_CS_fsm)) then 
            distortion_out1vld_in <= ap_const_logic_1;
        else 
            distortion_out1vld_in <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_702_p2 <= "1" when (indvar2_phi_fu_499_p4 = ap_const_lv6_20) else "0";
    exitcond6_fu_725_p2 <= "1" when (i1_reg_507 = ap_const_lv5_10) else "0";
    exitcond8_fu_571_p2 <= "1" when (i_reg_460 = ap_const_lv9_100) else "0";
    exitcond9_fu_654_p2 <= "1" when (indvar_phi_fu_487_p4 = ap_const_lv6_30) else "0";
    exitcond_fu_1020_p2 <= "1" when (indvar1_reg_553 = tmp_38_add_i32_shr_reg_1305) else "0";
    grp_fu_917_ce <= ap_const_logic_1;
    grp_fu_917_p0 <= centre_buffer_0_wgtCent_value_q0;
    grp_fu_917_p1 <= 
        ap_const_lv32_1 when (tmp_9_fu_905_p2(0) = '1') else 
        count_reg_1246;
    grp_fu_930_ce <= ap_const_logic_1;
    grp_fu_930_p0 <= centre_buffer_1_wgtCent_value_q0;
    grp_fu_930_p1 <= i_count_reg_1262;
    grp_fu_936_ce <= ap_const_logic_1;
    grp_fu_936_p0 <= centre_buffer_2_wgtCent_value_load_reg_1295;
    grp_fu_936_p1 <= i_count_reg_1262;
    i1_cast2_fu_737_p1 <= std_logic_vector(resize(unsigned(i1_reg_507),7));

    -- i5_phi_fu_534_p4 assign process. --
    i5_phi_fu_534_p4_assign_proc : process(ap_CS_fsm, i5_reg_530, tmp_1_reg_1213, ap_reg_ppiten_pp4_it1, i_2_reg_1217, tmp_13_reg_1242)
    begin
        if (((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it1) and (ap_const_lv1_0 = tmp_1_reg_1213) and (ap_const_lv1_0 = tmp_13_reg_1242))) then 
            i5_phi_fu_534_p4 <= i_2_reg_1217;
        else 
            i5_phi_fu_534_p4 <= i5_reg_530;
        end if; 
    end process;

    i_1_fu_577_p2 <= std_logic_vector(unsigned(i_reg_460) + unsigned(ap_const_lv9_1));
    i_2_fu_877_p2 <= std_logic_vector(unsigned(i5_phi_fu_534_p4) + unsigned(ap_const_lv32_1));
    i_3_fu_731_p2 <= std_logic_vector(unsigned(i1_reg_507) + unsigned(ap_const_lv5_1));

    -- i_buffer_address0 assign process. --
    i_buffer_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp2_it7, tmp_34_fu_720_p1, tmp_19_fu_751_p1, tmp_21_fu_805_p1)
    begin
        if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it7))) then 
            i_buffer_address0 <= tmp_34_fu_720_p1(5 - 1 downto 0);
        elsif ((ap_ST_st24_fsm_9 = ap_CS_fsm)) then 
            i_buffer_address0 <= tmp_21_fu_805_p1(5 - 1 downto 0);
        elsif ((ap_ST_st23_fsm_8 = ap_CS_fsm)) then 
            i_buffer_address0 <= tmp_19_fu_751_p1(5 - 1 downto 0);
        else 
            i_buffer_address0 <= "XXXXX";
        end if; 
    end process;


    -- i_buffer_ce0 assign process. --
    i_buffer_ce0_assign_proc : process(ap_CS_fsm, ap_sig_bdd_251, ap_reg_ppiten_pp2_it6, ap_reg_ppiten_pp2_it7)
    begin
        if (((ap_ST_st23_fsm_8 = ap_CS_fsm) or (ap_ST_st24_fsm_9 = ap_CS_fsm) or ((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it7) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6)))))) then 
            i_buffer_ce0 <= ap_const_logic_1;
        else 
            i_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_buffer_d0 <= reg_565;

    -- i_buffer_we0 assign process. --
    i_buffer_we0_assign_proc : process(ap_CS_fsm, ap_sig_bdd_251, ap_reg_ppiten_pp2_it6, ap_reg_ppiten_pp2_it7, ap_reg_ppstg_exitcond1_reg_1116_pp2_it6)
    begin
        if ((((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it7) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1116_pp2_it6)))) then 
            i_buffer_we0 <= ap_const_logic_1;
        else 
            i_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_count_fu_910_p3 <= 
        ap_const_lv32_1 when (tmp_9_fu_905_p2(0) = '1') else 
        count_reg_1246;

    -- indvar2_phi_fu_499_p4 assign process. --
    indvar2_phi_fu_499_p4_assign_proc : process(ap_CS_fsm, indvar2_reg_495, ap_reg_ppiten_pp2_it1, exitcond1_reg_1116, indvar_next2_reg_1120)
    begin
        if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond1_reg_1116))) then 
            indvar2_phi_fu_499_p4 <= indvar_next2_reg_1120;
        else 
            indvar2_phi_fu_499_p4 <= indvar2_reg_495;
        end if; 
    end process;

    indvar_next1_fu_1025_p2 <= std_logic_vector(unsigned(indvar1_reg_553) + unsigned(ap_const_lv30_1));
    indvar_next2_fu_708_p2 <= std_logic_vector(unsigned(indvar2_phi_fu_499_p4) + unsigned(ap_const_lv6_1));
    indvar_next_fu_660_p2 <= std_logic_vector(unsigned(indvar_phi_fu_487_p4) + unsigned(ap_const_lv6_1));

    -- indvar_phi_fu_487_p4 assign process. --
    indvar_phi_fu_487_p4_assign_proc : process(ap_CS_fsm, indvar_reg_483, ap_reg_ppiten_pp1_it1, exitcond9_reg_1097, indvar_next_reg_1101)
    begin
        if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond9_reg_1097 = ap_const_lv1_0))) then 
            indvar_phi_fu_487_p4 <= indvar_next_reg_1101;
        else 
            indvar_phi_fu_487_p4 <= indvar_reg_483;
        end if; 
    end process;

    isIter0_fu_666_p2 <= "1" when (indvar_phi_fu_487_p4 = ap_const_lv6_0) else "0";
    isIter1_fu_714_p2 <= "1" when (indvar2_phi_fu_499_p4 = ap_const_lv6_0) else "0";
    isIter_fu_1036_p2 <= "1" when (indvar1_reg_553 = ap_const_lv30_0) else "0";

    -- k0ack_out assign process. --
    k0ack_out_assign_proc : process(ap_CS_fsm, distortion_out1ack_in)
    begin
        if (((ap_ST_st71_fsm_18 = ap_CS_fsm) and not((distortion_out1ack_in = ap_const_logic_0)))) then 
            k0ack_out <= ap_const_logic_1;
        else 
            k0ack_out <= ap_const_logic_0;
        end if; 
    end process;


    -- kernel_info_in_addr0ack_out assign process. --
    kernel_info_in_addr0ack_out_assign_proc : process(ap_CS_fsm, distortion_out1ack_in)
    begin
        if (((ap_ST_st71_fsm_18 = ap_CS_fsm) and not((distortion_out1ack_in = ap_const_logic_0)))) then 
            kernel_info_in_addr0ack_out <= ap_const_logic_1;
        else 
            kernel_info_in_addr0ack_out <= ap_const_logic_0;
        end if; 
    end process;


    -- master_portA_address assign process. --
    master_portA_address_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it1, exitcond9_reg_1097, ap_sig_bdd_218, ap_reg_ppiten_pp1_it6, ap_reg_ppiten_pp2_it1, exitcond1_reg_1116, ap_sig_bdd_251, ap_reg_ppiten_pp2_it6, master_portA_addr_reg_1091, isIter0_reg_1106, master_portA_addr_1_reg_1110, isIter1_reg_1125, master_portA_addr_2_reg_1300, ap_reg_ppstg_exitcond_reg_1315_pp5_it1, ap_sig_bdd_565, ap_reg_ppiten_pp5_it2, ap_reg_ppstg_isIter_reg_1329_pp5_it1)
    begin
        if (((ap_ST_pp5_stg0_fsm_16 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1315_pp5_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2) and not((ap_sig_bdd_565 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_1329_pp5_it1)))) then 
            master_portA_address <= master_portA_addr_2_reg_1300;
        elsif (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and (ap_const_lv1_0 = exitcond1_reg_1116) and not((ap_const_lv1_0 = isIter1_reg_1125)))) then 
            master_portA_address <= master_portA_addr_1_reg_1110;
        elsif (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and (exitcond9_reg_1097 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_1106)))) then 
            master_portA_address <= master_portA_addr_reg_1091;
        else 
            master_portA_address <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    master_portA_dataout <= c_buffer_load_reg_1333;

    -- master_portA_req_din assign process. --
    master_portA_req_din_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it1, exitcond9_reg_1097, ap_sig_bdd_218, ap_reg_ppiten_pp1_it6, ap_reg_ppiten_pp2_it1, exitcond1_reg_1116, ap_sig_bdd_251, ap_reg_ppiten_pp2_it6, isIter0_reg_1106, isIter1_reg_1125, ap_reg_ppstg_exitcond_reg_1315_pp5_it1, ap_sig_bdd_565, ap_reg_ppiten_pp5_it2, ap_reg_ppstg_isIter_reg_1329_pp5_it1)
    begin
        if ((((ap_ST_pp5_stg0_fsm_16 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1315_pp5_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2) and not((ap_sig_bdd_565 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_1329_pp5_it1))) or ((ap_ST_pp5_stg0_fsm_16 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1315_pp5_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2) and not((ap_sig_bdd_565 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2)))))) then 
            master_portA_req_din <= ap_const_logic_1;
        elsif ((((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and (exitcond9_reg_1097 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_1106))) or ((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and (ap_const_lv1_0 = exitcond1_reg_1116) and not((ap_const_lv1_0 = isIter1_reg_1125))))) then 
            master_portA_req_din <= ap_const_logic_0;
        else 
            master_portA_req_din <= ap_const_logic_0;
        end if; 
    end process;


    -- master_portA_req_write assign process. --
    master_portA_req_write_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it1, exitcond9_reg_1097, ap_sig_bdd_218, ap_reg_ppiten_pp1_it6, ap_reg_ppiten_pp2_it1, exitcond1_reg_1116, ap_sig_bdd_251, ap_reg_ppiten_pp2_it6, isIter0_reg_1106, isIter1_reg_1125, ap_reg_ppstg_exitcond_reg_1315_pp5_it1, ap_sig_bdd_565, ap_reg_ppiten_pp5_it2, ap_reg_ppstg_isIter_reg_1329_pp5_it1)
    begin
        if ((((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and (exitcond9_reg_1097 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_1106))) or ((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and (ap_const_lv1_0 = exitcond1_reg_1116) and not((ap_const_lv1_0 = isIter1_reg_1125))) or ((ap_ST_pp5_stg0_fsm_16 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1315_pp5_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2) and not((ap_sig_bdd_565 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_1329_pp5_it1))) or ((ap_ST_pp5_stg0_fsm_16 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1315_pp5_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2) and not((ap_sig_bdd_565 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2)))))) then 
            master_portA_req_write <= ap_const_logic_1;
        else 
            master_portA_req_write <= ap_const_logic_0;
        end if; 
    end process;


    -- master_portA_rsp_read assign process. --
    master_portA_rsp_read_assign_proc : process(ap_CS_fsm, ap_reg_ppstg_exitcond9_reg_1097_pp1_it5, ap_sig_bdd_218, ap_reg_ppiten_pp1_it6, ap_reg_ppstg_exitcond1_reg_1116_pp2_it5, ap_sig_bdd_251, ap_reg_ppiten_pp2_it6)
    begin
        if ((((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_reg_ppstg_exitcond9_reg_1097_pp1_it5 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6)))) or ((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1116_pp2_it5) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6)))))) then 
            master_portA_rsp_read <= ap_const_logic_1;
        else 
            master_portA_rsp_read <= ap_const_logic_0;
        end if; 
    end process;


    -- master_portA_size assign process. --
    master_portA_size_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it1, exitcond9_reg_1097, ap_sig_bdd_218, ap_reg_ppiten_pp1_it6, ap_reg_ppiten_pp2_it1, exitcond1_reg_1116, ap_sig_bdd_251, ap_reg_ppiten_pp2_it6, isIter0_reg_1106, isIter1_reg_1125, tmp_25_reg_1310, ap_reg_ppstg_exitcond_reg_1315_pp5_it1, ap_sig_bdd_565, ap_reg_ppiten_pp5_it2, ap_reg_ppstg_isIter_reg_1329_pp5_it1)
    begin
        if (((ap_ST_pp5_stg0_fsm_16 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1315_pp5_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2) and not((ap_sig_bdd_565 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_1329_pp5_it1)))) then 
            master_portA_size <= tmp_25_reg_1310;
        elsif (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_251 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and (ap_const_lv1_0 = exitcond1_reg_1116) and not((ap_const_lv1_0 = isIter1_reg_1125)))) then 
            master_portA_size <= ap_const_lv32_20;
        elsif (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and (exitcond9_reg_1097 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_1106)))) then 
            master_portA_size <= ap_const_lv32_30;
        else 
            master_portA_size <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- n0ack_out assign process. --
    n0ack_out_assign_proc : process(ap_CS_fsm, distortion_out1ack_in)
    begin
        if (((ap_ST_st71_fsm_18 = ap_CS_fsm) and not((distortion_out1ack_in = ap_const_logic_0)))) then 
            n0ack_out <= ap_const_logic_1;
        else 
            n0ack_out <= ap_const_logic_0;
        end if; 
    end process;


    -- p_buffer_address0 assign process. --
    p_buffer_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it7, tmp_26_fu_672_p1, tmp_30_fu_778_p1)
    begin
        if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it7))) then 
            p_buffer_address0 <= tmp_26_fu_672_p1(6 - 1 downto 0);
        elsif ((ap_ST_st23_fsm_8 = ap_CS_fsm)) then 
            p_buffer_address0 <= tmp_30_fu_778_p1(6 - 1 downto 0);
        else 
            p_buffer_address0 <= "XXXXXX";
        end if; 
    end process;


    -- p_buffer_address1 assign process. --
    p_buffer_address1_assign_proc : process(ap_CS_fsm, tmp_29_1_fu_793_p1, tmp_29_2_fu_819_p1)
    begin
        if ((ap_ST_st24_fsm_9 = ap_CS_fsm)) then 
            p_buffer_address1 <= tmp_29_2_fu_819_p1(6 - 1 downto 0);
        elsif ((ap_ST_st23_fsm_8 = ap_CS_fsm)) then 
            p_buffer_address1 <= tmp_29_1_fu_793_p1(6 - 1 downto 0);
        else 
            p_buffer_address1 <= "XXXXXX";
        end if; 
    end process;


    -- p_buffer_ce0 assign process. --
    p_buffer_ce0_assign_proc : process(ap_CS_fsm, ap_sig_bdd_218, ap_reg_ppiten_pp1_it6, ap_reg_ppiten_pp1_it7)
    begin
        if (((ap_ST_st23_fsm_8 = ap_CS_fsm) or ((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it7) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6)))))) then 
            p_buffer_ce0 <= ap_const_logic_1;
        else 
            p_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- p_buffer_ce1 assign process. --
    p_buffer_ce1_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st23_fsm_8 = ap_CS_fsm) or (ap_ST_st24_fsm_9 = ap_CS_fsm))) then 
            p_buffer_ce1 <= ap_const_logic_1;
        else 
            p_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_buffer_d0 <= reg_565;

    -- p_buffer_we0 assign process. --
    p_buffer_we0_assign_proc : process(ap_CS_fsm, ap_sig_bdd_218, ap_reg_ppiten_pp1_it6, ap_reg_ppiten_pp1_it7, ap_reg_ppstg_exitcond9_reg_1097_pp1_it6)
    begin
        if ((((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it7) and not((ap_sig_bdd_218 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond9_reg_1097_pp1_it6)))) then 
            p_buffer_we0 <= ap_const_logic_1;
        else 
            p_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl4_cast_fu_764_p1 <= std_logic_vector(resize(unsigned(p_shl4_fu_756_p3),7));
    p_shl4_fu_756_p3 <= (tmp_36_fu_741_p1 & ap_const_lv2_0);
    p_sum1_cast_fu_692_p1 <= std_logic_vector(resize(unsigned(p_sum1_fu_687_p2),64));
    p_sum1_fu_687_p2 <= std_logic_vector(unsigned(tmp_cast_reg_1083) + unsigned(tmp_11_cast_fu_683_p1));
    p_sum_cast_fu_644_p1 <= std_logic_vector(resize(unsigned(p_sum_fu_639_p2),64));
    p_sum_fu_639_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_1078) + unsigned(tmp_7_cast_fu_635_p1));
    tmp_10_fu_623_p2 <= std_logic_vector(shift_left(unsigned(b_reg_471),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_11_cast_fu_683_p1 <= std_logic_vector(resize(unsigned(tmp_35_fu_677_p2),33));
    tmp_11_fu_894_p2 <= std_logic_vector(unsigned(tmp_17_fu_888_p2) - unsigned(i5_phi_fu_534_p4));
    tmp_12_fu_941_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_tmp_11_reg_1235_pp4_it11),64));
    tmp_13_fu_900_p2 <= "1" when (i5_phi_fu_534_p4 = k0data_reg) else "0";
    tmp_14_fu_965_p4 <= centres_out_addr0data_reg(31 downto 2);
    tmp_15_fu_974_p1 <= std_logic_vector(resize(unsigned(tmp_14_fu_965_p4),64));
    tmp_16_fu_989_p2 <= std_logic_vector(unsigned(tmp_18_fu_984_p2) - unsigned(k0data_reg));
    tmp_17_fu_888_p2 <= std_logic_vector(shift_left(unsigned(i5_phi_fu_534_p4),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_18_fu_984_p2 <= std_logic_vector(shift_left(unsigned(k0data_reg),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_19_fu_751_p1 <= std_logic_vector(resize(unsigned(tmp_37_fu_745_p2),64));
    tmp_1_fu_872_p2 <= "1" when (unsigned(i5_phi_fu_534_p4) > unsigned(k0data_reg)) else "0";
    tmp_20_fu_798_p3 <= (tmp_36_reg_1138 & ap_const_lv1_1);
    tmp_21_fu_805_p1 <= std_logic_vector(resize(unsigned(tmp_20_fu_798_p3),64));
    tmp_22_fu_768_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_764_p1) - unsigned(i1_cast2_fu_737_p1));
    tmp_23_fu_994_p2 <= std_logic_vector(shift_left(unsigned(tmp_16_fu_989_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_24_fu_1000_p2 <= std_logic_vector(unsigned(tmp_23_fu_994_p2) + unsigned(ap_const_lv32_C));
    tmp_25_1_fu_945_p2 <= std_logic_vector(unsigned(ap_reg_ppstg_tmp_11_reg_1235_pp4_it12) + unsigned(ap_const_lv32_1));
    tmp_25_2_fu_955_p2 <= std_logic_vector(unsigned(ap_reg_ppstg_tmp_11_reg_1235_pp4_it12) + unsigned(ap_const_lv32_2));
    tmp_25_fu_1016_p1 <= std_logic_vector(resize(unsigned(tmp_38_add_i32_shr_fu_1006_p4),32));
    tmp_26_1_fu_950_p1 <= std_logic_vector(resize(unsigned(tmp_25_1_fu_945_p2),64));
    tmp_26_2_fu_960_p1 <= std_logic_vector(resize(unsigned(tmp_25_2_fu_955_p2),64));
    tmp_26_fu_672_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar_reg_483_pp1_it6),64));
    tmp_27_fu_824_p1 <= std_logic_vector(resize(unsigned(i_buffer_q0),64));
    tmp_28_1_fu_783_p2 <= std_logic_vector(unsigned(tmp_22_fu_768_p2) + unsigned(ap_const_lv7_1));
    tmp_28_2_fu_810_p2 <= std_logic_vector(unsigned(tmp_22_reg_1148) + unsigned(ap_const_lv7_2));
    tmp_28_fu_1031_p1 <= std_logic_vector(resize(unsigned(indvar1_reg_553),64));
    
    tmp_28_1_fu_783_p2_temp <= signed(tmp_28_1_fu_783_p2);
    tmp_29_1_fu_793_p0 <= std_logic_vector(resize(tmp_28_1_fu_783_p2_temp,32));

    tmp_29_1_fu_793_p1 <= std_logic_vector(resize(unsigned(tmp_29_1_fu_793_p0),64));
    
    tmp_28_2_fu_810_p2_temp <= signed(tmp_28_2_fu_810_p2);
    tmp_29_2_fu_819_p0 <= std_logic_vector(resize(tmp_28_2_fu_810_p2_temp,32));

    tmp_29_2_fu_819_p1 <= std_logic_vector(resize(unsigned(tmp_29_2_fu_819_p0),64));
    tmp_2_fu_583_p1 <= std_logic_vector(resize(unsigned(i_reg_460),64));
    
    tmp_22_fu_768_p2_temp <= signed(tmp_22_fu_768_p2);
    tmp_30_fu_778_p0 <= std_logic_vector(resize(tmp_22_fu_768_p2_temp,32));

    tmp_30_fu_778_p1 <= std_logic_vector(resize(unsigned(tmp_30_fu_778_p0),64));
    tmp_31_fu_833_p2 <= std_logic_vector(unsigned(centre_buffer_count_q0) + unsigned(ap_const_lv32_1));
    tmp_32_fu_840_p2 <= std_logic_vector(unsigned(centre_buffer_sum_sq_q0) + unsigned(i_buffer_q0));
    tmp_33_fu_847_p2 <= std_logic_vector(unsigned(p_buffer_load_reg_1168) + unsigned(centre_buffer_0_wgtCent_value_q0));
    tmp_34_fu_720_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar2_reg_495_pp2_it6),64));
    tmp_35_fu_677_p2 <= std_logic_vector(shift_left(unsigned(b_reg_471),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_36_fu_741_p1 <= i1_reg_507(4 - 1 downto 0);
    tmp_37_fu_745_p2 <= std_logic_vector(shift_left(unsigned(i1_reg_507),to_integer(unsigned('0' & ap_const_lv5_1(5-1 downto 0)))));
    tmp_38_add_i32_shr_fu_1006_p4 <= tmp_24_fu_1000_p2(31 downto 2);
    tmp_3_fu_618_p2 <= "1" when (unsigned(b_reg_471) > unsigned(n0data_reg)) else "0";
    tmp_43_1_fu_853_p2 <= std_logic_vector(unsigned(p_buffer_load_1_reg_1173) + unsigned(centre_buffer_1_wgtCent_value_q0));
    tmp_43_2_fu_859_p2 <= std_logic_vector(unsigned(p_buffer_q1) + unsigned(centre_buffer_2_wgtCent_value_q0));
    tmp_5_cast_fu_601_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_592_p4),33));
    tmp_5_fu_592_p4 <= data_points_in_addr0data_reg(31 downto 2);
    tmp_6_fu_629_p2 <= std_logic_vector(unsigned(tmp_10_fu_623_p2) - unsigned(b_reg_471));
    tmp_7_cast_fu_635_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_629_p2),33));
    tmp_8_fu_883_p1 <= std_logic_vector(resize(unsigned(i5_phi_fu_534_p4),64));
    tmp_9_fu_905_p2 <= "1" when (count_reg_1246 = ap_const_lv32_0) else "0";
    tmp_cast_fu_614_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_605_p4),33));
    tmp_s_fu_605_p4 <= kernel_info_in_addr0data_reg(31 downto 2);
    total_distortion_2_fu_924_p2 <= std_logic_vector(unsigned(centre_buffer_sum_sq_q0) + unsigned(total_distortion_reg_518));

    -- total_distortion_phi_fu_522_p4 assign process. --
    total_distortion_phi_fu_522_p4_assign_proc : process(ap_CS_fsm, total_distortion_reg_518, tmp_1_reg_1213, ap_reg_ppiten_pp4_it1, tmp_13_reg_1242, total_distortion_2_reg_1284)
    begin
        if (((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it1) and (ap_const_lv1_0 = tmp_1_reg_1213) and (ap_const_lv1_0 = tmp_13_reg_1242))) then 
            total_distortion_phi_fu_522_p4 <= total_distortion_2_reg_1284;
        else 
            total_distortion_phi_fu_522_p4 <= total_distortion_reg_518;
        end if; 
    end process;

end behav;
