-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity combiner_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    master_portA_req_din : OUT STD_LOGIC;
    master_portA_req_full_n : IN STD_LOGIC;
    master_portA_req_write : OUT STD_LOGIC;
    master_portA_rsp_empty_n : IN STD_LOGIC;
    master_portA_rsp_read : OUT STD_LOGIC;
    master_portA_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    master_portA_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    master_portA_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    master_portA_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_points_in_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_info_in_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    centres_out_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    distortion_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    k : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of combiner_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "combiner_top,hls_ip_2013_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_pp1_stg0_fsm_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_ST_st14_fsm_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_ST_pp2_stg0_fsm_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_ST_st23_fsm_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st24_fsm_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_ST_st25_fsm_10 : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_ST_st26_fsm_11 : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_ST_pp4_stg0_fsm_12 : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_ST_pp4_stg1_fsm_13 : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_ST_st65_fsm_14 : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_ST_pp5_stg0_fsm_15 : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_ST_st69_fsm_16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_ST_st70_fsm_17 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal data_points_in_addr0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal data_points_in_addr0vld_reg : STD_LOGIC := '0';
    signal data_points_in_addr0ack_out : STD_LOGIC;
    signal kernel_info_in_addr0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_info_in_addr0vld_reg : STD_LOGIC := '0';
    signal kernel_info_in_addr0ack_out : STD_LOGIC;
    signal centres_out_addr0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal centres_out_addr0vld_reg : STD_LOGIC := '0';
    signal centres_out_addr0ack_out : STD_LOGIC;
    signal distortion_out1data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal distortion_out1vld_reg : STD_LOGIC := '0';
    signal distortion_out1vld_in : STD_LOGIC;
    signal distortion_out1ack_in : STD_LOGIC;
    signal n0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal n0vld_reg : STD_LOGIC := '0';
    signal n0ack_out : STD_LOGIC;
    signal k0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal k0vld_reg : STD_LOGIC := '0';
    signal k0ack_out : STD_LOGIC;
    signal indvar_reg_515 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar_reg_515_pp1_it1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it5 : STD_LOGIC := '0';
    signal exitcond8_reg_1142 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond8_reg_1142_pp1_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_217 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it7 : STD_LOGIC := '0';
    signal ap_reg_ppstg_indvar_reg_515_pp1_it2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar_reg_515_pp1_it3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar_reg_515_pp1_it4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar_reg_515_pp1_it5 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar_reg_515_pp1_it6 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar2_reg_527 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar2_reg_527_pp2_it1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppiten_pp2_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it5 : STD_LOGIC := '0';
    signal exitcond1_reg_1166 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_1166_pp2_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_250 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it7 : STD_LOGIC := '0';
    signal ap_reg_ppstg_indvar2_reg_527_pp2_it2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar2_reg_527_pp2_it3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar2_reg_527_pp2_it4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar2_reg_527_pp2_it5 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_indvar2_reg_527_pp2_it6 : STD_LOGIC_VECTOR (5 downto 0);
    signal total_distortion_reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal i5_reg_562 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar1_reg_585 : STD_LOGIC_VECTOR (29 downto 0);
    signal reg_597 : STD_LOGIC_VECTOR (31 downto 0);
    signal centre_buffer_2_wgtCent_value_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond5_reg_1179 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp4_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it18 : STD_LOGIC := '0';
    signal tmp_s_reg_1258 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_613_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lim_fu_628_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lim_reg_1118 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_cast_fu_642_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_5_cast_reg_1123 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_9_cast_fu_655_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_9_cast_reg_1128 : STD_LOGIC_VECTOR (32 downto 0);
    signal master_portA_addr_reg_1136 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond8_reg_1142_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond8_reg_1142_pp1_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond8_reg_1142_pp1_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond8_reg_1142_pp1_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond8_reg_1142_pp1_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_689_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_next_reg_1146 : STD_LOGIC_VECTOR (5 downto 0);
    signal isIter0_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isIter0_reg_1151 : STD_LOGIC_VECTOR (0 downto 0);
    signal b2_1_fu_706_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal b2_1_reg_1155 : STD_LOGIC_VECTOR (31 downto 0);
    signal master_portA_addr_1_reg_1160 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_1166_pp2_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_1166_pp2_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_1166_pp2_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_1166_pp2_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_1166_pp2_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next2_fu_737_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_next2_reg_1170 : STD_LOGIC_VECTOR (5 downto 0);
    signal isIter1_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isIter1_reg_1175 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_760_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_1183 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_35_fu_770_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_35_reg_1188 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_22_fu_797_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_22_reg_1198 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_27_fu_860_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_reg_1238 : STD_LOGIC_VECTOR (63 downto 0);
    signal centre_buffer_count_addr_2_reg_1243 : STD_LOGIC_VECTOR (7 downto 0);
    signal centre_buffer_sum_sq_addr_2_reg_1248 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_1_fu_903_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_1258_pp4_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_1258_pp4_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_1258_pp4_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_1258_pp4_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_1258_pp4_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_1258_pp4_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_1258_pp4_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_1258_pp4_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_1258_pp4_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_1258_pp4_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_1258_pp4_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_1258_pp4_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_1258_pp4_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_1258_pp4_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_1258_pp4_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_1258_pp4_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_1258_pp4_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_s_reg_1258_pp4_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_914_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_1262 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_920_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_1267 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_932_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_1279 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_1279_pp4_it1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_1279_pp4_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_1279_pp4_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_1279_pp4_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_1279_pp4_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_1279_pp4_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_1279_pp4_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_1279_pp4_it8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_1279_pp4_it9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_1279_pp4_it10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_1279_pp4_it11 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_1279_pp4_it12 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_1279_pp4_it13 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_1279_pp4_it14 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_1279_pp4_it15 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_1279_pp4_it16 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_1279_pp4_it17 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_1279_pp4_it18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1291 : STD_LOGIC_VECTOR (0 downto 0);
    signal centre_buffer_count_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_reg_1295 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_distortion_2_fu_943_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_distortion_2_reg_1316 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_fu_954_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_reg_1322 : STD_LOGIC_VECTOR (31 downto 0);
    signal centre_buffer_0_wgtCent_value_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal centre_buffer_1_wgtCent_value_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal master_portA_addr_2_reg_1339 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_add_i32_shr_fu_1046_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_39_add_i32_shr_reg_1344 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_24_fu_1056_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_1349 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_1060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_1354 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp5_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp5_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_1354_pp5_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_616 : BOOLEAN;
    signal ap_reg_ppiten_pp5_it2 : STD_LOGIC := '0';
    signal indvar_next1_fu_1065_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal isIter_fu_1076_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isIter_reg_1368 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_isIter_reg_1368_pp5_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_buffer_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_buffer_load_reg_1372 : STD_LOGIC_VECTOR (31 downto 0);
    signal centre_buffer_0_wgtCent_value_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal centre_buffer_0_wgtCent_value_ce0 : STD_LOGIC;
    signal centre_buffer_0_wgtCent_value_we0 : STD_LOGIC;
    signal centre_buffer_0_wgtCent_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal centre_buffer_1_wgtCent_value_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal centre_buffer_1_wgtCent_value_ce0 : STD_LOGIC;
    signal centre_buffer_1_wgtCent_value_we0 : STD_LOGIC;
    signal centre_buffer_1_wgtCent_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal centre_buffer_2_wgtCent_value_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal centre_buffer_2_wgtCent_value_ce0 : STD_LOGIC;
    signal centre_buffer_2_wgtCent_value_we0 : STD_LOGIC;
    signal centre_buffer_2_wgtCent_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal centre_buffer_sum_sq_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal centre_buffer_sum_sq_ce0 : STD_LOGIC;
    signal centre_buffer_sum_sq_we0 : STD_LOGIC;
    signal centre_buffer_sum_sq_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal centre_buffer_sum_sq_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal centre_buffer_count_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal centre_buffer_count_ce0 : STD_LOGIC;
    signal centre_buffer_count_we0 : STD_LOGIC;
    signal centre_buffer_count_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_buffer_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_buffer_ce0 : STD_LOGIC;
    signal i_buffer_we0 : STD_LOGIC;
    signal i_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_buffer_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_buffer_ce0 : STD_LOGIC;
    signal p_buffer_we0 : STD_LOGIC;
    signal p_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_buffer_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_buffer_ce1 : STD_LOGIC;
    signal p_buffer_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_buffer_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_buffer_ce0 : STD_LOGIC;
    signal c_buffer_we0 : STD_LOGIC;
    signal c_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_buffer_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_buffer_ce1 : STD_LOGIC;
    signal c_buffer_we1 : STD_LOGIC;
    signal c_buffer_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_480 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond7_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal b2_reg_503 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_phi_fu_519_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar2_phi_fu_531_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal i1_reg_539 : STD_LOGIC_VECTOR (4 downto 0);
    signal total_distortion_phi_fu_554_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i5_phi_fu_566_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_distortion_1_reg_573 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_749_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_780_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_1_fu_822_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_2_fu_855_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_981_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_1_fu_990_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_2_fu_1000_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_1071_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_cast_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_cast_fu_721_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_cast_fu_1014_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_882_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_889_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_868_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_1_fu_875_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_2_fu_896_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_961_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_975_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_968_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_633_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_9_fu_646_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_6_cast_fu_664_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_7_fu_668_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_10_cast_fu_712_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_11_fu_716_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_36_fu_774_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_fu_785_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_793_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal i1_cast2_fu_766_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_30_fu_807_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_797_p2_temp: signed (7-1 downto 0);
    signal tmp_29_1_fu_812_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_30_1_fu_822_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_1_fu_812_p2_temp: signed (7-1 downto 0);
    signal tmp_20_fu_834_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_29_2_fu_846_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_30_2_fu_855_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_2_fu_846_p2_temp: signed (7-1 downto 0);
    signal tmp_17_fu_926_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_949_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_961_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_961_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_968_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_968_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_975_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_975_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_1_fu_985_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_2_fu_995_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_1005_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_18_fu_1024_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_1029_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_1034_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_1040_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_961_ce : STD_LOGIC;
    signal grp_fu_968_ce : STD_LOGIC;
    signal grp_fu_975_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_bdd_1236 : BOOLEAN;
    signal ap_sig_bdd_1239 : BOOLEAN;

    component combiner_top_sdiv_32ns_32ns_32_35 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component combiner_top_centre_buffer_0_wgtCent_value IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component combiner_top_i_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component combiner_top_p_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component combiner_top_c_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    centre_buffer_0_wgtCent_value_U : component combiner_top_centre_buffer_0_wgtCent_value
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => centre_buffer_0_wgtCent_value_address0,
        ce0 => centre_buffer_0_wgtCent_value_ce0,
        we0 => centre_buffer_0_wgtCent_value_we0,
        d0 => centre_buffer_0_wgtCent_value_d0,
        q0 => centre_buffer_0_wgtCent_value_q0);

    centre_buffer_1_wgtCent_value_U : component combiner_top_centre_buffer_0_wgtCent_value
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => centre_buffer_1_wgtCent_value_address0,
        ce0 => centre_buffer_1_wgtCent_value_ce0,
        we0 => centre_buffer_1_wgtCent_value_we0,
        d0 => centre_buffer_1_wgtCent_value_d0,
        q0 => centre_buffer_1_wgtCent_value_q0);

    centre_buffer_2_wgtCent_value_U : component combiner_top_centre_buffer_0_wgtCent_value
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => centre_buffer_2_wgtCent_value_address0,
        ce0 => centre_buffer_2_wgtCent_value_ce0,
        we0 => centre_buffer_2_wgtCent_value_we0,
        d0 => centre_buffer_2_wgtCent_value_d0,
        q0 => centre_buffer_2_wgtCent_value_q0);

    centre_buffer_sum_sq_U : component combiner_top_centre_buffer_0_wgtCent_value
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => centre_buffer_sum_sq_address0,
        ce0 => centre_buffer_sum_sq_ce0,
        we0 => centre_buffer_sum_sq_we0,
        d0 => centre_buffer_sum_sq_d0,
        q0 => centre_buffer_sum_sq_q0);

    centre_buffer_count_U : component combiner_top_centre_buffer_0_wgtCent_value
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => centre_buffer_count_address0,
        ce0 => centre_buffer_count_ce0,
        we0 => centre_buffer_count_we0,
        d0 => centre_buffer_count_d0,
        q0 => centre_buffer_count_q0);

    i_buffer_U : component combiner_top_i_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => i_buffer_address0,
        ce0 => i_buffer_ce0,
        we0 => i_buffer_we0,
        d0 => i_buffer_d0,
        q0 => i_buffer_q0);

    p_buffer_U : component combiner_top_p_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_buffer_address0,
        ce0 => p_buffer_ce0,
        we0 => p_buffer_we0,
        d0 => p_buffer_d0,
        q0 => p_buffer_q0,
        address1 => p_buffer_address1,
        ce1 => p_buffer_ce1,
        q1 => p_buffer_q1);

    c_buffer_U : component combiner_top_c_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_buffer_address0,
        ce0 => c_buffer_ce0,
        we0 => c_buffer_we0,
        d0 => c_buffer_d0,
        address1 => c_buffer_address1,
        ce1 => c_buffer_ce1,
        we1 => c_buffer_we1,
        d1 => c_buffer_d1,
        q1 => c_buffer_q1);

    combiner_top_sdiv_32ns_32ns_32_35_U1 : component combiner_top_sdiv_32ns_32ns_32_35
    generic map (
        ID => 1,
        NUM_STAGE => 35,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_961_p0,
        din1 => grp_fu_961_p1,
        ce => grp_fu_961_ce,
        dout => grp_fu_961_p2);

    combiner_top_sdiv_32ns_32ns_32_35_U2 : component combiner_top_sdiv_32ns_32ns_32_35
    generic map (
        ID => 2,
        NUM_STAGE => 35,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_968_p0,
        din1 => grp_fu_968_p1,
        ce => grp_fu_968_ce,
        dout => grp_fu_968_p2);

    combiner_top_sdiv_32ns_32ns_32_35_U3 : component combiner_top_sdiv_32ns_32ns_32_35
    generic map (
        ID => 3,
        NUM_STAGE => 35,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_975_p0,
        din1 => grp_fu_975_p1,
        ce => grp_fu_975_ce,
        dout => grp_fu_975_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and not((ap_const_lv1_0 = exitcond8_fu_683_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_3_fu_659_p2))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and (ap_const_lv1_0 = exitcond8_fu_683_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_3_fu_659_p2)) or ((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and not((ap_const_lv1_0 = exitcond8_fu_683_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it3 assign process. --
    ap_reg_ppiten_pp1_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it3 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then 
                    ap_reg_ppiten_pp1_it3 <= ap_reg_ppiten_pp1_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it4 assign process. --
    ap_reg_ppiten_pp1_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it4 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then 
                    ap_reg_ppiten_pp1_it4 <= ap_reg_ppiten_pp1_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it5 assign process. --
    ap_reg_ppiten_pp1_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it5 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then 
                    ap_reg_ppiten_pp1_it5 <= ap_reg_ppiten_pp1_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it6 assign process. --
    ap_reg_ppiten_pp1_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it6 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then 
                    ap_reg_ppiten_pp1_it6 <= ap_reg_ppiten_pp1_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it7 assign process. --
    ap_reg_ppiten_pp1_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it7 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then 
                    ap_reg_ppiten_pp1_it7 <= ap_reg_ppiten_pp1_it6;
                elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_3_fu_659_p2))) then 
                    ap_reg_ppiten_pp1_it7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it0 assign process. --
    ap_reg_ppiten_pp2_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_lv1_0 = exitcond1_fu_731_p2)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
                elsif ((ap_ST_st14_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it1 assign process. --
    ap_reg_ppiten_pp2_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and (ap_const_lv1_0 = exitcond1_fu_731_p2))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
                elsif (((ap_ST_st14_fsm_6 = ap_CS_fsm) or ((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_lv1_0 = exitcond1_fu_731_p2))))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it2 assign process. --
    ap_reg_ppiten_pp2_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then 
                    ap_reg_ppiten_pp2_it2 <= ap_reg_ppiten_pp2_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it3 assign process. --
    ap_reg_ppiten_pp2_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it3 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then 
                    ap_reg_ppiten_pp2_it3 <= ap_reg_ppiten_pp2_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it4 assign process. --
    ap_reg_ppiten_pp2_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it4 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then 
                    ap_reg_ppiten_pp2_it4 <= ap_reg_ppiten_pp2_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it5 assign process. --
    ap_reg_ppiten_pp2_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it5 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then 
                    ap_reg_ppiten_pp2_it5 <= ap_reg_ppiten_pp2_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it6 assign process. --
    ap_reg_ppiten_pp2_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it6 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then 
                    ap_reg_ppiten_pp2_it6 <= ap_reg_ppiten_pp2_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it7 assign process. --
    ap_reg_ppiten_pp2_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it7 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then 
                    ap_reg_ppiten_pp2_it7 <= ap_reg_ppiten_pp2_it6;
                elsif ((ap_ST_st14_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp2_it7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it0 assign process. --
    ap_reg_ppiten_pp4_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm) and (not((ap_const_lv1_0 = tmp_s_reg_1258)) or ((ap_const_lv1_0 = tmp_s_reg_1258) and not((ap_const_lv1_0 = tmp_13_reg_1291)))))) then 
                    ap_reg_ppiten_pp4_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_3_fu_659_p2)))) then 
                    ap_reg_ppiten_pp4_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it1 assign process. --
    ap_reg_ppiten_pp4_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it1 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it1 <= ap_reg_ppiten_pp4_it0;
                elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_3_fu_659_p2)))) then 
                    ap_reg_ppiten_pp4_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it10 assign process. --
    ap_reg_ppiten_pp4_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it10 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it10 <= ap_reg_ppiten_pp4_it9;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it11 assign process. --
    ap_reg_ppiten_pp4_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it11 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it11 <= ap_reg_ppiten_pp4_it10;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it12 assign process. --
    ap_reg_ppiten_pp4_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it12 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it12 <= ap_reg_ppiten_pp4_it11;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it13 assign process. --
    ap_reg_ppiten_pp4_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it13 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it13 <= ap_reg_ppiten_pp4_it12;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it14 assign process. --
    ap_reg_ppiten_pp4_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it14 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it14 <= ap_reg_ppiten_pp4_it13;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it15 assign process. --
    ap_reg_ppiten_pp4_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it15 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it15 <= ap_reg_ppiten_pp4_it14;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it16 assign process. --
    ap_reg_ppiten_pp4_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it16 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it16 <= ap_reg_ppiten_pp4_it15;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it17 assign process. --
    ap_reg_ppiten_pp4_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it17 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it17 <= ap_reg_ppiten_pp4_it16;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it18 assign process. --
    ap_reg_ppiten_pp4_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it18 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it18 <= ap_reg_ppiten_pp4_it17;
                elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_3_fu_659_p2)))) then 
                    ap_reg_ppiten_pp4_it18 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it2 assign process. --
    ap_reg_ppiten_pp4_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it2 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it2 <= ap_reg_ppiten_pp4_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it3 assign process. --
    ap_reg_ppiten_pp4_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it3 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it3 <= ap_reg_ppiten_pp4_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it4 assign process. --
    ap_reg_ppiten_pp4_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it4 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it4 <= ap_reg_ppiten_pp4_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it5 assign process. --
    ap_reg_ppiten_pp4_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it5 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it5 <= ap_reg_ppiten_pp4_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it6 assign process. --
    ap_reg_ppiten_pp4_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it6 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it6 <= ap_reg_ppiten_pp4_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it7 assign process. --
    ap_reg_ppiten_pp4_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it7 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it7 <= ap_reg_ppiten_pp4_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it8 assign process. --
    ap_reg_ppiten_pp4_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it8 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it8 <= ap_reg_ppiten_pp4_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it9 assign process. --
    ap_reg_ppiten_pp4_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it9 <= ap_const_logic_0;
            else
                if ((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp4_it9 <= ap_reg_ppiten_pp4_it8;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp5_it0 assign process. --
    ap_reg_ppiten_pp5_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp5_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp5_stg0_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_616 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_lv1_0 = exitcond_fu_1060_p2)))) then 
                    ap_reg_ppiten_pp5_it0 <= ap_const_logic_0;
                elsif ((ap_ST_st65_fsm_14 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp5_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp5_it1 assign process. --
    ap_reg_ppiten_pp5_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp5_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp5_stg0_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_616 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and (ap_const_lv1_0 = exitcond_fu_1060_p2))) then 
                    ap_reg_ppiten_pp5_it1 <= ap_const_logic_1;
                elsif (((ap_ST_st65_fsm_14 = ap_CS_fsm) or ((ap_ST_pp5_stg0_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_616 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_lv1_0 = exitcond_fu_1060_p2))))) then 
                    ap_reg_ppiten_pp5_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp5_it2 assign process. --
    ap_reg_ppiten_pp5_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp5_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp5_stg0_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_616 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))))) then 
                    ap_reg_ppiten_pp5_it2 <= ap_reg_ppiten_pp5_it1;
                elsif ((ap_ST_st65_fsm_14 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp5_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- centres_out_addr0data_reg assign process. --
    centres_out_addr0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                centres_out_addr0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = centres_out_addr0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = centres_out_addr0vld_reg) and (ap_const_logic_1 = centres_out_addr0ack_out)))) then 
                    centres_out_addr0data_reg <= centres_out_addr;
                end if; 
            end if;
        end if;
    end process;


    -- centres_out_addr0vld_reg assign process. --
    centres_out_addr0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- data_points_in_addr0data_reg assign process. --
    data_points_in_addr0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                data_points_in_addr0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = data_points_in_addr0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = data_points_in_addr0vld_reg) and (ap_const_logic_1 = data_points_in_addr0ack_out)))) then 
                    data_points_in_addr0data_reg <= data_points_in_addr;
                end if; 
            end if;
        end if;
    end process;


    -- data_points_in_addr0vld_reg assign process. --
    data_points_in_addr0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- distortion_out1data_reg assign process. --
    distortion_out1data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                distortion_out1data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = distortion_out1vld_in) and (ap_const_logic_0 = distortion_out1vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = distortion_out1vld_in) and (ap_const_logic_1 = distortion_out1vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
                    distortion_out1data_reg <= total_distortion_1_reg_573;
                end if; 
            end if;
        end if;
    end process;


    -- distortion_out1vld_reg assign process. --
    distortion_out1vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- k0data_reg assign process. --
    k0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                k0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = k0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = k0vld_reg) and (ap_const_logic_1 = k0ack_out)))) then 
                    k0data_reg <= k;
                end if; 
            end if;
        end if;
    end process;


    -- k0vld_reg assign process. --
    k0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- kernel_info_in_addr0data_reg assign process. --
    kernel_info_in_addr0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                kernel_info_in_addr0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = kernel_info_in_addr0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = kernel_info_in_addr0vld_reg) and (ap_const_logic_1 = kernel_info_in_addr0ack_out)))) then 
                    kernel_info_in_addr0data_reg <= kernel_info_in_addr;
                end if; 
            end if;
        end if;
    end process;


    -- kernel_info_in_addr0vld_reg assign process. --
    kernel_info_in_addr0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- n0data_reg assign process. --
    n0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                n0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = n0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = n0vld_reg) and (ap_const_logic_1 = n0ack_out)))) then 
                    n0data_reg <= n;
                end if; 
            end if;
        end if;
    end process;


    -- n0vld_reg assign process. --
    n0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- b2_reg_503 assign process. --
    b2_reg_503_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st26_fsm_11 = ap_CS_fsm)) then 
                b2_reg_503 <= b2_1_reg_1155;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                b2_reg_503 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- b_reg_491 assign process. --
    b_reg_491_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st26_fsm_11 = ap_CS_fsm)) then 
                b_reg_491 <= b_1_fu_903_p2;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                b_reg_491 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- i1_reg_539 assign process. --
    i1_reg_539_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_lv1_0 = exitcond1_fu_731_p2)))) then 
                i1_reg_539 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_0 = exitcond5_reg_1179) and (ap_ST_st25_fsm_10 = ap_CS_fsm))) then 
                i1_reg_539 <= i_3_reg_1183;
            end if; 
        end if;
    end process;

    -- i5_reg_562 assign process. --
    i5_reg_562_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_3_fu_659_p2)))) then 
                i5_reg_562 <= ap_const_lv32_0;
            elsif (((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it1) and (ap_const_lv1_0 = tmp_s_reg_1258) and (ap_const_lv1_0 = tmp_13_reg_1291))) then 
                i5_reg_562 <= i_2_reg_1262;
            end if; 
        end if;
    end process;

    -- i_reg_480 assign process. --
    i_reg_480_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond7_fu_607_p2))) then 
                i_reg_480 <= i_1_fu_613_p2;
            elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
                i_reg_480 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- indvar1_reg_585 assign process. --
    indvar1_reg_585_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st65_fsm_14 = ap_CS_fsm)) then 
                indvar1_reg_585 <= ap_const_lv30_0;
            elsif (((ap_ST_pp5_stg0_fsm_15 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not((ap_sig_bdd_616 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and (ap_const_lv1_0 = exitcond_fu_1060_p2))) then 
                indvar1_reg_585 <= indvar_next1_fu_1065_p2;
            end if; 
        end if;
    end process;

    -- indvar2_reg_527 assign process. --
    indvar2_reg_527_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st14_fsm_6 = ap_CS_fsm)) then 
                indvar2_reg_527 <= ap_const_lv6_0;
            elsif (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and (ap_const_lv1_0 = exitcond1_reg_1166))) then 
                indvar2_reg_527 <= indvar_next2_reg_1170;
            end if; 
        end if;
    end process;

    -- indvar_reg_515 assign process. --
    indvar_reg_515_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_3_fu_659_p2))) then 
                indvar_reg_515 <= ap_const_lv6_0;
            elsif (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and (exitcond8_reg_1142 = ap_const_lv1_0))) then 
                indvar_reg_515 <= indvar_next_reg_1146;
            end if; 
        end if;
    end process;

    -- total_distortion_1_reg_573 assign process. --
    total_distortion_1_reg_573_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_reg_ppiten_pp4_it0)) then
                if (ap_sig_bdd_1239) then 
                    total_distortion_1_reg_573 <= total_distortion_2_fu_943_p2;
                elsif (ap_sig_bdd_1236) then 
                    total_distortion_1_reg_573 <= total_distortion_phi_fu_554_p4;
                end if;
            end if; 
        end if;
    end process;

    -- total_distortion_reg_550 assign process. --
    total_distortion_reg_550_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_3_fu_659_p2)))) then 
                total_distortion_reg_550 <= ap_const_lv32_0;
            elsif (((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it1) and (ap_const_lv1_0 = tmp_s_reg_1258) and (ap_const_lv1_0 = tmp_13_reg_1291))) then 
                total_distortion_reg_550 <= total_distortion_2_reg_1316;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then
                ap_reg_ppstg_exitcond1_reg_1166_pp2_it1 <= exitcond1_reg_1166;
                ap_reg_ppstg_exitcond1_reg_1166_pp2_it2 <= ap_reg_ppstg_exitcond1_reg_1166_pp2_it1;
                ap_reg_ppstg_exitcond1_reg_1166_pp2_it3 <= ap_reg_ppstg_exitcond1_reg_1166_pp2_it2;
                ap_reg_ppstg_exitcond1_reg_1166_pp2_it4 <= ap_reg_ppstg_exitcond1_reg_1166_pp2_it3;
                ap_reg_ppstg_exitcond1_reg_1166_pp2_it5 <= ap_reg_ppstg_exitcond1_reg_1166_pp2_it4;
                ap_reg_ppstg_exitcond1_reg_1166_pp2_it6 <= ap_reg_ppstg_exitcond1_reg_1166_pp2_it5;
                ap_reg_ppstg_indvar2_reg_527_pp2_it1 <= indvar2_reg_527;
                ap_reg_ppstg_indvar2_reg_527_pp2_it2 <= ap_reg_ppstg_indvar2_reg_527_pp2_it1;
                ap_reg_ppstg_indvar2_reg_527_pp2_it3 <= ap_reg_ppstg_indvar2_reg_527_pp2_it2;
                ap_reg_ppstg_indvar2_reg_527_pp2_it4 <= ap_reg_ppstg_indvar2_reg_527_pp2_it3;
                ap_reg_ppstg_indvar2_reg_527_pp2_it5 <= ap_reg_ppstg_indvar2_reg_527_pp2_it4;
                ap_reg_ppstg_indvar2_reg_527_pp2_it6 <= ap_reg_ppstg_indvar2_reg_527_pp2_it5;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then
                ap_reg_ppstg_exitcond8_reg_1142_pp1_it1 <= exitcond8_reg_1142;
                ap_reg_ppstg_exitcond8_reg_1142_pp1_it2 <= ap_reg_ppstg_exitcond8_reg_1142_pp1_it1;
                ap_reg_ppstg_exitcond8_reg_1142_pp1_it3 <= ap_reg_ppstg_exitcond8_reg_1142_pp1_it2;
                ap_reg_ppstg_exitcond8_reg_1142_pp1_it4 <= ap_reg_ppstg_exitcond8_reg_1142_pp1_it3;
                ap_reg_ppstg_exitcond8_reg_1142_pp1_it5 <= ap_reg_ppstg_exitcond8_reg_1142_pp1_it4;
                ap_reg_ppstg_exitcond8_reg_1142_pp1_it6 <= ap_reg_ppstg_exitcond8_reg_1142_pp1_it5;
                ap_reg_ppstg_indvar_reg_515_pp1_it1 <= indvar_reg_515;
                ap_reg_ppstg_indvar_reg_515_pp1_it2 <= ap_reg_ppstg_indvar_reg_515_pp1_it1;
                ap_reg_ppstg_indvar_reg_515_pp1_it3 <= ap_reg_ppstg_indvar_reg_515_pp1_it2;
                ap_reg_ppstg_indvar_reg_515_pp1_it4 <= ap_reg_ppstg_indvar_reg_515_pp1_it3;
                ap_reg_ppstg_indvar_reg_515_pp1_it5 <= ap_reg_ppstg_indvar_reg_515_pp1_it4;
                ap_reg_ppstg_indvar_reg_515_pp1_it6 <= ap_reg_ppstg_indvar_reg_515_pp1_it5;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp5_stg0_fsm_15 = ap_CS_fsm) and not((ap_sig_bdd_616 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))))) then
                ap_reg_ppstg_exitcond_reg_1354_pp5_it1 <= exitcond_reg_1354;
                ap_reg_ppstg_isIter_reg_1368_pp5_it1 <= isIter_reg_1368;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm)) then
                ap_reg_ppstg_tmp_10_reg_1279_pp4_it1 <= tmp_10_reg_1279;
                ap_reg_ppstg_tmp_10_reg_1279_pp4_it10 <= ap_reg_ppstg_tmp_10_reg_1279_pp4_it9;
                ap_reg_ppstg_tmp_10_reg_1279_pp4_it11 <= ap_reg_ppstg_tmp_10_reg_1279_pp4_it10;
                ap_reg_ppstg_tmp_10_reg_1279_pp4_it12 <= ap_reg_ppstg_tmp_10_reg_1279_pp4_it11;
                ap_reg_ppstg_tmp_10_reg_1279_pp4_it13 <= ap_reg_ppstg_tmp_10_reg_1279_pp4_it12;
                ap_reg_ppstg_tmp_10_reg_1279_pp4_it14 <= ap_reg_ppstg_tmp_10_reg_1279_pp4_it13;
                ap_reg_ppstg_tmp_10_reg_1279_pp4_it15 <= ap_reg_ppstg_tmp_10_reg_1279_pp4_it14;
                ap_reg_ppstg_tmp_10_reg_1279_pp4_it16 <= ap_reg_ppstg_tmp_10_reg_1279_pp4_it15;
                ap_reg_ppstg_tmp_10_reg_1279_pp4_it17 <= ap_reg_ppstg_tmp_10_reg_1279_pp4_it16;
                ap_reg_ppstg_tmp_10_reg_1279_pp4_it18 <= ap_reg_ppstg_tmp_10_reg_1279_pp4_it17;
                ap_reg_ppstg_tmp_10_reg_1279_pp4_it2 <= ap_reg_ppstg_tmp_10_reg_1279_pp4_it1;
                ap_reg_ppstg_tmp_10_reg_1279_pp4_it3 <= ap_reg_ppstg_tmp_10_reg_1279_pp4_it2;
                ap_reg_ppstg_tmp_10_reg_1279_pp4_it4 <= ap_reg_ppstg_tmp_10_reg_1279_pp4_it3;
                ap_reg_ppstg_tmp_10_reg_1279_pp4_it5 <= ap_reg_ppstg_tmp_10_reg_1279_pp4_it4;
                ap_reg_ppstg_tmp_10_reg_1279_pp4_it6 <= ap_reg_ppstg_tmp_10_reg_1279_pp4_it5;
                ap_reg_ppstg_tmp_10_reg_1279_pp4_it7 <= ap_reg_ppstg_tmp_10_reg_1279_pp4_it6;
                ap_reg_ppstg_tmp_10_reg_1279_pp4_it8 <= ap_reg_ppstg_tmp_10_reg_1279_pp4_it7;
                ap_reg_ppstg_tmp_10_reg_1279_pp4_it9 <= ap_reg_ppstg_tmp_10_reg_1279_pp4_it8;
                ap_reg_ppstg_tmp_s_reg_1258_pp4_it1 <= tmp_s_reg_1258;
                ap_reg_ppstg_tmp_s_reg_1258_pp4_it10 <= ap_reg_ppstg_tmp_s_reg_1258_pp4_it9;
                ap_reg_ppstg_tmp_s_reg_1258_pp4_it11 <= ap_reg_ppstg_tmp_s_reg_1258_pp4_it10;
                ap_reg_ppstg_tmp_s_reg_1258_pp4_it12 <= ap_reg_ppstg_tmp_s_reg_1258_pp4_it11;
                ap_reg_ppstg_tmp_s_reg_1258_pp4_it13 <= ap_reg_ppstg_tmp_s_reg_1258_pp4_it12;
                ap_reg_ppstg_tmp_s_reg_1258_pp4_it14 <= ap_reg_ppstg_tmp_s_reg_1258_pp4_it13;
                ap_reg_ppstg_tmp_s_reg_1258_pp4_it15 <= ap_reg_ppstg_tmp_s_reg_1258_pp4_it14;
                ap_reg_ppstg_tmp_s_reg_1258_pp4_it16 <= ap_reg_ppstg_tmp_s_reg_1258_pp4_it15;
                ap_reg_ppstg_tmp_s_reg_1258_pp4_it17 <= ap_reg_ppstg_tmp_s_reg_1258_pp4_it16;
                ap_reg_ppstg_tmp_s_reg_1258_pp4_it18 <= ap_reg_ppstg_tmp_s_reg_1258_pp4_it17;
                ap_reg_ppstg_tmp_s_reg_1258_pp4_it2 <= ap_reg_ppstg_tmp_s_reg_1258_pp4_it1;
                ap_reg_ppstg_tmp_s_reg_1258_pp4_it3 <= ap_reg_ppstg_tmp_s_reg_1258_pp4_it2;
                ap_reg_ppstg_tmp_s_reg_1258_pp4_it4 <= ap_reg_ppstg_tmp_s_reg_1258_pp4_it3;
                ap_reg_ppstg_tmp_s_reg_1258_pp4_it5 <= ap_reg_ppstg_tmp_s_reg_1258_pp4_it4;
                ap_reg_ppstg_tmp_s_reg_1258_pp4_it6 <= ap_reg_ppstg_tmp_s_reg_1258_pp4_it5;
                ap_reg_ppstg_tmp_s_reg_1258_pp4_it7 <= ap_reg_ppstg_tmp_s_reg_1258_pp4_it6;
                ap_reg_ppstg_tmp_s_reg_1258_pp4_it8 <= ap_reg_ppstg_tmp_s_reg_1258_pp4_it7;
                ap_reg_ppstg_tmp_s_reg_1258_pp4_it9 <= ap_reg_ppstg_tmp_s_reg_1258_pp4_it8;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st14_fsm_6 = ap_CS_fsm)) then
                b2_1_reg_1155 <= b2_1_fu_706_p2;
                master_portA_addr_1_reg_1160 <= tmp_11_cast_fu_721_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp5_stg0_fsm_15 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1) and not((ap_sig_bdd_616 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and (ap_const_lv1_0 = exitcond_reg_1354))) then
                c_buffer_load_reg_1372 <= c_buffer_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st24_fsm_9 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond5_reg_1179))) then
                centre_buffer_count_addr_2_reg_1243 <= tmp_27_fu_860_p1(8 - 1 downto 0);
                centre_buffer_sum_sq_addr_2_reg_1248 <= tmp_27_fu_860_p1(8 - 1 downto 0);
                tmp_27_reg_1238(0) <= tmp_27_fu_860_p1(0);
    tmp_27_reg_1238(1) <= tmp_27_fu_860_p1(1);
    tmp_27_reg_1238(2) <= tmp_27_fu_860_p1(2);
    tmp_27_reg_1238(3) <= tmp_27_fu_860_p1(3);
    tmp_27_reg_1238(4) <= tmp_27_fu_860_p1(4);
    tmp_27_reg_1238(5) <= tmp_27_fu_860_p1(5);
    tmp_27_reg_1238(6) <= tmp_27_fu_860_p1(6);
    tmp_27_reg_1238(7) <= tmp_27_fu_860_p1(7);
    tmp_27_reg_1238(8) <= tmp_27_fu_860_p1(8);
    tmp_27_reg_1238(9) <= tmp_27_fu_860_p1(9);
    tmp_27_reg_1238(10) <= tmp_27_fu_860_p1(10);
    tmp_27_reg_1238(11) <= tmp_27_fu_860_p1(11);
    tmp_27_reg_1238(12) <= tmp_27_fu_860_p1(12);
    tmp_27_reg_1238(13) <= tmp_27_fu_860_p1(13);
    tmp_27_reg_1238(14) <= tmp_27_fu_860_p1(14);
    tmp_27_reg_1238(15) <= tmp_27_fu_860_p1(15);
    tmp_27_reg_1238(16) <= tmp_27_fu_860_p1(16);
    tmp_27_reg_1238(17) <= tmp_27_fu_860_p1(17);
    tmp_27_reg_1238(18) <= tmp_27_fu_860_p1(18);
    tmp_27_reg_1238(19) <= tmp_27_fu_860_p1(19);
    tmp_27_reg_1238(20) <= tmp_27_fu_860_p1(20);
    tmp_27_reg_1238(21) <= tmp_27_fu_860_p1(21);
    tmp_27_reg_1238(22) <= tmp_27_fu_860_p1(22);
    tmp_27_reg_1238(23) <= tmp_27_fu_860_p1(23);
    tmp_27_reg_1238(24) <= tmp_27_fu_860_p1(24);
    tmp_27_reg_1238(25) <= tmp_27_fu_860_p1(25);
    tmp_27_reg_1238(26) <= tmp_27_fu_860_p1(26);
    tmp_27_reg_1238(27) <= tmp_27_fu_860_p1(27);
    tmp_27_reg_1238(28) <= tmp_27_fu_860_p1(28);
    tmp_27_reg_1238(29) <= tmp_27_fu_860_p1(29);
    tmp_27_reg_1238(30) <= tmp_27_fu_860_p1(30);
    tmp_27_reg_1238(31) <= tmp_27_fu_860_p1(31);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_lv1_0 = tmp_s_reg_1258) and (ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm))) then
                count_reg_1295 <= centre_buffer_count_q0;
                total_distortion_2_reg_1316 <= total_distortion_2_fu_943_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then
                exitcond1_reg_1166 <= exitcond1_fu_731_p2;
                indvar_next2_reg_1170 <= indvar_next2_fu_737_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st23_fsm_8 = ap_CS_fsm)) then
                exitcond5_reg_1179 <= exitcond5_fu_754_p2;
                i_3_reg_1183 <= i_3_fu_760_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then
                exitcond8_reg_1142 <= exitcond8_fu_683_p2;
                indvar_next_reg_1146 <= indvar_next_fu_689_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp5_stg0_fsm_15 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not((ap_sig_bdd_616 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))))) then
                exitcond_reg_1354 <= exitcond_fu_1060_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it0))) then
                i_2_reg_1262 <= i_2_fu_914_p2;
                tmp_s_reg_1258 <= tmp_s_fu_909_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and (ap_const_lv1_0 = exitcond8_fu_683_p2))) then
                isIter0_reg_1151 <= isIter0_fu_695_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and (ap_const_lv1_0 = exitcond1_fu_731_p2))) then
                isIter1_reg_1175 <= isIter1_fu_743_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp5_stg0_fsm_15 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not((ap_sig_bdd_616 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and (ap_const_lv1_0 = exitcond_fu_1060_p2))) then
                isIter_reg_1368 <= isIter_fu_1076_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then
                lim_reg_1118(1) <= lim_fu_628_p2(1);
    lim_reg_1118(2) <= lim_fu_628_p2(2);
    lim_reg_1118(3) <= lim_fu_628_p2(3);
    lim_reg_1118(4) <= lim_fu_628_p2(4);
    lim_reg_1118(5) <= lim_fu_628_p2(5);
    lim_reg_1118(6) <= lim_fu_628_p2(6);
    lim_reg_1118(7) <= lim_fu_628_p2(7);
    lim_reg_1118(8) <= lim_fu_628_p2(8);
    lim_reg_1118(9) <= lim_fu_628_p2(9);
    lim_reg_1118(10) <= lim_fu_628_p2(10);
    lim_reg_1118(11) <= lim_fu_628_p2(11);
    lim_reg_1118(12) <= lim_fu_628_p2(12);
    lim_reg_1118(13) <= lim_fu_628_p2(13);
    lim_reg_1118(14) <= lim_fu_628_p2(14);
    lim_reg_1118(15) <= lim_fu_628_p2(15);
    lim_reg_1118(16) <= lim_fu_628_p2(16);
    lim_reg_1118(17) <= lim_fu_628_p2(17);
    lim_reg_1118(18) <= lim_fu_628_p2(18);
    lim_reg_1118(19) <= lim_fu_628_p2(19);
    lim_reg_1118(20) <= lim_fu_628_p2(20);
    lim_reg_1118(21) <= lim_fu_628_p2(21);
    lim_reg_1118(22) <= lim_fu_628_p2(22);
    lim_reg_1118(23) <= lim_fu_628_p2(23);
    lim_reg_1118(24) <= lim_fu_628_p2(24);
    lim_reg_1118(25) <= lim_fu_628_p2(25);
    lim_reg_1118(26) <= lim_fu_628_p2(26);
    lim_reg_1118(27) <= lim_fu_628_p2(27);
    lim_reg_1118(28) <= lim_fu_628_p2(28);
    lim_reg_1118(29) <= lim_fu_628_p2(29);
    lim_reg_1118(30) <= lim_fu_628_p2(30);
    lim_reg_1118(31) <= lim_fu_628_p2(31);
                tmp_5_cast_reg_1123(0) <= tmp_5_cast_fu_642_p1(0);
    tmp_5_cast_reg_1123(1) <= tmp_5_cast_fu_642_p1(1);
    tmp_5_cast_reg_1123(2) <= tmp_5_cast_fu_642_p1(2);
    tmp_5_cast_reg_1123(3) <= tmp_5_cast_fu_642_p1(3);
    tmp_5_cast_reg_1123(4) <= tmp_5_cast_fu_642_p1(4);
    tmp_5_cast_reg_1123(5) <= tmp_5_cast_fu_642_p1(5);
    tmp_5_cast_reg_1123(6) <= tmp_5_cast_fu_642_p1(6);
    tmp_5_cast_reg_1123(7) <= tmp_5_cast_fu_642_p1(7);
    tmp_5_cast_reg_1123(8) <= tmp_5_cast_fu_642_p1(8);
    tmp_5_cast_reg_1123(9) <= tmp_5_cast_fu_642_p1(9);
    tmp_5_cast_reg_1123(10) <= tmp_5_cast_fu_642_p1(10);
    tmp_5_cast_reg_1123(11) <= tmp_5_cast_fu_642_p1(11);
    tmp_5_cast_reg_1123(12) <= tmp_5_cast_fu_642_p1(12);
    tmp_5_cast_reg_1123(13) <= tmp_5_cast_fu_642_p1(13);
    tmp_5_cast_reg_1123(14) <= tmp_5_cast_fu_642_p1(14);
    tmp_5_cast_reg_1123(15) <= tmp_5_cast_fu_642_p1(15);
    tmp_5_cast_reg_1123(16) <= tmp_5_cast_fu_642_p1(16);
    tmp_5_cast_reg_1123(17) <= tmp_5_cast_fu_642_p1(17);
    tmp_5_cast_reg_1123(18) <= tmp_5_cast_fu_642_p1(18);
    tmp_5_cast_reg_1123(19) <= tmp_5_cast_fu_642_p1(19);
    tmp_5_cast_reg_1123(20) <= tmp_5_cast_fu_642_p1(20);
    tmp_5_cast_reg_1123(21) <= tmp_5_cast_fu_642_p1(21);
    tmp_5_cast_reg_1123(22) <= tmp_5_cast_fu_642_p1(22);
    tmp_5_cast_reg_1123(23) <= tmp_5_cast_fu_642_p1(23);
    tmp_5_cast_reg_1123(24) <= tmp_5_cast_fu_642_p1(24);
    tmp_5_cast_reg_1123(25) <= tmp_5_cast_fu_642_p1(25);
    tmp_5_cast_reg_1123(26) <= tmp_5_cast_fu_642_p1(26);
    tmp_5_cast_reg_1123(27) <= tmp_5_cast_fu_642_p1(27);
    tmp_5_cast_reg_1123(28) <= tmp_5_cast_fu_642_p1(28);
    tmp_5_cast_reg_1123(29) <= tmp_5_cast_fu_642_p1(29);
                tmp_9_cast_reg_1128(0) <= tmp_9_cast_fu_655_p1(0);
    tmp_9_cast_reg_1128(1) <= tmp_9_cast_fu_655_p1(1);
    tmp_9_cast_reg_1128(2) <= tmp_9_cast_fu_655_p1(2);
    tmp_9_cast_reg_1128(3) <= tmp_9_cast_fu_655_p1(3);
    tmp_9_cast_reg_1128(4) <= tmp_9_cast_fu_655_p1(4);
    tmp_9_cast_reg_1128(5) <= tmp_9_cast_fu_655_p1(5);
    tmp_9_cast_reg_1128(6) <= tmp_9_cast_fu_655_p1(6);
    tmp_9_cast_reg_1128(7) <= tmp_9_cast_fu_655_p1(7);
    tmp_9_cast_reg_1128(8) <= tmp_9_cast_fu_655_p1(8);
    tmp_9_cast_reg_1128(9) <= tmp_9_cast_fu_655_p1(9);
    tmp_9_cast_reg_1128(10) <= tmp_9_cast_fu_655_p1(10);
    tmp_9_cast_reg_1128(11) <= tmp_9_cast_fu_655_p1(11);
    tmp_9_cast_reg_1128(12) <= tmp_9_cast_fu_655_p1(12);
    tmp_9_cast_reg_1128(13) <= tmp_9_cast_fu_655_p1(13);
    tmp_9_cast_reg_1128(14) <= tmp_9_cast_fu_655_p1(14);
    tmp_9_cast_reg_1128(15) <= tmp_9_cast_fu_655_p1(15);
    tmp_9_cast_reg_1128(16) <= tmp_9_cast_fu_655_p1(16);
    tmp_9_cast_reg_1128(17) <= tmp_9_cast_fu_655_p1(17);
    tmp_9_cast_reg_1128(18) <= tmp_9_cast_fu_655_p1(18);
    tmp_9_cast_reg_1128(19) <= tmp_9_cast_fu_655_p1(19);
    tmp_9_cast_reg_1128(20) <= tmp_9_cast_fu_655_p1(20);
    tmp_9_cast_reg_1128(21) <= tmp_9_cast_fu_655_p1(21);
    tmp_9_cast_reg_1128(22) <= tmp_9_cast_fu_655_p1(22);
    tmp_9_cast_reg_1128(23) <= tmp_9_cast_fu_655_p1(23);
    tmp_9_cast_reg_1128(24) <= tmp_9_cast_fu_655_p1(24);
    tmp_9_cast_reg_1128(25) <= tmp_9_cast_fu_655_p1(25);
    tmp_9_cast_reg_1128(26) <= tmp_9_cast_fu_655_p1(26);
    tmp_9_cast_reg_1128(27) <= tmp_9_cast_fu_655_p1(27);
    tmp_9_cast_reg_1128(28) <= tmp_9_cast_fu_655_p1(28);
    tmp_9_cast_reg_1128(29) <= tmp_9_cast_fu_655_p1(29);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st65_fsm_14 = ap_CS_fsm)) then
                master_portA_addr_2_reg_1339(0) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(0);
    master_portA_addr_2_reg_1339(1) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(1);
    master_portA_addr_2_reg_1339(2) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(2);
    master_portA_addr_2_reg_1339(3) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(3);
    master_portA_addr_2_reg_1339(4) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(4);
    master_portA_addr_2_reg_1339(5) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(5);
    master_portA_addr_2_reg_1339(6) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(6);
    master_portA_addr_2_reg_1339(7) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(7);
    master_portA_addr_2_reg_1339(8) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(8);
    master_portA_addr_2_reg_1339(9) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(9);
    master_portA_addr_2_reg_1339(10) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(10);
    master_portA_addr_2_reg_1339(11) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(11);
    master_portA_addr_2_reg_1339(12) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(12);
    master_portA_addr_2_reg_1339(13) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(13);
    master_portA_addr_2_reg_1339(14) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(14);
    master_portA_addr_2_reg_1339(15) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(15);
    master_portA_addr_2_reg_1339(16) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(16);
    master_portA_addr_2_reg_1339(17) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(17);
    master_portA_addr_2_reg_1339(18) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(18);
    master_portA_addr_2_reg_1339(19) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(19);
    master_portA_addr_2_reg_1339(20) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(20);
    master_portA_addr_2_reg_1339(21) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(21);
    master_portA_addr_2_reg_1339(22) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(22);
    master_portA_addr_2_reg_1339(23) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(23);
    master_portA_addr_2_reg_1339(24) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(24);
    master_portA_addr_2_reg_1339(25) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(25);
    master_portA_addr_2_reg_1339(26) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(26);
    master_portA_addr_2_reg_1339(27) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(27);
    master_portA_addr_2_reg_1339(28) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(28);
    master_portA_addr_2_reg_1339(29) <= tmp_29_cast_fu_1014_p1(32 - 1 downto 0)(29);
                tmp_24_reg_1349(0) <= tmp_24_fu_1056_p1(0);
    tmp_24_reg_1349(1) <= tmp_24_fu_1056_p1(1);
    tmp_24_reg_1349(2) <= tmp_24_fu_1056_p1(2);
    tmp_24_reg_1349(3) <= tmp_24_fu_1056_p1(3);
    tmp_24_reg_1349(4) <= tmp_24_fu_1056_p1(4);
    tmp_24_reg_1349(5) <= tmp_24_fu_1056_p1(5);
    tmp_24_reg_1349(6) <= tmp_24_fu_1056_p1(6);
    tmp_24_reg_1349(7) <= tmp_24_fu_1056_p1(7);
    tmp_24_reg_1349(8) <= tmp_24_fu_1056_p1(8);
    tmp_24_reg_1349(9) <= tmp_24_fu_1056_p1(9);
    tmp_24_reg_1349(10) <= tmp_24_fu_1056_p1(10);
    tmp_24_reg_1349(11) <= tmp_24_fu_1056_p1(11);
    tmp_24_reg_1349(12) <= tmp_24_fu_1056_p1(12);
    tmp_24_reg_1349(13) <= tmp_24_fu_1056_p1(13);
    tmp_24_reg_1349(14) <= tmp_24_fu_1056_p1(14);
    tmp_24_reg_1349(15) <= tmp_24_fu_1056_p1(15);
    tmp_24_reg_1349(16) <= tmp_24_fu_1056_p1(16);
    tmp_24_reg_1349(17) <= tmp_24_fu_1056_p1(17);
    tmp_24_reg_1349(18) <= tmp_24_fu_1056_p1(18);
    tmp_24_reg_1349(19) <= tmp_24_fu_1056_p1(19);
    tmp_24_reg_1349(20) <= tmp_24_fu_1056_p1(20);
    tmp_24_reg_1349(21) <= tmp_24_fu_1056_p1(21);
    tmp_24_reg_1349(22) <= tmp_24_fu_1056_p1(22);
    tmp_24_reg_1349(23) <= tmp_24_fu_1056_p1(23);
    tmp_24_reg_1349(24) <= tmp_24_fu_1056_p1(24);
    tmp_24_reg_1349(25) <= tmp_24_fu_1056_p1(25);
    tmp_24_reg_1349(26) <= tmp_24_fu_1056_p1(26);
    tmp_24_reg_1349(27) <= tmp_24_fu_1056_p1(27);
    tmp_24_reg_1349(28) <= tmp_24_fu_1056_p1(28);
    tmp_24_reg_1349(29) <= tmp_24_fu_1056_p1(29);
                tmp_39_add_i32_shr_reg_1344 <= tmp_16_fu_1040_p2(31 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_3_fu_659_p2))) then
                master_portA_addr_reg_1136 <= tmp_7_cast_fu_673_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it1) and (ap_const_lv1_0 = tmp_s_reg_1258))) then
                p_s_reg_1322 <= p_s_fu_954_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_reg_ppstg_exitcond8_reg_1142_pp1_it5 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6)))) or ((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1166_pp2_it5) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6)))))) then
                reg_597 <= master_portA_datain;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_st24_fsm_9 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond5_reg_1179)) or ((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it1) and (ap_const_lv1_0 = tmp_s_reg_1258)))) then
                reg_603 <= centre_buffer_2_wgtCent_value_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_lv1_0 = tmp_s_fu_909_p2))) then
                tmp_10_reg_1279 <= tmp_10_fu_932_p2;
                tmp_13_reg_1291 <= tmp_13_fu_938_p2;
                tmp_6_reg_1267(0) <= tmp_6_fu_920_p1(0);
    tmp_6_reg_1267(1) <= tmp_6_fu_920_p1(1);
    tmp_6_reg_1267(2) <= tmp_6_fu_920_p1(2);
    tmp_6_reg_1267(3) <= tmp_6_fu_920_p1(3);
    tmp_6_reg_1267(4) <= tmp_6_fu_920_p1(4);
    tmp_6_reg_1267(5) <= tmp_6_fu_920_p1(5);
    tmp_6_reg_1267(6) <= tmp_6_fu_920_p1(6);
    tmp_6_reg_1267(7) <= tmp_6_fu_920_p1(7);
    tmp_6_reg_1267(8) <= tmp_6_fu_920_p1(8);
    tmp_6_reg_1267(9) <= tmp_6_fu_920_p1(9);
    tmp_6_reg_1267(10) <= tmp_6_fu_920_p1(10);
    tmp_6_reg_1267(11) <= tmp_6_fu_920_p1(11);
    tmp_6_reg_1267(12) <= tmp_6_fu_920_p1(12);
    tmp_6_reg_1267(13) <= tmp_6_fu_920_p1(13);
    tmp_6_reg_1267(14) <= tmp_6_fu_920_p1(14);
    tmp_6_reg_1267(15) <= tmp_6_fu_920_p1(15);
    tmp_6_reg_1267(16) <= tmp_6_fu_920_p1(16);
    tmp_6_reg_1267(17) <= tmp_6_fu_920_p1(17);
    tmp_6_reg_1267(18) <= tmp_6_fu_920_p1(18);
    tmp_6_reg_1267(19) <= tmp_6_fu_920_p1(19);
    tmp_6_reg_1267(20) <= tmp_6_fu_920_p1(20);
    tmp_6_reg_1267(21) <= tmp_6_fu_920_p1(21);
    tmp_6_reg_1267(22) <= tmp_6_fu_920_p1(22);
    tmp_6_reg_1267(23) <= tmp_6_fu_920_p1(23);
    tmp_6_reg_1267(24) <= tmp_6_fu_920_p1(24);
    tmp_6_reg_1267(25) <= tmp_6_fu_920_p1(25);
    tmp_6_reg_1267(26) <= tmp_6_fu_920_p1(26);
    tmp_6_reg_1267(27) <= tmp_6_fu_920_p1(27);
    tmp_6_reg_1267(28) <= tmp_6_fu_920_p1(28);
    tmp_6_reg_1267(29) <= tmp_6_fu_920_p1(29);
    tmp_6_reg_1267(30) <= tmp_6_fu_920_p1(30);
    tmp_6_reg_1267(31) <= tmp_6_fu_920_p1(31);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st23_fsm_8 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond5_fu_754_p2))) then
                tmp_22_reg_1198 <= tmp_22_fu_797_p2;
                tmp_35_reg_1188 <= tmp_35_fu_770_p1;
            end if;
        end if;
    end process;
    data_points_in_addr0vld_reg <= '0';
    kernel_info_in_addr0vld_reg <= '0';
    centres_out_addr0vld_reg <= '0';
    distortion_out1vld_reg <= '0';
    n0vld_reg <= '0';
    k0vld_reg <= '0';
    lim_reg_1118(0) <= '0';
    tmp_5_cast_reg_1123(32 downto 30) <= "000";
    tmp_9_cast_reg_1128(32 downto 30) <= "000";
    tmp_27_reg_1238(63 downto 32) <= "00000000000000000000000000000000";
    tmp_6_reg_1267(63 downto 32) <= "00000000000000000000000000000000";
    master_portA_addr_2_reg_1339(31 downto 30) <= "00";
    tmp_24_reg_1349(31 downto 30) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , distortion_out1ack_in , ap_reg_ppiten_pp1_it0 , ap_reg_ppiten_pp1_it1 , ap_sig_bdd_217 , ap_reg_ppiten_pp1_it6 , ap_reg_ppiten_pp1_it7 , ap_reg_ppiten_pp2_it0 , ap_reg_ppiten_pp2_it1 , ap_sig_bdd_250 , ap_reg_ppiten_pp2_it6 , ap_reg_ppiten_pp2_it7 , ap_reg_ppiten_pp4_it17 , ap_reg_ppiten_pp4_it18 , tmp_3_fu_659_p2 , exitcond8_fu_683_p2 , exitcond1_fu_731_p2 , exitcond5_fu_754_p2 , exitcond_fu_1060_p2 , ap_reg_ppiten_pp5_it0 , ap_reg_ppiten_pp5_it1 , ap_sig_bdd_616 , ap_reg_ppiten_pp5_it2 , exitcond7_fu_607_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond7_fu_607_p2)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = tmp_3_fu_659_p2)) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp4_stg0_fsm_12;
                end if;
            when ap_ST_pp1_stg0_fsm_5 => 
                if ((not(((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it7) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it6)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and not((ap_const_lv1_0 = exitcond8_fu_683_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_5;
                elsif ((((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it7) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and not((ap_const_lv1_0 = exitcond8_fu_683_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_5;
                end if;
            when ap_ST_st14_fsm_6 => 
                ap_NS_fsm <= ap_ST_pp2_stg0_fsm_7;
            when ap_ST_pp2_stg0_fsm_7 => 
                if ((not(((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it7) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it6)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_lv1_0 = exitcond1_fu_731_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_7;
                elsif ((((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it7) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_lv1_0 = exitcond1_fu_731_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_7;
                end if;
            when ap_ST_st23_fsm_8 => 
                if ((ap_const_lv1_0 = exitcond5_fu_754_p2)) then
                    ap_NS_fsm <= ap_ST_st24_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_11;
                end if;
            when ap_ST_st24_fsm_9 => 
                ap_NS_fsm <= ap_ST_st25_fsm_10;
            when ap_ST_st25_fsm_10 => 
                ap_NS_fsm <= ap_ST_st23_fsm_8;
            when ap_ST_st26_fsm_11 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_pp4_stg0_fsm_12 => 
                ap_NS_fsm <= ap_ST_pp4_stg1_fsm_13;
            when ap_ST_pp4_stg1_fsm_13 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp4_it18) and (ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm) and not((ap_const_logic_1 = ap_reg_ppiten_pp4_it17))))) then
                    ap_NS_fsm <= ap_ST_pp4_stg0_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st65_fsm_14;
                end if;
            when ap_ST_st65_fsm_14 => 
                ap_NS_fsm <= ap_ST_pp5_stg0_fsm_15;
            when ap_ST_pp5_stg0_fsm_15 => 
                if ((not(((ap_ST_pp5_stg0_fsm_15 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2) and not((ap_sig_bdd_616 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp5_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not((ap_sig_bdd_616 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_lv1_0 = exitcond_fu_1060_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp5_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp5_stg0_fsm_15;
                elsif ((((ap_ST_pp5_stg0_fsm_15 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2) and not((ap_sig_bdd_616 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp5_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not((ap_sig_bdd_616 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_lv1_0 = exitcond_fu_1060_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp5_it1))))) then
                    ap_NS_fsm <= ap_ST_st69_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_pp5_stg0_fsm_15;
                end if;
            when ap_ST_st69_fsm_16 => 
                ap_NS_fsm <= ap_ST_st70_fsm_17;
            when ap_ST_st70_fsm_17 => 
                if (not((distortion_out1ack_in = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st70_fsm_17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, distortion_out1ack_in)
    begin
        if (((ap_ST_st70_fsm_17 = ap_CS_fsm) and not((distortion_out1ack_in = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, distortion_out1ack_in)
    begin
        if (((ap_ST_st70_fsm_17 = ap_CS_fsm) and not((distortion_out1ack_in = ap_const_logic_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_1236 assign process. --
    ap_sig_bdd_1236_assign_proc : process(ap_CS_fsm, tmp_s_fu_909_p2)
    begin
                ap_sig_bdd_1236 <= ((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_s_fu_909_p2)));
    end process;


    -- ap_sig_bdd_1239 assign process. --
    ap_sig_bdd_1239_assign_proc : process(ap_CS_fsm, tmp_s_reg_1258, tmp_13_reg_1291)
    begin
                ap_sig_bdd_1239 <= ((ap_const_lv1_0 = tmp_s_reg_1258) and (ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_13_reg_1291)));
    end process;


    -- ap_sig_bdd_217 assign process. --
    ap_sig_bdd_217_assign_proc : process(master_portA_rsp_empty_n, ap_reg_ppstg_exitcond8_reg_1142_pp1_it5)
    begin
                ap_sig_bdd_217 <= ((master_portA_rsp_empty_n = ap_const_logic_0) and (ap_reg_ppstg_exitcond8_reg_1142_pp1_it5 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_250 assign process. --
    ap_sig_bdd_250_assign_proc : process(master_portA_rsp_empty_n, ap_reg_ppstg_exitcond1_reg_1166_pp2_it5)
    begin
                ap_sig_bdd_250 <= ((master_portA_rsp_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1166_pp2_it5));
    end process;


    -- ap_sig_bdd_616 assign process. --
    ap_sig_bdd_616_assign_proc : process(master_portA_req_full_n, ap_reg_ppstg_exitcond_reg_1354_pp5_it1)
    begin
                ap_sig_bdd_616 <= ((master_portA_req_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1354_pp5_it1));
    end process;

    b2_1_fu_706_p2 <= std_logic_vector(unsigned(b2_reg_503) + unsigned(ap_const_lv32_30));
    b_1_fu_903_p2 <= std_logic_vector(unsigned(b_reg_491) + unsigned(ap_const_lv32_20));

    -- c_buffer_address0 assign process. --
    c_buffer_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it18, tmp_12_fu_981_p1, tmp_26_2_fu_1000_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp4_it18)) then
            if ((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) then 
                c_buffer_address0 <= tmp_26_2_fu_1000_p1(10 - 1 downto 0);
            elsif ((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm)) then 
                c_buffer_address0 <= tmp_12_fu_981_p1(10 - 1 downto 0);
            else 
                c_buffer_address0 <= "XXXXXXXXXX";
            end if;
        else 
            c_buffer_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- c_buffer_address1 assign process. --
    c_buffer_address1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it18, ap_reg_ppiten_pp5_it0, tmp_26_1_fu_990_p1, tmp_26_fu_1071_p1)
    begin
        if (((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it18))) then 
            c_buffer_address1 <= tmp_26_1_fu_990_p1(10 - 1 downto 0);
        elsif (((ap_ST_pp5_stg0_fsm_15 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it0))) then 
            c_buffer_address1 <= tmp_26_fu_1071_p1(10 - 1 downto 0);
        else 
            c_buffer_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- c_buffer_ce0 assign process. --
    c_buffer_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it18)
    begin
        if ((((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it18)) or ((ap_const_logic_1 = ap_reg_ppiten_pp4_it18) and (ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)))) then 
            c_buffer_ce0 <= ap_const_logic_1;
        else 
            c_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_buffer_ce1 assign process. --
    c_buffer_ce1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it18, ap_reg_ppiten_pp5_it0, ap_sig_bdd_616, ap_reg_ppiten_pp5_it2)
    begin
        if ((((ap_ST_pp5_stg0_fsm_15 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not((ap_sig_bdd_616 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2)))) or ((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it18)))) then 
            c_buffer_ce1 <= ap_const_logic_1;
        else 
            c_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_buffer_d0 assign process. --
    c_buffer_d0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it18, grp_fu_961_p2, grp_fu_975_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp4_it18)) then
            if ((ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) then 
                c_buffer_d0 <= grp_fu_975_p2;
            elsif ((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm)) then 
                c_buffer_d0 <= grp_fu_961_p2;
            else 
                c_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            c_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    c_buffer_d1 <= grp_fu_968_p2;

    -- c_buffer_we0 assign process. --
    c_buffer_we0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it18, ap_reg_ppstg_tmp_s_reg_1258_pp4_it17, ap_reg_ppstg_tmp_s_reg_1258_pp4_it18)
    begin
        if ((((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it18) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_s_reg_1258_pp4_it17)) or ((ap_const_logic_1 = ap_reg_ppiten_pp4_it18) and (ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_s_reg_1258_pp4_it18)))) then 
            c_buffer_we0 <= ap_const_logic_1;
        else 
            c_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_buffer_we1 assign process. --
    c_buffer_we1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it18, ap_reg_ppstg_tmp_s_reg_1258_pp4_it17)
    begin
        if ((((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it18) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_s_reg_1258_pp4_it17)))) then 
            c_buffer_we1 <= ap_const_logic_1;
        else 
            c_buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- centre_buffer_0_wgtCent_value_address0 assign process. --
    centre_buffer_0_wgtCent_value_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it0, tmp_27_fu_860_p1, tmp_6_reg_1267, tmp_2_fu_619_p1, tmp_28_fu_827_p1)
    begin
        if ((ap_ST_st24_fsm_9 = ap_CS_fsm)) then 
            centre_buffer_0_wgtCent_value_address0 <= tmp_27_fu_860_p1(8 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            centre_buffer_0_wgtCent_value_address0 <= tmp_2_fu_619_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm))) then 
            centre_buffer_0_wgtCent_value_address0 <= tmp_6_reg_1267(8 - 1 downto 0);
        elsif ((ap_ST_st23_fsm_8 = ap_CS_fsm)) then 
            centre_buffer_0_wgtCent_value_address0 <= tmp_28_fu_827_p1(8 - 1 downto 0);
        else 
            centre_buffer_0_wgtCent_value_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- centre_buffer_0_wgtCent_value_ce0 assign process. --
    centre_buffer_0_wgtCent_value_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it0)
    begin
        if (((ap_ST_st24_fsm_9 = ap_CS_fsm) or (ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st23_fsm_8 = ap_CS_fsm) or ((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)))) then 
            centre_buffer_0_wgtCent_value_ce0 <= ap_const_logic_1;
        else 
            centre_buffer_0_wgtCent_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centre_buffer_0_wgtCent_value_d0 assign process. --
    centre_buffer_0_wgtCent_value_d0_assign_proc : process(ap_CS_fsm, tmp_33_fu_868_p2)
    begin
        if ((ap_ST_st24_fsm_9 = ap_CS_fsm)) then 
            centre_buffer_0_wgtCent_value_d0 <= tmp_33_fu_868_p2;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            centre_buffer_0_wgtCent_value_d0 <= ap_const_lv32_0;
        else 
            centre_buffer_0_wgtCent_value_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- centre_buffer_0_wgtCent_value_we0 assign process. --
    centre_buffer_0_wgtCent_value_we0_assign_proc : process(ap_CS_fsm, exitcond5_reg_1179, exitcond7_fu_607_p2)
    begin
        if ((((ap_ST_st24_fsm_9 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond5_reg_1179)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond7_fu_607_p2)))) then 
            centre_buffer_0_wgtCent_value_we0 <= ap_const_logic_1;
        else 
            centre_buffer_0_wgtCent_value_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centre_buffer_1_wgtCent_value_address0 assign process. --
    centre_buffer_1_wgtCent_value_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it0, tmp_27_fu_860_p1, tmp_6_reg_1267, tmp_2_fu_619_p1, tmp_28_fu_827_p1)
    begin
        if ((ap_ST_st24_fsm_9 = ap_CS_fsm)) then 
            centre_buffer_1_wgtCent_value_address0 <= tmp_27_fu_860_p1(8 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            centre_buffer_1_wgtCent_value_address0 <= tmp_2_fu_619_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm))) then 
            centre_buffer_1_wgtCent_value_address0 <= tmp_6_reg_1267(8 - 1 downto 0);
        elsif ((ap_ST_st23_fsm_8 = ap_CS_fsm)) then 
            centre_buffer_1_wgtCent_value_address0 <= tmp_28_fu_827_p1(8 - 1 downto 0);
        else 
            centre_buffer_1_wgtCent_value_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- centre_buffer_1_wgtCent_value_ce0 assign process. --
    centre_buffer_1_wgtCent_value_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it0)
    begin
        if (((ap_ST_st24_fsm_9 = ap_CS_fsm) or (ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st23_fsm_8 = ap_CS_fsm) or ((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)))) then 
            centre_buffer_1_wgtCent_value_ce0 <= ap_const_logic_1;
        else 
            centre_buffer_1_wgtCent_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centre_buffer_1_wgtCent_value_d0 assign process. --
    centre_buffer_1_wgtCent_value_d0_assign_proc : process(ap_CS_fsm, tmp_44_1_fu_875_p2)
    begin
        if ((ap_ST_st24_fsm_9 = ap_CS_fsm)) then 
            centre_buffer_1_wgtCent_value_d0 <= tmp_44_1_fu_875_p2;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            centre_buffer_1_wgtCent_value_d0 <= ap_const_lv32_0;
        else 
            centre_buffer_1_wgtCent_value_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- centre_buffer_1_wgtCent_value_we0 assign process. --
    centre_buffer_1_wgtCent_value_we0_assign_proc : process(ap_CS_fsm, exitcond5_reg_1179, exitcond7_fu_607_p2)
    begin
        if ((((ap_ST_st24_fsm_9 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond5_reg_1179)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond7_fu_607_p2)))) then 
            centre_buffer_1_wgtCent_value_we0 <= ap_const_logic_1;
        else 
            centre_buffer_1_wgtCent_value_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centre_buffer_2_wgtCent_value_address0 assign process. --
    centre_buffer_2_wgtCent_value_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it0, tmp_27_reg_1238, tmp_6_reg_1267, tmp_2_fu_619_p1, tmp_28_fu_827_p1)
    begin
        if ((ap_ST_st25_fsm_10 = ap_CS_fsm)) then 
            centre_buffer_2_wgtCent_value_address0 <= tmp_27_reg_1238(8 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            centre_buffer_2_wgtCent_value_address0 <= tmp_2_fu_619_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm))) then 
            centre_buffer_2_wgtCent_value_address0 <= tmp_6_reg_1267(8 - 1 downto 0);
        elsif ((ap_ST_st23_fsm_8 = ap_CS_fsm)) then 
            centre_buffer_2_wgtCent_value_address0 <= tmp_28_fu_827_p1(8 - 1 downto 0);
        else 
            centre_buffer_2_wgtCent_value_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- centre_buffer_2_wgtCent_value_ce0 assign process. --
    centre_buffer_2_wgtCent_value_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it0)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st23_fsm_8 = ap_CS_fsm) or ((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_ST_pp4_stg1_fsm_13 = ap_CS_fsm)) or (ap_ST_st25_fsm_10 = ap_CS_fsm))) then 
            centre_buffer_2_wgtCent_value_ce0 <= ap_const_logic_1;
        else 
            centre_buffer_2_wgtCent_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centre_buffer_2_wgtCent_value_d0 assign process. --
    centre_buffer_2_wgtCent_value_d0_assign_proc : process(ap_CS_fsm, tmp_44_2_fu_896_p2)
    begin
        if ((ap_ST_st25_fsm_10 = ap_CS_fsm)) then 
            centre_buffer_2_wgtCent_value_d0 <= tmp_44_2_fu_896_p2;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            centre_buffer_2_wgtCent_value_d0 <= ap_const_lv32_0;
        else 
            centre_buffer_2_wgtCent_value_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- centre_buffer_2_wgtCent_value_we0 assign process. --
    centre_buffer_2_wgtCent_value_we0_assign_proc : process(ap_CS_fsm, exitcond5_reg_1179, exitcond7_fu_607_p2)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond7_fu_607_p2)) or ((ap_const_lv1_0 = exitcond5_reg_1179) and (ap_ST_st25_fsm_10 = ap_CS_fsm)))) then 
            centre_buffer_2_wgtCent_value_we0 <= ap_const_logic_1;
        else 
            centre_buffer_2_wgtCent_value_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centre_buffer_count_address0 assign process. --
    centre_buffer_count_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it0, tmp_27_fu_860_p1, centre_buffer_count_addr_2_reg_1243, tmp_6_fu_920_p1, tmp_2_fu_619_p1)
    begin
        if ((ap_ST_st25_fsm_10 = ap_CS_fsm)) then 
            centre_buffer_count_address0 <= centre_buffer_count_addr_2_reg_1243;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            centre_buffer_count_address0 <= tmp_2_fu_619_p1(8 - 1 downto 0);
        elsif (((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it0))) then 
            centre_buffer_count_address0 <= tmp_6_fu_920_p1(8 - 1 downto 0);
        elsif ((ap_ST_st24_fsm_9 = ap_CS_fsm)) then 
            centre_buffer_count_address0 <= tmp_27_fu_860_p1(8 - 1 downto 0);
        else 
            centre_buffer_count_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- centre_buffer_count_ce0 assign process. --
    centre_buffer_count_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it0)
    begin
        if (((ap_ST_st24_fsm_9 = ap_CS_fsm) or (ap_ST_st3_fsm_2 = ap_CS_fsm) or ((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it0)) or (ap_ST_st25_fsm_10 = ap_CS_fsm))) then 
            centre_buffer_count_ce0 <= ap_const_logic_1;
        else 
            centre_buffer_count_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centre_buffer_count_d0 assign process. --
    centre_buffer_count_d0_assign_proc : process(ap_CS_fsm, tmp_31_fu_882_p2)
    begin
        if ((ap_ST_st25_fsm_10 = ap_CS_fsm)) then 
            centre_buffer_count_d0 <= tmp_31_fu_882_p2;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            centre_buffer_count_d0 <= ap_const_lv32_0;
        else 
            centre_buffer_count_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- centre_buffer_count_we0 assign process. --
    centre_buffer_count_we0_assign_proc : process(ap_CS_fsm, exitcond5_reg_1179, exitcond7_fu_607_p2)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond7_fu_607_p2)) or ((ap_const_lv1_0 = exitcond5_reg_1179) and (ap_ST_st25_fsm_10 = ap_CS_fsm)))) then 
            centre_buffer_count_we0 <= ap_const_logic_1;
        else 
            centre_buffer_count_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centre_buffer_sum_sq_address0 assign process. --
    centre_buffer_sum_sq_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it0, tmp_27_fu_860_p1, centre_buffer_sum_sq_addr_2_reg_1248, tmp_6_fu_920_p1, tmp_2_fu_619_p1)
    begin
        if ((ap_ST_st25_fsm_10 = ap_CS_fsm)) then 
            centre_buffer_sum_sq_address0 <= centre_buffer_sum_sq_addr_2_reg_1248;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            centre_buffer_sum_sq_address0 <= tmp_2_fu_619_p1(8 - 1 downto 0);
        elsif (((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it0))) then 
            centre_buffer_sum_sq_address0 <= tmp_6_fu_920_p1(8 - 1 downto 0);
        elsif ((ap_ST_st24_fsm_9 = ap_CS_fsm)) then 
            centre_buffer_sum_sq_address0 <= tmp_27_fu_860_p1(8 - 1 downto 0);
        else 
            centre_buffer_sum_sq_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- centre_buffer_sum_sq_ce0 assign process. --
    centre_buffer_sum_sq_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp4_it0)
    begin
        if (((ap_ST_st24_fsm_9 = ap_CS_fsm) or (ap_ST_st3_fsm_2 = ap_CS_fsm) or ((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it0)) or (ap_ST_st25_fsm_10 = ap_CS_fsm))) then 
            centre_buffer_sum_sq_ce0 <= ap_const_logic_1;
        else 
            centre_buffer_sum_sq_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centre_buffer_sum_sq_d0 assign process. --
    centre_buffer_sum_sq_d0_assign_proc : process(ap_CS_fsm, tmp_32_fu_889_p2)
    begin
        if ((ap_ST_st25_fsm_10 = ap_CS_fsm)) then 
            centre_buffer_sum_sq_d0 <= tmp_32_fu_889_p2;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            centre_buffer_sum_sq_d0 <= ap_const_lv32_0;
        else 
            centre_buffer_sum_sq_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- centre_buffer_sum_sq_we0 assign process. --
    centre_buffer_sum_sq_we0_assign_proc : process(ap_CS_fsm, exitcond5_reg_1179, exitcond7_fu_607_p2)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond7_fu_607_p2)) or ((ap_const_lv1_0 = exitcond5_reg_1179) and (ap_ST_st25_fsm_10 = ap_CS_fsm)))) then 
            centre_buffer_sum_sq_we0 <= ap_const_logic_1;
        else 
            centre_buffer_sum_sq_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centres_out_addr0ack_out assign process. --
    centres_out_addr0ack_out_assign_proc : process(ap_CS_fsm, distortion_out1ack_in)
    begin
        if (((ap_ST_st70_fsm_17 = ap_CS_fsm) and not((distortion_out1ack_in = ap_const_logic_0)))) then 
            centres_out_addr0ack_out <= ap_const_logic_1;
        else 
            centres_out_addr0ack_out <= ap_const_logic_0;
        end if; 
    end process;


    -- data_points_in_addr0ack_out assign process. --
    data_points_in_addr0ack_out_assign_proc : process(ap_CS_fsm, distortion_out1ack_in)
    begin
        if (((ap_ST_st70_fsm_17 = ap_CS_fsm) and not((distortion_out1ack_in = ap_const_logic_0)))) then 
            data_points_in_addr0ack_out <= ap_const_logic_1;
        else 
            data_points_in_addr0ack_out <= ap_const_logic_0;
        end if; 
    end process;

    distortion_out <= distortion_out1data_reg;

    -- distortion_out1ack_in assign process. --
    distortion_out1ack_in_assign_proc : process(distortion_out1vld_reg)
    begin
        if (((ap_const_logic_0 = distortion_out1vld_reg) or ((ap_const_logic_1 = distortion_out1vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            distortion_out1ack_in <= ap_const_logic_1;
        else 
            distortion_out1ack_in <= ap_const_logic_0;
        end if; 
    end process;


    -- distortion_out1vld_in assign process. --
    distortion_out1vld_in_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st69_fsm_16 = ap_CS_fsm)) then 
            distortion_out1vld_in <= ap_const_logic_1;
        else 
            distortion_out1vld_in <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_731_p2 <= "1" when (indvar2_phi_fu_531_p4 = ap_const_lv6_20) else "0";
    exitcond5_fu_754_p2 <= "1" when (i1_reg_539 = ap_const_lv5_10) else "0";
    exitcond7_fu_607_p2 <= "1" when (i_reg_480 = ap_const_lv9_100) else "0";
    exitcond8_fu_683_p2 <= "1" when (indvar_phi_fu_519_p4 = ap_const_lv6_30) else "0";
    exitcond_fu_1060_p2 <= "1" when (indvar1_reg_585 = tmp_39_add_i32_shr_reg_1344) else "0";
    grp_fu_961_ce <= ap_const_logic_1;
    grp_fu_961_p0 <= centre_buffer_0_wgtCent_value_q0;
    grp_fu_961_p1 <= p_s_fu_954_p3;
    grp_fu_968_ce <= ap_const_logic_1;
    grp_fu_968_p0 <= centre_buffer_1_wgtCent_value_q0;
    grp_fu_968_p1 <= p_s_fu_954_p3;
    grp_fu_975_ce <= ap_const_logic_1;
    grp_fu_975_p0 <= reg_603;
    grp_fu_975_p1 <= p_s_reg_1322;
    i1_cast2_fu_766_p1 <= std_logic_vector(resize(unsigned(i1_reg_539),7));

    -- i5_phi_fu_566_p4 assign process. --
    i5_phi_fu_566_p4_assign_proc : process(ap_CS_fsm, i5_reg_562, ap_reg_ppiten_pp4_it1, tmp_s_reg_1258, i_2_reg_1262, tmp_13_reg_1291)
    begin
        if (((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it1) and (ap_const_lv1_0 = tmp_s_reg_1258) and (ap_const_lv1_0 = tmp_13_reg_1291))) then 
            i5_phi_fu_566_p4 <= i_2_reg_1262;
        else 
            i5_phi_fu_566_p4 <= i5_reg_562;
        end if; 
    end process;

    i_1_fu_613_p2 <= std_logic_vector(unsigned(i_reg_480) + unsigned(ap_const_lv9_1));
    i_2_fu_914_p2 <= std_logic_vector(unsigned(i5_phi_fu_566_p4) + unsigned(ap_const_lv32_1));
    i_3_fu_760_p2 <= std_logic_vector(unsigned(i1_reg_539) + unsigned(ap_const_lv5_1));

    -- i_buffer_address0 assign process. --
    i_buffer_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp2_it7, tmp_34_fu_749_p1, tmp_19_fu_780_p1, tmp_21_fu_841_p1)
    begin
        if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it7))) then 
            i_buffer_address0 <= tmp_34_fu_749_p1(5 - 1 downto 0);
        elsif ((ap_ST_st24_fsm_9 = ap_CS_fsm)) then 
            i_buffer_address0 <= tmp_21_fu_841_p1(5 - 1 downto 0);
        elsif ((ap_ST_st23_fsm_8 = ap_CS_fsm)) then 
            i_buffer_address0 <= tmp_19_fu_780_p1(5 - 1 downto 0);
        else 
            i_buffer_address0 <= "XXXXX";
        end if; 
    end process;


    -- i_buffer_ce0 assign process. --
    i_buffer_ce0_assign_proc : process(ap_CS_fsm, ap_sig_bdd_250, ap_reg_ppiten_pp2_it6, ap_reg_ppiten_pp2_it7)
    begin
        if (((ap_ST_st24_fsm_9 = ap_CS_fsm) or (ap_ST_st23_fsm_8 = ap_CS_fsm) or ((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it7) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6)))))) then 
            i_buffer_ce0 <= ap_const_logic_1;
        else 
            i_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_buffer_d0 <= reg_597;

    -- i_buffer_we0 assign process. --
    i_buffer_we0_assign_proc : process(ap_CS_fsm, ap_sig_bdd_250, ap_reg_ppiten_pp2_it6, ap_reg_ppiten_pp2_it7, ap_reg_ppstg_exitcond1_reg_1166_pp2_it6)
    begin
        if ((((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it7) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1166_pp2_it6)))) then 
            i_buffer_we0 <= ap_const_logic_1;
        else 
            i_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- indvar2_phi_fu_531_p4 assign process. --
    indvar2_phi_fu_531_p4_assign_proc : process(ap_CS_fsm, indvar2_reg_527, ap_reg_ppiten_pp2_it1, exitcond1_reg_1166, indvar_next2_reg_1170)
    begin
        if (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond1_reg_1166))) then 
            indvar2_phi_fu_531_p4 <= indvar_next2_reg_1170;
        else 
            indvar2_phi_fu_531_p4 <= indvar2_reg_527;
        end if; 
    end process;

    indvar_next1_fu_1065_p2 <= std_logic_vector(unsigned(indvar1_reg_585) + unsigned(ap_const_lv30_1));
    indvar_next2_fu_737_p2 <= std_logic_vector(unsigned(indvar2_phi_fu_531_p4) + unsigned(ap_const_lv6_1));
    indvar_next_fu_689_p2 <= std_logic_vector(unsigned(indvar_phi_fu_519_p4) + unsigned(ap_const_lv6_1));

    -- indvar_phi_fu_519_p4 assign process. --
    indvar_phi_fu_519_p4_assign_proc : process(ap_CS_fsm, indvar_reg_515, ap_reg_ppiten_pp1_it1, exitcond8_reg_1142, indvar_next_reg_1146)
    begin
        if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond8_reg_1142 = ap_const_lv1_0))) then 
            indvar_phi_fu_519_p4 <= indvar_next_reg_1146;
        else 
            indvar_phi_fu_519_p4 <= indvar_reg_515;
        end if; 
    end process;

    isIter0_fu_695_p2 <= "1" when (indvar_phi_fu_519_p4 = ap_const_lv6_0) else "0";
    isIter1_fu_743_p2 <= "1" when (indvar2_phi_fu_531_p4 = ap_const_lv6_0) else "0";
    isIter_fu_1076_p2 <= "1" when (indvar1_reg_585 = ap_const_lv30_0) else "0";

    -- k0ack_out assign process. --
    k0ack_out_assign_proc : process(ap_CS_fsm, distortion_out1ack_in)
    begin
        if (((ap_ST_st70_fsm_17 = ap_CS_fsm) and not((distortion_out1ack_in = ap_const_logic_0)))) then 
            k0ack_out <= ap_const_logic_1;
        else 
            k0ack_out <= ap_const_logic_0;
        end if; 
    end process;


    -- kernel_info_in_addr0ack_out assign process. --
    kernel_info_in_addr0ack_out_assign_proc : process(ap_CS_fsm, distortion_out1ack_in)
    begin
        if (((ap_ST_st70_fsm_17 = ap_CS_fsm) and not((distortion_out1ack_in = ap_const_logic_0)))) then 
            kernel_info_in_addr0ack_out <= ap_const_logic_1;
        else 
            kernel_info_in_addr0ack_out <= ap_const_logic_0;
        end if; 
    end process;

    lim_fu_628_p2 <= std_logic_vector(shift_left(unsigned(n0data_reg),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));

    -- master_portA_address assign process. --
    master_portA_address_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it1, exitcond8_reg_1142, ap_sig_bdd_217, ap_reg_ppiten_pp1_it6, ap_reg_ppiten_pp2_it1, exitcond1_reg_1166, ap_sig_bdd_250, ap_reg_ppiten_pp2_it6, master_portA_addr_reg_1136, isIter0_reg_1151, master_portA_addr_1_reg_1160, isIter1_reg_1175, master_portA_addr_2_reg_1339, ap_reg_ppstg_exitcond_reg_1354_pp5_it1, ap_sig_bdd_616, ap_reg_ppiten_pp5_it2, ap_reg_ppstg_isIter_reg_1368_pp5_it1)
    begin
        if (((ap_ST_pp5_stg0_fsm_15 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1354_pp5_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2) and not((ap_sig_bdd_616 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_1368_pp5_it1)))) then 
            master_portA_address <= master_portA_addr_2_reg_1339;
        elsif (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and (ap_const_lv1_0 = exitcond1_reg_1166) and not((ap_const_lv1_0 = isIter1_reg_1175)))) then 
            master_portA_address <= master_portA_addr_1_reg_1160;
        elsif (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and (exitcond8_reg_1142 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_1151)))) then 
            master_portA_address <= master_portA_addr_reg_1136;
        else 
            master_portA_address <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    master_portA_dataout <= c_buffer_load_reg_1372;

    -- master_portA_req_din assign process. --
    master_portA_req_din_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it1, exitcond8_reg_1142, ap_sig_bdd_217, ap_reg_ppiten_pp1_it6, ap_reg_ppiten_pp2_it1, exitcond1_reg_1166, ap_sig_bdd_250, ap_reg_ppiten_pp2_it6, isIter0_reg_1151, isIter1_reg_1175, ap_reg_ppstg_exitcond_reg_1354_pp5_it1, ap_sig_bdd_616, ap_reg_ppiten_pp5_it2, ap_reg_ppstg_isIter_reg_1368_pp5_it1)
    begin
        if ((((ap_ST_pp5_stg0_fsm_15 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1354_pp5_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2) and not((ap_sig_bdd_616 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_1368_pp5_it1))) or ((ap_ST_pp5_stg0_fsm_15 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1354_pp5_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2) and not((ap_sig_bdd_616 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2)))))) then 
            master_portA_req_din <= ap_const_logic_1;
        elsif ((((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and (exitcond8_reg_1142 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_1151))) or ((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and (ap_const_lv1_0 = exitcond1_reg_1166) and not((ap_const_lv1_0 = isIter1_reg_1175))))) then 
            master_portA_req_din <= ap_const_logic_0;
        else 
            master_portA_req_din <= ap_const_logic_0;
        end if; 
    end process;


    -- master_portA_req_write assign process. --
    master_portA_req_write_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it1, exitcond8_reg_1142, ap_sig_bdd_217, ap_reg_ppiten_pp1_it6, ap_reg_ppiten_pp2_it1, exitcond1_reg_1166, ap_sig_bdd_250, ap_reg_ppiten_pp2_it6, isIter0_reg_1151, isIter1_reg_1175, ap_reg_ppstg_exitcond_reg_1354_pp5_it1, ap_sig_bdd_616, ap_reg_ppiten_pp5_it2, ap_reg_ppstg_isIter_reg_1368_pp5_it1)
    begin
        if ((((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and (exitcond8_reg_1142 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_1151))) or ((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and (ap_const_lv1_0 = exitcond1_reg_1166) and not((ap_const_lv1_0 = isIter1_reg_1175))) or ((ap_ST_pp5_stg0_fsm_15 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1354_pp5_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2) and not((ap_sig_bdd_616 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_1368_pp5_it1))) or ((ap_ST_pp5_stg0_fsm_15 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1354_pp5_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2) and not((ap_sig_bdd_616 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2)))))) then 
            master_portA_req_write <= ap_const_logic_1;
        else 
            master_portA_req_write <= ap_const_logic_0;
        end if; 
    end process;


    -- master_portA_rsp_read assign process. --
    master_portA_rsp_read_assign_proc : process(ap_CS_fsm, ap_reg_ppstg_exitcond8_reg_1142_pp1_it5, ap_sig_bdd_217, ap_reg_ppiten_pp1_it6, ap_reg_ppstg_exitcond1_reg_1166_pp2_it5, ap_sig_bdd_250, ap_reg_ppiten_pp2_it6)
    begin
        if ((((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_reg_ppstg_exitcond8_reg_1142_pp1_it5 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6)))) or ((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1166_pp2_it5) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6)))))) then 
            master_portA_rsp_read <= ap_const_logic_1;
        else 
            master_portA_rsp_read <= ap_const_logic_0;
        end if; 
    end process;


    -- master_portA_size assign process. --
    master_portA_size_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it1, exitcond8_reg_1142, ap_sig_bdd_217, ap_reg_ppiten_pp1_it6, ap_reg_ppiten_pp2_it1, exitcond1_reg_1166, ap_sig_bdd_250, ap_reg_ppiten_pp2_it6, isIter0_reg_1151, isIter1_reg_1175, tmp_24_reg_1349, ap_reg_ppstg_exitcond_reg_1354_pp5_it1, ap_sig_bdd_616, ap_reg_ppiten_pp5_it2, ap_reg_ppstg_isIter_reg_1368_pp5_it1)
    begin
        if (((ap_ST_pp5_stg0_fsm_15 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1354_pp5_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2) and not((ap_sig_bdd_616 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_1368_pp5_it1)))) then 
            master_portA_size <= tmp_24_reg_1349;
        elsif (((ap_ST_pp2_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_250 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and (ap_const_lv1_0 = exitcond1_reg_1166) and not((ap_const_lv1_0 = isIter1_reg_1175)))) then 
            master_portA_size <= ap_const_lv32_20;
        elsif (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and (exitcond8_reg_1142 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_1151)))) then 
            master_portA_size <= ap_const_lv32_30;
        else 
            master_portA_size <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- n0ack_out assign process. --
    n0ack_out_assign_proc : process(ap_CS_fsm, distortion_out1ack_in)
    begin
        if (((ap_ST_st70_fsm_17 = ap_CS_fsm) and not((distortion_out1ack_in = ap_const_logic_0)))) then 
            n0ack_out <= ap_const_logic_1;
        else 
            n0ack_out <= ap_const_logic_0;
        end if; 
    end process;


    -- p_buffer_address0 assign process. --
    p_buffer_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it7, tmp_25_fu_701_p1, tmp_30_fu_807_p1)
    begin
        if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it7))) then 
            p_buffer_address0 <= tmp_25_fu_701_p1(6 - 1 downto 0);
        elsif ((ap_ST_st23_fsm_8 = ap_CS_fsm)) then 
            p_buffer_address0 <= tmp_30_fu_807_p1(6 - 1 downto 0);
        else 
            p_buffer_address0 <= "XXXXXX";
        end if; 
    end process;


    -- p_buffer_address1 assign process. --
    p_buffer_address1_assign_proc : process(ap_CS_fsm, tmp_30_1_fu_822_p1, tmp_30_2_fu_855_p1)
    begin
        if ((ap_ST_st24_fsm_9 = ap_CS_fsm)) then 
            p_buffer_address1 <= tmp_30_2_fu_855_p1(6 - 1 downto 0);
        elsif ((ap_ST_st23_fsm_8 = ap_CS_fsm)) then 
            p_buffer_address1 <= tmp_30_1_fu_822_p1(6 - 1 downto 0);
        else 
            p_buffer_address1 <= "XXXXXX";
        end if; 
    end process;


    -- p_buffer_ce0 assign process. --
    p_buffer_ce0_assign_proc : process(ap_CS_fsm, ap_sig_bdd_217, ap_reg_ppiten_pp1_it6, ap_reg_ppiten_pp1_it7)
    begin
        if (((ap_ST_st23_fsm_8 = ap_CS_fsm) or ((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it7) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6)))))) then 
            p_buffer_ce0 <= ap_const_logic_1;
        else 
            p_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- p_buffer_ce1 assign process. --
    p_buffer_ce1_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st24_fsm_9 = ap_CS_fsm) or (ap_ST_st23_fsm_8 = ap_CS_fsm))) then 
            p_buffer_ce1 <= ap_const_logic_1;
        else 
            p_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_buffer_d0 <= reg_597;

    -- p_buffer_we0 assign process. --
    p_buffer_we0_assign_proc : process(ap_CS_fsm, ap_sig_bdd_217, ap_reg_ppiten_pp1_it6, ap_reg_ppiten_pp1_it7, ap_reg_ppstg_exitcond8_reg_1142_pp1_it6)
    begin
        if ((((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it7) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_1142_pp1_it6)))) then 
            p_buffer_we0 <= ap_const_logic_1;
        else 
            p_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_s_fu_954_p3 <= 
        ap_const_lv32_1 when (tmp_8_fu_949_p2(0) = '1') else 
        count_reg_1295;
    p_shl_cast_fu_793_p1 <= std_logic_vector(resize(unsigned(p_shl_fu_785_p3),7));
    p_shl_fu_785_p3 <= (tmp_35_fu_770_p1 & ap_const_lv2_0);
    tmp_10_cast_fu_712_p1 <= std_logic_vector(resize(unsigned(b_reg_491),33));
    tmp_10_fu_932_p2 <= std_logic_vector(unsigned(tmp_17_fu_926_p2) - unsigned(i5_phi_fu_566_p4));
    tmp_11_cast_fu_721_p1 <= std_logic_vector(resize(unsigned(tmp_11_fu_716_p2),64));
    tmp_11_fu_716_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_1128) + unsigned(tmp_10_cast_fu_712_p1));
    tmp_12_fu_981_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_tmp_10_reg_1279_pp4_it17),64));
    tmp_13_fu_938_p2 <= "1" when (i5_phi_fu_566_p4 = k0data_reg) else "0";
    tmp_14_fu_1005_p4 <= centres_out_addr0data_reg(31 downto 2);
    tmp_15_fu_1029_p2 <= std_logic_vector(unsigned(tmp_18_fu_1024_p2) - unsigned(k0data_reg));
    tmp_16_fu_1040_p2 <= std_logic_vector(unsigned(tmp_23_fu_1034_p2) + unsigned(ap_const_lv32_C));
    tmp_17_fu_926_p2 <= std_logic_vector(shift_left(unsigned(i5_phi_fu_566_p4),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_18_fu_1024_p2 <= std_logic_vector(shift_left(unsigned(k0data_reg),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_19_fu_780_p1 <= std_logic_vector(resize(unsigned(tmp_36_fu_774_p2),64));
    tmp_20_fu_834_p3 <= (tmp_35_reg_1188 & ap_const_lv1_1);
    tmp_21_fu_841_p1 <= std_logic_vector(resize(unsigned(tmp_20_fu_834_p3),64));
    tmp_22_fu_797_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_793_p1) - unsigned(i1_cast2_fu_766_p1));
    tmp_23_fu_1034_p2 <= std_logic_vector(shift_left(unsigned(tmp_15_fu_1029_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_24_fu_1056_p1 <= std_logic_vector(resize(unsigned(tmp_39_add_i32_shr_fu_1046_p4),32));
    tmp_25_1_fu_985_p2 <= std_logic_vector(unsigned(ap_reg_ppstg_tmp_10_reg_1279_pp4_it17) + unsigned(ap_const_lv32_1));
    tmp_25_2_fu_995_p2 <= std_logic_vector(unsigned(ap_reg_ppstg_tmp_10_reg_1279_pp4_it18) + unsigned(ap_const_lv32_2));
    tmp_25_fu_701_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar_reg_515_pp1_it6),64));
    tmp_26_1_fu_990_p1 <= std_logic_vector(resize(unsigned(tmp_25_1_fu_985_p2),64));
    tmp_26_2_fu_1000_p1 <= std_logic_vector(resize(unsigned(tmp_25_2_fu_995_p2),64));
    tmp_26_fu_1071_p1 <= std_logic_vector(resize(unsigned(indvar1_reg_585),64));
    tmp_27_fu_860_p1 <= std_logic_vector(resize(unsigned(i_buffer_q0),64));
    tmp_28_fu_827_p1 <= std_logic_vector(resize(unsigned(i1_reg_539),64));
    tmp_29_1_fu_812_p2 <= std_logic_vector(unsigned(tmp_22_fu_797_p2) + unsigned(ap_const_lv7_1));
    tmp_29_2_fu_846_p2 <= std_logic_vector(unsigned(tmp_22_reg_1198) + unsigned(ap_const_lv7_2));
    tmp_29_cast_fu_1014_p1 <= std_logic_vector(resize(unsigned(tmp_14_fu_1005_p4),64));
    tmp_2_fu_619_p1 <= std_logic_vector(resize(unsigned(i_reg_480),64));
    
    tmp_29_1_fu_812_p2_temp <= signed(tmp_29_1_fu_812_p2);
    tmp_30_1_fu_822_p0 <= std_logic_vector(resize(tmp_29_1_fu_812_p2_temp,32));

    tmp_30_1_fu_822_p1 <= std_logic_vector(resize(unsigned(tmp_30_1_fu_822_p0),64));
    
    tmp_29_2_fu_846_p2_temp <= signed(tmp_29_2_fu_846_p2);
    tmp_30_2_fu_855_p0 <= std_logic_vector(resize(tmp_29_2_fu_846_p2_temp,32));

    tmp_30_2_fu_855_p1 <= std_logic_vector(resize(unsigned(tmp_30_2_fu_855_p0),64));
    
    tmp_22_fu_797_p2_temp <= signed(tmp_22_fu_797_p2);
    tmp_30_fu_807_p0 <= std_logic_vector(resize(tmp_22_fu_797_p2_temp,32));

    tmp_30_fu_807_p1 <= std_logic_vector(resize(unsigned(tmp_30_fu_807_p0),64));
    tmp_31_fu_882_p2 <= std_logic_vector(unsigned(centre_buffer_count_q0) + unsigned(ap_const_lv32_1));
    tmp_32_fu_889_p2 <= std_logic_vector(unsigned(centre_buffer_sum_sq_q0) + unsigned(i_buffer_q0));
    tmp_33_fu_868_p2 <= std_logic_vector(unsigned(p_buffer_q0) + unsigned(centre_buffer_0_wgtCent_value_q0));
    tmp_34_fu_749_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar2_reg_527_pp2_it6),64));
    tmp_35_fu_770_p1 <= i1_reg_539(4 - 1 downto 0);
    tmp_36_fu_774_p2 <= std_logic_vector(shift_left(unsigned(i1_reg_539),to_integer(unsigned('0' & ap_const_lv5_1(5-1 downto 0)))));
    tmp_39_add_i32_shr_fu_1046_p4 <= tmp_16_fu_1040_p2(31 downto 2);
    tmp_3_fu_659_p2 <= "1" when (unsigned(b_reg_491) > unsigned(lim_reg_1118)) else "0";
    tmp_44_1_fu_875_p2 <= std_logic_vector(unsigned(p_buffer_q1) + unsigned(centre_buffer_1_wgtCent_value_q0));
    tmp_44_2_fu_896_p2 <= std_logic_vector(unsigned(p_buffer_q1) + unsigned(reg_603));
    tmp_5_cast_fu_642_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_633_p4),33));
    tmp_5_fu_633_p4 <= data_points_in_addr0data_reg(31 downto 2);
    tmp_6_cast_fu_664_p1 <= std_logic_vector(resize(unsigned(b2_reg_503),33));
    tmp_6_fu_920_p1 <= std_logic_vector(resize(unsigned(i5_phi_fu_566_p4),64));
    tmp_7_cast_fu_673_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_668_p2),64));
    tmp_7_fu_668_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_1123) + unsigned(tmp_6_cast_fu_664_p1));
    tmp_8_fu_949_p2 <= "1" when (count_reg_1295 = ap_const_lv32_0) else "0";
    tmp_9_cast_fu_655_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_646_p4),33));
    tmp_9_fu_646_p4 <= kernel_info_in_addr0data_reg(31 downto 2);
    tmp_s_fu_909_p2 <= "1" when (unsigned(i5_phi_fu_566_p4) > unsigned(k0data_reg)) else "0";
    total_distortion_2_fu_943_p2 <= std_logic_vector(unsigned(centre_buffer_sum_sq_q0) + unsigned(total_distortion_reg_550));

    -- total_distortion_phi_fu_554_p4 assign process. --
    total_distortion_phi_fu_554_p4_assign_proc : process(ap_CS_fsm, total_distortion_reg_550, ap_reg_ppiten_pp4_it1, tmp_s_reg_1258, tmp_13_reg_1291, total_distortion_2_reg_1316)
    begin
        if (((ap_ST_pp4_stg0_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it1) and (ap_const_lv1_0 = tmp_s_reg_1258) and (ap_const_lv1_0 = tmp_13_reg_1291))) then 
            total_distortion_phi_fu_554_p4 <= total_distortion_2_reg_1316;
        else 
            total_distortion_phi_fu_554_p4 <= total_distortion_reg_550;
        end if; 
    end process;

end behav;
