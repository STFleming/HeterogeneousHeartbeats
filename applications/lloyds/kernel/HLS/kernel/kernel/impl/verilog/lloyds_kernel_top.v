// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lloyds_kernel_top,hls_ip_2013_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=178,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module lloyds_kernel_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        block_address,
        master_portA_req_din,
        master_portA_req_full_n,
        master_portA_req_write,
        master_portA_rsp_empty_n,
        master_portA_rsp_read,
        master_portA_address,
        master_portA_datain,
        master_portA_dataout,
        master_portA_size,
        master_portB_req_din,
        master_portB_req_full_n,
        master_portB_req_write,
        master_portB_rsp_empty_n,
        master_portB_rsp_read,
        master_portB_address,
        master_portB_datain,
        master_portB_dataout,
        master_portB_size,
        data_points_addr,
        centres_in_addr,
        output_addr,
        update_points,
        n,
        k
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] block_address;
output   master_portA_req_din;
input   master_portA_req_full_n;
output   master_portA_req_write;
input   master_portA_rsp_empty_n;
output   master_portA_rsp_read;
output  [31:0] master_portA_address;
input  [31:0] master_portA_datain;
output  [31:0] master_portA_dataout;
output  [31:0] master_portA_size;
output   master_portB_req_din;
input   master_portB_req_full_n;
output   master_portB_req_write;
input   master_portB_rsp_empty_n;
output   master_portB_rsp_read;
output  [31:0] master_portB_address;
input  [31:0] master_portB_datain;
output  [31:0] master_portB_dataout;
output  [31:0] master_portB_size;
input  [31:0] data_points_addr;
input  [31:0] centres_in_addr;
input  [31:0] output_addr;
input  [31:0] update_points;
input  [31:0] n;
input  [31:0] k;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg master_portA_req_din;
reg master_portA_req_write;
reg master_portA_rsp_read;
reg[31:0] master_portA_address;
reg[31:0] master_portA_dataout;
reg[31:0] master_portA_size;
reg   [2:0] ap_CS_fsm = 3'b000;
reg   [31:0] block_address0data_reg = 32'b00000000000000000000000000000000;
reg    block_address0vld_reg = 1'b0;
reg    block_address0ack_out;
reg   [31:0] data_points_addr0data_reg = 32'b00000000000000000000000000000000;
reg    data_points_addr0vld_reg = 1'b0;
reg    data_points_addr0ack_out;
reg   [31:0] output_addr0data_reg = 32'b00000000000000000000000000000000;
reg    output_addr0vld_reg = 1'b0;
reg    output_addr0ack_out;
wire   [31:0] data_points_block_address_fu_113_p2;
reg   [31:0] data_points_block_address_reg_130;
wire   [3:0] data_points_buffer_0_value_address0;
reg    data_points_buffer_0_value_ce0;
reg    data_points_buffer_0_value_we0;
wire   [31:0] data_points_buffer_0_value_d0;
wire   [3:0] data_points_buffer_1_value_address0;
reg    data_points_buffer_1_value_ce0;
reg    data_points_buffer_1_value_we0;
wire   [31:0] data_points_buffer_1_value_d0;
wire   [3:0] data_points_buffer_2_value_address0;
reg    data_points_buffer_2_value_ce0;
reg    data_points_buffer_2_value_we0;
wire   [31:0] data_points_buffer_2_value_d0;
wire    grp_load_points_buffer_fu_87_ap_start;
wire    grp_load_points_buffer_fu_87_ap_done;
wire    grp_load_points_buffer_fu_87_ap_idle;
wire    grp_load_points_buffer_fu_87_ap_ready;
wire   [31:0] grp_load_points_buffer_fu_87_offset;
wire   [31:0] grp_load_points_buffer_fu_87_address;
wire    grp_load_points_buffer_fu_87_bus_r_req_din;
wire    grp_load_points_buffer_fu_87_bus_r_req_full_n;
wire    grp_load_points_buffer_fu_87_bus_r_req_write;
wire    grp_load_points_buffer_fu_87_bus_r_rsp_empty_n;
wire    grp_load_points_buffer_fu_87_bus_r_rsp_read;
wire   [31:0] grp_load_points_buffer_fu_87_bus_r_address;
wire   [31:0] grp_load_points_buffer_fu_87_bus_r_datain;
wire   [31:0] grp_load_points_buffer_fu_87_bus_r_dataout;
wire   [31:0] grp_load_points_buffer_fu_87_bus_r_size;
wire   [3:0] grp_load_points_buffer_fu_87_buffer_0_value_address0;
wire    grp_load_points_buffer_fu_87_buffer_0_value_ce0;
wire    grp_load_points_buffer_fu_87_buffer_0_value_we0;
wire   [31:0] grp_load_points_buffer_fu_87_buffer_0_value_d0;
wire   [3:0] grp_load_points_buffer_fu_87_buffer_1_value_address0;
wire    grp_load_points_buffer_fu_87_buffer_1_value_ce0;
wire    grp_load_points_buffer_fu_87_buffer_1_value_we0;
wire   [31:0] grp_load_points_buffer_fu_87_buffer_1_value_d0;
wire   [3:0] grp_load_points_buffer_fu_87_buffer_2_value_address0;
wire    grp_load_points_buffer_fu_87_buffer_2_value_ce0;
wire    grp_load_points_buffer_fu_87_buffer_2_value_we0;
wire   [31:0] grp_load_points_buffer_fu_87_buffer_2_value_d0;
wire    grp_store_output_points_buffer_fu_99_ap_start;
wire    grp_store_output_points_buffer_fu_99_ap_done;
wire    grp_store_output_points_buffer_fu_99_ap_idle;
wire    grp_store_output_points_buffer_fu_99_ap_ready;
wire   [31:0] grp_store_output_points_buffer_fu_99_offset;
wire   [31:0] grp_store_output_points_buffer_fu_99_address;
wire    grp_store_output_points_buffer_fu_99_bus_r_req_din;
wire    grp_store_output_points_buffer_fu_99_bus_r_req_full_n;
wire    grp_store_output_points_buffer_fu_99_bus_r_req_write;
wire    grp_store_output_points_buffer_fu_99_bus_r_rsp_empty_n;
wire    grp_store_output_points_buffer_fu_99_bus_r_rsp_read;
wire   [31:0] grp_store_output_points_buffer_fu_99_bus_r_address;
wire   [31:0] grp_store_output_points_buffer_fu_99_bus_r_datain;
wire   [31:0] grp_store_output_points_buffer_fu_99_bus_r_dataout;
wire   [31:0] grp_store_output_points_buffer_fu_99_bus_r_size;
reg    grp_load_points_buffer_fu_87_ap_start_ap_start_reg = 1'b0;
reg    grp_store_output_points_buffer_fu_99_ap_start_ap_start_reg = 1'b0;
wire   [31:0] tmp_fu_107_p2;
reg   [2:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b000;
parameter    ap_ST_st2_fsm_1 = 3'b1;
parameter    ap_ST_st3_fsm_2 = 3'b10;
parameter    ap_ST_st4_fsm_3 = 3'b11;
parameter    ap_ST_st5_fsm_4 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_true = 1'b1;


lloyds_kernel_top_data_points_buffer_0_value #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
data_points_buffer_0_value_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( data_points_buffer_0_value_address0 ),
    .ce0( data_points_buffer_0_value_ce0 ),
    .we0( data_points_buffer_0_value_we0 ),
    .d0( data_points_buffer_0_value_d0 )
);

lloyds_kernel_top_data_points_buffer_0_value #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
data_points_buffer_1_value_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( data_points_buffer_1_value_address0 ),
    .ce0( data_points_buffer_1_value_ce0 ),
    .we0( data_points_buffer_1_value_we0 ),
    .d0( data_points_buffer_1_value_d0 )
);

lloyds_kernel_top_data_points_buffer_0_value #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
data_points_buffer_2_value_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( data_points_buffer_2_value_address0 ),
    .ce0( data_points_buffer_2_value_ce0 ),
    .we0( data_points_buffer_2_value_we0 ),
    .d0( data_points_buffer_2_value_d0 )
);

load_points_buffer grp_load_points_buffer_fu_87(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_load_points_buffer_fu_87_ap_start ),
    .ap_done( grp_load_points_buffer_fu_87_ap_done ),
    .ap_idle( grp_load_points_buffer_fu_87_ap_idle ),
    .ap_ready( grp_load_points_buffer_fu_87_ap_ready ),
    .offset( grp_load_points_buffer_fu_87_offset ),
    .address( grp_load_points_buffer_fu_87_address ),
    .bus_r_req_din( grp_load_points_buffer_fu_87_bus_r_req_din ),
    .bus_r_req_full_n( grp_load_points_buffer_fu_87_bus_r_req_full_n ),
    .bus_r_req_write( grp_load_points_buffer_fu_87_bus_r_req_write ),
    .bus_r_rsp_empty_n( grp_load_points_buffer_fu_87_bus_r_rsp_empty_n ),
    .bus_r_rsp_read( grp_load_points_buffer_fu_87_bus_r_rsp_read ),
    .bus_r_address( grp_load_points_buffer_fu_87_bus_r_address ),
    .bus_r_datain( grp_load_points_buffer_fu_87_bus_r_datain ),
    .bus_r_dataout( grp_load_points_buffer_fu_87_bus_r_dataout ),
    .bus_r_size( grp_load_points_buffer_fu_87_bus_r_size ),
    .buffer_0_value_address0( grp_load_points_buffer_fu_87_buffer_0_value_address0 ),
    .buffer_0_value_ce0( grp_load_points_buffer_fu_87_buffer_0_value_ce0 ),
    .buffer_0_value_we0( grp_load_points_buffer_fu_87_buffer_0_value_we0 ),
    .buffer_0_value_d0( grp_load_points_buffer_fu_87_buffer_0_value_d0 ),
    .buffer_1_value_address0( grp_load_points_buffer_fu_87_buffer_1_value_address0 ),
    .buffer_1_value_ce0( grp_load_points_buffer_fu_87_buffer_1_value_ce0 ),
    .buffer_1_value_we0( grp_load_points_buffer_fu_87_buffer_1_value_we0 ),
    .buffer_1_value_d0( grp_load_points_buffer_fu_87_buffer_1_value_d0 ),
    .buffer_2_value_address0( grp_load_points_buffer_fu_87_buffer_2_value_address0 ),
    .buffer_2_value_ce0( grp_load_points_buffer_fu_87_buffer_2_value_ce0 ),
    .buffer_2_value_we0( grp_load_points_buffer_fu_87_buffer_2_value_we0 ),
    .buffer_2_value_d0( grp_load_points_buffer_fu_87_buffer_2_value_d0 )
);

store_output_points_buffer grp_store_output_points_buffer_fu_99(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_store_output_points_buffer_fu_99_ap_start ),
    .ap_done( grp_store_output_points_buffer_fu_99_ap_done ),
    .ap_idle( grp_store_output_points_buffer_fu_99_ap_idle ),
    .ap_ready( grp_store_output_points_buffer_fu_99_ap_ready ),
    .offset( grp_store_output_points_buffer_fu_99_offset ),
    .address( grp_store_output_points_buffer_fu_99_address ),
    .bus_r_req_din( grp_store_output_points_buffer_fu_99_bus_r_req_din ),
    .bus_r_req_full_n( grp_store_output_points_buffer_fu_99_bus_r_req_full_n ),
    .bus_r_req_write( grp_store_output_points_buffer_fu_99_bus_r_req_write ),
    .bus_r_rsp_empty_n( grp_store_output_points_buffer_fu_99_bus_r_rsp_empty_n ),
    .bus_r_rsp_read( grp_store_output_points_buffer_fu_99_bus_r_rsp_read ),
    .bus_r_address( grp_store_output_points_buffer_fu_99_bus_r_address ),
    .bus_r_datain( grp_store_output_points_buffer_fu_99_bus_r_datain ),
    .bus_r_dataout( grp_store_output_points_buffer_fu_99_bus_r_dataout ),
    .bus_r_size( grp_store_output_points_buffer_fu_99_bus_r_size )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// block_address0data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_block_address0data_reg
    if (ap_rst == 1'b1) begin
        block_address0data_reg <= ap_const_lv32_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == ap_const_logic_1) & (ap_const_logic_0 == block_address0vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == ap_const_logic_1) & (ap_const_logic_1 == block_address0vld_reg) & (ap_const_logic_1 == block_address0ack_out)))) begin
            block_address0data_reg <= block_address;
        end
    end
end

/// data_points_addr0data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_data_points_addr0data_reg
    if (ap_rst == 1'b1) begin
        data_points_addr0data_reg <= ap_const_lv32_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == ap_const_logic_1) & (ap_const_logic_0 == data_points_addr0vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == ap_const_logic_1) & (ap_const_logic_1 == data_points_addr0vld_reg) & (ap_const_logic_1 == data_points_addr0ack_out)))) begin
            data_points_addr0data_reg <= data_points_addr;
        end
    end
end

/// grp_load_points_buffer_fu_87_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_load_points_buffer_fu_87_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_load_points_buffer_fu_87_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
            grp_load_points_buffer_fu_87_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_load_points_buffer_fu_87_ap_ready)) begin
            grp_load_points_buffer_fu_87_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// grp_store_output_points_buffer_fu_99_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_store_output_points_buffer_fu_99_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_store_output_points_buffer_fu_99_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
            grp_store_output_points_buffer_fu_99_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_store_output_points_buffer_fu_99_ap_ready)) begin
            grp_store_output_points_buffer_fu_99_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// output_addr0data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_output_addr0data_reg
    if (ap_rst == 1'b1) begin
        output_addr0data_reg <= ap_const_lv32_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == ap_const_logic_1) & (ap_const_logic_0 == output_addr0vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == ap_const_logic_1) & (ap_const_logic_1 == output_addr0vld_reg) & (ap_const_logic_1 == output_addr0ack_out)))) begin
            output_addr0data_reg <= output_addr;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        data_points_block_address_reg_130 <= data_points_block_address_fu_113_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or grp_store_output_points_buffer_fu_99_ap_done)
begin
    if (((ap_ST_st5_fsm_4 == ap_CS_fsm) & ~(ap_const_logic_0 == grp_store_output_points_buffer_fu_99_ap_done))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or grp_store_output_points_buffer_fu_99_ap_done)
begin
    if (((ap_ST_st5_fsm_4 == ap_CS_fsm) & ~(ap_const_logic_0 == grp_store_output_points_buffer_fu_99_ap_done))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// block_address0ack_out assign process. ///
always @ (ap_CS_fsm or grp_store_output_points_buffer_fu_99_ap_done)
begin
    if (((ap_ST_st5_fsm_4 == ap_CS_fsm) & ~(ap_const_logic_0 == grp_store_output_points_buffer_fu_99_ap_done))) begin
        block_address0ack_out = ap_const_logic_1;
    end else begin
        block_address0ack_out = ap_const_logic_0;
    end
end

/// data_points_addr0ack_out assign process. ///
always @ (ap_CS_fsm or grp_store_output_points_buffer_fu_99_ap_done)
begin
    if (((ap_ST_st5_fsm_4 == ap_CS_fsm) & ~(ap_const_logic_0 == grp_store_output_points_buffer_fu_99_ap_done))) begin
        data_points_addr0ack_out = ap_const_logic_1;
    end else begin
        data_points_addr0ack_out = ap_const_logic_0;
    end
end

/// data_points_buffer_0_value_ce0 assign process. ///
always @ (ap_CS_fsm or grp_load_points_buffer_fu_87_buffer_0_value_ce0)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        data_points_buffer_0_value_ce0 = grp_load_points_buffer_fu_87_buffer_0_value_ce0;
    end else begin
        data_points_buffer_0_value_ce0 = ap_const_logic_0;
    end
end

/// data_points_buffer_0_value_we0 assign process. ///
always @ (ap_CS_fsm or grp_load_points_buffer_fu_87_buffer_0_value_we0)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        data_points_buffer_0_value_we0 = grp_load_points_buffer_fu_87_buffer_0_value_we0;
    end else begin
        data_points_buffer_0_value_we0 = ap_const_logic_0;
    end
end

/// data_points_buffer_1_value_ce0 assign process. ///
always @ (ap_CS_fsm or grp_load_points_buffer_fu_87_buffer_1_value_ce0)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        data_points_buffer_1_value_ce0 = grp_load_points_buffer_fu_87_buffer_1_value_ce0;
    end else begin
        data_points_buffer_1_value_ce0 = ap_const_logic_0;
    end
end

/// data_points_buffer_1_value_we0 assign process. ///
always @ (ap_CS_fsm or grp_load_points_buffer_fu_87_buffer_1_value_we0)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        data_points_buffer_1_value_we0 = grp_load_points_buffer_fu_87_buffer_1_value_we0;
    end else begin
        data_points_buffer_1_value_we0 = ap_const_logic_0;
    end
end

/// data_points_buffer_2_value_ce0 assign process. ///
always @ (ap_CS_fsm or grp_load_points_buffer_fu_87_buffer_2_value_ce0)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        data_points_buffer_2_value_ce0 = grp_load_points_buffer_fu_87_buffer_2_value_ce0;
    end else begin
        data_points_buffer_2_value_ce0 = ap_const_logic_0;
    end
end

/// data_points_buffer_2_value_we0 assign process. ///
always @ (ap_CS_fsm or grp_load_points_buffer_fu_87_buffer_2_value_we0)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        data_points_buffer_2_value_we0 = grp_load_points_buffer_fu_87_buffer_2_value_we0;
    end else begin
        data_points_buffer_2_value_we0 = ap_const_logic_0;
    end
end

/// master_portA_address assign process. ///
always @ (ap_CS_fsm or grp_load_points_buffer_fu_87_ap_idle or grp_load_points_buffer_fu_87_bus_r_address or grp_store_output_points_buffer_fu_99_ap_idle or grp_store_output_points_buffer_fu_99_bus_r_address)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) | ((ap_ST_st5_fsm_4 == ap_CS_fsm) & (ap_const_logic_0 == grp_store_output_points_buffer_fu_99_ap_idle)))) begin
        master_portA_address = grp_store_output_points_buffer_fu_99_bus_r_address;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) | ((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_logic_0 == grp_load_points_buffer_fu_87_ap_idle)))) begin
        master_portA_address = grp_load_points_buffer_fu_87_bus_r_address;
    end else begin
        master_portA_address = 'bx;
    end
end

/// master_portA_dataout assign process. ///
always @ (ap_CS_fsm or grp_load_points_buffer_fu_87_ap_idle or grp_load_points_buffer_fu_87_bus_r_dataout or grp_store_output_points_buffer_fu_99_ap_idle or grp_store_output_points_buffer_fu_99_bus_r_dataout)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) | ((ap_ST_st5_fsm_4 == ap_CS_fsm) & (ap_const_logic_0 == grp_store_output_points_buffer_fu_99_ap_idle)))) begin
        master_portA_dataout = grp_store_output_points_buffer_fu_99_bus_r_dataout;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) | ((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_logic_0 == grp_load_points_buffer_fu_87_ap_idle)))) begin
        master_portA_dataout = grp_load_points_buffer_fu_87_bus_r_dataout;
    end else begin
        master_portA_dataout = 'bx;
    end
end

/// master_portA_req_din assign process. ///
always @ (ap_CS_fsm or grp_load_points_buffer_fu_87_ap_idle or grp_load_points_buffer_fu_87_bus_r_req_din or grp_store_output_points_buffer_fu_99_ap_idle or grp_store_output_points_buffer_fu_99_bus_r_req_din)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) | ((ap_ST_st5_fsm_4 == ap_CS_fsm) & (ap_const_logic_0 == grp_store_output_points_buffer_fu_99_ap_idle)))) begin
        master_portA_req_din = grp_store_output_points_buffer_fu_99_bus_r_req_din;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) | ((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_logic_0 == grp_load_points_buffer_fu_87_ap_idle)))) begin
        master_portA_req_din = grp_load_points_buffer_fu_87_bus_r_req_din;
    end else begin
        master_portA_req_din = 'bx;
    end
end

/// master_portA_req_write assign process. ///
always @ (ap_CS_fsm or grp_load_points_buffer_fu_87_ap_idle or grp_load_points_buffer_fu_87_bus_r_req_write or grp_store_output_points_buffer_fu_99_ap_idle or grp_store_output_points_buffer_fu_99_bus_r_req_write)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) | ((ap_ST_st5_fsm_4 == ap_CS_fsm) & (ap_const_logic_0 == grp_store_output_points_buffer_fu_99_ap_idle)))) begin
        master_portA_req_write = grp_store_output_points_buffer_fu_99_bus_r_req_write;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) | ((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_logic_0 == grp_load_points_buffer_fu_87_ap_idle)))) begin
        master_portA_req_write = grp_load_points_buffer_fu_87_bus_r_req_write;
    end else begin
        master_portA_req_write = 'bx;
    end
end

/// master_portA_rsp_read assign process. ///
always @ (ap_CS_fsm or grp_load_points_buffer_fu_87_ap_idle or grp_load_points_buffer_fu_87_bus_r_rsp_read or grp_store_output_points_buffer_fu_99_ap_idle or grp_store_output_points_buffer_fu_99_bus_r_rsp_read)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) | ((ap_ST_st5_fsm_4 == ap_CS_fsm) & (ap_const_logic_0 == grp_store_output_points_buffer_fu_99_ap_idle)))) begin
        master_portA_rsp_read = grp_store_output_points_buffer_fu_99_bus_r_rsp_read;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) | ((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_logic_0 == grp_load_points_buffer_fu_87_ap_idle)))) begin
        master_portA_rsp_read = grp_load_points_buffer_fu_87_bus_r_rsp_read;
    end else begin
        master_portA_rsp_read = 'bx;
    end
end

/// master_portA_size assign process. ///
always @ (ap_CS_fsm or grp_load_points_buffer_fu_87_ap_idle or grp_load_points_buffer_fu_87_bus_r_size or grp_store_output_points_buffer_fu_99_ap_idle or grp_store_output_points_buffer_fu_99_bus_r_size)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) | ((ap_ST_st5_fsm_4 == ap_CS_fsm) & (ap_const_logic_0 == grp_store_output_points_buffer_fu_99_ap_idle)))) begin
        master_portA_size = grp_store_output_points_buffer_fu_99_bus_r_size;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) | ((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_logic_0 == grp_load_points_buffer_fu_87_ap_idle)))) begin
        master_portA_size = grp_load_points_buffer_fu_87_bus_r_size;
    end else begin
        master_portA_size = 'bx;
    end
end

/// output_addr0ack_out assign process. ///
always @ (ap_CS_fsm or grp_store_output_points_buffer_fu_99_ap_done)
begin
    if (((ap_ST_st5_fsm_4 == ap_CS_fsm) & ~(ap_const_logic_0 == grp_store_output_points_buffer_fu_99_ap_done))) begin
        output_addr0ack_out = ap_const_logic_1;
    end else begin
        output_addr0ack_out = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or grp_load_points_buffer_fu_87_ap_done or grp_store_output_points_buffer_fu_99_ap_done)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
        ap_ST_st3_fsm_2 : 
            if (~(ap_const_logic_0 == grp_load_points_buffer_fu_87_ap_done)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        ap_ST_st4_fsm_3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
        ap_ST_st5_fsm_4 : 
            if (~(ap_const_logic_0 == grp_store_output_points_buffer_fu_99_ap_done)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign data_points_block_address_fu_113_p2 = (tmp_fu_107_p2 - block_address0data_reg);
assign data_points_buffer_0_value_address0 = grp_load_points_buffer_fu_87_buffer_0_value_address0;
assign data_points_buffer_0_value_d0 = grp_load_points_buffer_fu_87_buffer_0_value_d0;
assign data_points_buffer_1_value_address0 = grp_load_points_buffer_fu_87_buffer_1_value_address0;
assign data_points_buffer_1_value_d0 = grp_load_points_buffer_fu_87_buffer_1_value_d0;
assign data_points_buffer_2_value_address0 = grp_load_points_buffer_fu_87_buffer_2_value_address0;
assign data_points_buffer_2_value_d0 = grp_load_points_buffer_fu_87_buffer_2_value_d0;
assign grp_load_points_buffer_fu_87_address = data_points_block_address_reg_130;
assign grp_load_points_buffer_fu_87_ap_start = grp_load_points_buffer_fu_87_ap_start_ap_start_reg;
assign grp_load_points_buffer_fu_87_bus_r_datain = master_portA_datain;
assign grp_load_points_buffer_fu_87_bus_r_req_full_n = master_portA_req_full_n;
assign grp_load_points_buffer_fu_87_bus_r_rsp_empty_n = master_portA_rsp_empty_n;
assign grp_load_points_buffer_fu_87_offset = data_points_addr0data_reg;
assign grp_store_output_points_buffer_fu_99_address = data_points_block_address_reg_130;
assign grp_store_output_points_buffer_fu_99_ap_start = grp_store_output_points_buffer_fu_99_ap_start_ap_start_reg;
assign grp_store_output_points_buffer_fu_99_bus_r_datain = master_portA_datain;
assign grp_store_output_points_buffer_fu_99_bus_r_req_full_n = master_portA_req_full_n;
assign grp_store_output_points_buffer_fu_99_bus_r_rsp_empty_n = master_portA_rsp_empty_n;
assign grp_store_output_points_buffer_fu_99_offset = output_addr0data_reg;
assign master_portB_address = ap_const_lv32_0;
assign master_portB_dataout = ap_const_lv32_0;
assign master_portB_req_din = ap_const_logic_0;
assign master_portB_req_write = ap_const_logic_0;
assign master_portB_rsp_read = ap_const_logic_0;
assign master_portB_size = ap_const_lv32_0;
assign tmp_fu_107_p2 = block_address0data_reg << ap_const_lv32_2;
always @ (posedge ap_clk)
begin
    block_address0vld_reg <= 1'b0;
    data_points_addr0vld_reg <= 1'b0;
    output_addr0vld_reg <= 1'b0;
end



endmodule //lloyds_kernel_top

