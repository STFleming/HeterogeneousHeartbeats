-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lloyds_kernel_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    block_address : IN STD_LOGIC_VECTOR (31 downto 0);
    master_portA_req_din : OUT STD_LOGIC;
    master_portA_req_full_n : IN STD_LOGIC;
    master_portA_req_write : OUT STD_LOGIC;
    master_portA_rsp_empty_n : IN STD_LOGIC;
    master_portA_rsp_read : OUT STD_LOGIC;
    master_portA_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    master_portA_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    master_portA_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    master_portA_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    master_portB_req_din : OUT STD_LOGIC;
    master_portB_req_full_n : IN STD_LOGIC;
    master_portB_req_write : OUT STD_LOGIC;
    master_portB_rsp_empty_n : IN STD_LOGIC;
    master_portB_rsp_read : OUT STD_LOGIC;
    master_portB_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    master_portB_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    master_portB_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    master_portB_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_points_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    centres_in_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    output_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    update_points : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    k : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of lloyds_kernel_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lloyds_kernel_top,hls_ip_2013_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=178,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal block_address0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal block_address0vld_reg : STD_LOGIC := '0';
    signal block_address0ack_out : STD_LOGIC;
    signal data_points_addr0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal data_points_addr0vld_reg : STD_LOGIC := '0';
    signal data_points_addr0ack_out : STD_LOGIC;
    signal output_addr0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal output_addr0vld_reg : STD_LOGIC := '0';
    signal output_addr0ack_out : STD_LOGIC;
    signal data_points_block_address_fu_113_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_points_block_address_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_points_buffer_0_value_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal data_points_buffer_0_value_ce0 : STD_LOGIC;
    signal data_points_buffer_0_value_we0 : STD_LOGIC;
    signal data_points_buffer_0_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_points_buffer_1_value_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal data_points_buffer_1_value_ce0 : STD_LOGIC;
    signal data_points_buffer_1_value_we0 : STD_LOGIC;
    signal data_points_buffer_1_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_points_buffer_2_value_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal data_points_buffer_2_value_ce0 : STD_LOGIC;
    signal data_points_buffer_2_value_we0 : STD_LOGIC;
    signal data_points_buffer_2_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_points_buffer_fu_87_ap_start : STD_LOGIC;
    signal grp_load_points_buffer_fu_87_ap_done : STD_LOGIC;
    signal grp_load_points_buffer_fu_87_ap_idle : STD_LOGIC;
    signal grp_load_points_buffer_fu_87_ap_ready : STD_LOGIC;
    signal grp_load_points_buffer_fu_87_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_points_buffer_fu_87_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_points_buffer_fu_87_bus_r_req_din : STD_LOGIC;
    signal grp_load_points_buffer_fu_87_bus_r_req_full_n : STD_LOGIC;
    signal grp_load_points_buffer_fu_87_bus_r_req_write : STD_LOGIC;
    signal grp_load_points_buffer_fu_87_bus_r_rsp_empty_n : STD_LOGIC;
    signal grp_load_points_buffer_fu_87_bus_r_rsp_read : STD_LOGIC;
    signal grp_load_points_buffer_fu_87_bus_r_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_points_buffer_fu_87_bus_r_datain : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_points_buffer_fu_87_bus_r_dataout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_points_buffer_fu_87_bus_r_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_points_buffer_fu_87_buffer_0_value_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_points_buffer_fu_87_buffer_0_value_ce0 : STD_LOGIC;
    signal grp_load_points_buffer_fu_87_buffer_0_value_we0 : STD_LOGIC;
    signal grp_load_points_buffer_fu_87_buffer_0_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_points_buffer_fu_87_buffer_1_value_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_points_buffer_fu_87_buffer_1_value_ce0 : STD_LOGIC;
    signal grp_load_points_buffer_fu_87_buffer_1_value_we0 : STD_LOGIC;
    signal grp_load_points_buffer_fu_87_buffer_1_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_points_buffer_fu_87_buffer_2_value_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_points_buffer_fu_87_buffer_2_value_ce0 : STD_LOGIC;
    signal grp_load_points_buffer_fu_87_buffer_2_value_we0 : STD_LOGIC;
    signal grp_load_points_buffer_fu_87_buffer_2_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_points_buffer_fu_99_ap_start : STD_LOGIC;
    signal grp_store_output_points_buffer_fu_99_ap_done : STD_LOGIC;
    signal grp_store_output_points_buffer_fu_99_ap_idle : STD_LOGIC;
    signal grp_store_output_points_buffer_fu_99_ap_ready : STD_LOGIC;
    signal grp_store_output_points_buffer_fu_99_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_points_buffer_fu_99_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_points_buffer_fu_99_bus_r_req_din : STD_LOGIC;
    signal grp_store_output_points_buffer_fu_99_bus_r_req_full_n : STD_LOGIC;
    signal grp_store_output_points_buffer_fu_99_bus_r_req_write : STD_LOGIC;
    signal grp_store_output_points_buffer_fu_99_bus_r_rsp_empty_n : STD_LOGIC;
    signal grp_store_output_points_buffer_fu_99_bus_r_rsp_read : STD_LOGIC;
    signal grp_store_output_points_buffer_fu_99_bus_r_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_points_buffer_fu_99_bus_r_datain : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_points_buffer_fu_99_bus_r_dataout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_points_buffer_fu_99_bus_r_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_points_buffer_fu_87_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_store_output_points_buffer_fu_99_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_fu_107_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component load_points_buffer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        offset : IN STD_LOGIC_VECTOR (31 downto 0);
        address : IN STD_LOGIC_VECTOR (31 downto 0);
        bus_r_req_din : OUT STD_LOGIC;
        bus_r_req_full_n : IN STD_LOGIC;
        bus_r_req_write : OUT STD_LOGIC;
        bus_r_rsp_empty_n : IN STD_LOGIC;
        bus_r_rsp_read : OUT STD_LOGIC;
        bus_r_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        bus_r_datain : IN STD_LOGIC_VECTOR (31 downto 0);
        bus_r_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
        bus_r_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_0_value_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_0_value_ce0 : OUT STD_LOGIC;
        buffer_0_value_we0 : OUT STD_LOGIC;
        buffer_0_value_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_1_value_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_1_value_ce0 : OUT STD_LOGIC;
        buffer_1_value_we0 : OUT STD_LOGIC;
        buffer_1_value_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_2_value_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_2_value_ce0 : OUT STD_LOGIC;
        buffer_2_value_we0 : OUT STD_LOGIC;
        buffer_2_value_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component store_output_points_buffer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        offset : IN STD_LOGIC_VECTOR (31 downto 0);
        address : IN STD_LOGIC_VECTOR (31 downto 0);
        bus_r_req_din : OUT STD_LOGIC;
        bus_r_req_full_n : IN STD_LOGIC;
        bus_r_req_write : OUT STD_LOGIC;
        bus_r_rsp_empty_n : IN STD_LOGIC;
        bus_r_rsp_read : OUT STD_LOGIC;
        bus_r_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        bus_r_datain : IN STD_LOGIC_VECTOR (31 downto 0);
        bus_r_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
        bus_r_size : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lloyds_kernel_top_data_points_buffer_0_value IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    data_points_buffer_0_value_U : component lloyds_kernel_top_data_points_buffer_0_value
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_points_buffer_0_value_address0,
        ce0 => data_points_buffer_0_value_ce0,
        we0 => data_points_buffer_0_value_we0,
        d0 => data_points_buffer_0_value_d0);

    data_points_buffer_1_value_U : component lloyds_kernel_top_data_points_buffer_0_value
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_points_buffer_1_value_address0,
        ce0 => data_points_buffer_1_value_ce0,
        we0 => data_points_buffer_1_value_we0,
        d0 => data_points_buffer_1_value_d0);

    data_points_buffer_2_value_U : component lloyds_kernel_top_data_points_buffer_0_value
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_points_buffer_2_value_address0,
        ce0 => data_points_buffer_2_value_ce0,
        we0 => data_points_buffer_2_value_we0,
        d0 => data_points_buffer_2_value_d0);

    grp_load_points_buffer_fu_87 : component load_points_buffer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_load_points_buffer_fu_87_ap_start,
        ap_done => grp_load_points_buffer_fu_87_ap_done,
        ap_idle => grp_load_points_buffer_fu_87_ap_idle,
        ap_ready => grp_load_points_buffer_fu_87_ap_ready,
        offset => grp_load_points_buffer_fu_87_offset,
        address => grp_load_points_buffer_fu_87_address,
        bus_r_req_din => grp_load_points_buffer_fu_87_bus_r_req_din,
        bus_r_req_full_n => grp_load_points_buffer_fu_87_bus_r_req_full_n,
        bus_r_req_write => grp_load_points_buffer_fu_87_bus_r_req_write,
        bus_r_rsp_empty_n => grp_load_points_buffer_fu_87_bus_r_rsp_empty_n,
        bus_r_rsp_read => grp_load_points_buffer_fu_87_bus_r_rsp_read,
        bus_r_address => grp_load_points_buffer_fu_87_bus_r_address,
        bus_r_datain => grp_load_points_buffer_fu_87_bus_r_datain,
        bus_r_dataout => grp_load_points_buffer_fu_87_bus_r_dataout,
        bus_r_size => grp_load_points_buffer_fu_87_bus_r_size,
        buffer_0_value_address0 => grp_load_points_buffer_fu_87_buffer_0_value_address0,
        buffer_0_value_ce0 => grp_load_points_buffer_fu_87_buffer_0_value_ce0,
        buffer_0_value_we0 => grp_load_points_buffer_fu_87_buffer_0_value_we0,
        buffer_0_value_d0 => grp_load_points_buffer_fu_87_buffer_0_value_d0,
        buffer_1_value_address0 => grp_load_points_buffer_fu_87_buffer_1_value_address0,
        buffer_1_value_ce0 => grp_load_points_buffer_fu_87_buffer_1_value_ce0,
        buffer_1_value_we0 => grp_load_points_buffer_fu_87_buffer_1_value_we0,
        buffer_1_value_d0 => grp_load_points_buffer_fu_87_buffer_1_value_d0,
        buffer_2_value_address0 => grp_load_points_buffer_fu_87_buffer_2_value_address0,
        buffer_2_value_ce0 => grp_load_points_buffer_fu_87_buffer_2_value_ce0,
        buffer_2_value_we0 => grp_load_points_buffer_fu_87_buffer_2_value_we0,
        buffer_2_value_d0 => grp_load_points_buffer_fu_87_buffer_2_value_d0);

    grp_store_output_points_buffer_fu_99 : component store_output_points_buffer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_store_output_points_buffer_fu_99_ap_start,
        ap_done => grp_store_output_points_buffer_fu_99_ap_done,
        ap_idle => grp_store_output_points_buffer_fu_99_ap_idle,
        ap_ready => grp_store_output_points_buffer_fu_99_ap_ready,
        offset => grp_store_output_points_buffer_fu_99_offset,
        address => grp_store_output_points_buffer_fu_99_address,
        bus_r_req_din => grp_store_output_points_buffer_fu_99_bus_r_req_din,
        bus_r_req_full_n => grp_store_output_points_buffer_fu_99_bus_r_req_full_n,
        bus_r_req_write => grp_store_output_points_buffer_fu_99_bus_r_req_write,
        bus_r_rsp_empty_n => grp_store_output_points_buffer_fu_99_bus_r_rsp_empty_n,
        bus_r_rsp_read => grp_store_output_points_buffer_fu_99_bus_r_rsp_read,
        bus_r_address => grp_store_output_points_buffer_fu_99_bus_r_address,
        bus_r_datain => grp_store_output_points_buffer_fu_99_bus_r_datain,
        bus_r_dataout => grp_store_output_points_buffer_fu_99_bus_r_dataout,
        bus_r_size => grp_store_output_points_buffer_fu_99_bus_r_size);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- block_address0data_reg assign process. --
    block_address0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                block_address0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = block_address0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = block_address0vld_reg) and (ap_const_logic_1 = block_address0ack_out)))) then 
                    block_address0data_reg <= block_address;
                end if; 
            end if;
        end if;
    end process;


    -- block_address0vld_reg assign process. --
    block_address0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- data_points_addr0data_reg assign process. --
    data_points_addr0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                data_points_addr0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = data_points_addr0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = data_points_addr0vld_reg) and (ap_const_logic_1 = data_points_addr0ack_out)))) then 
                    data_points_addr0data_reg <= data_points_addr;
                end if; 
            end if;
        end if;
    end process;


    -- data_points_addr0vld_reg assign process. --
    data_points_addr0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- grp_load_points_buffer_fu_87_ap_start_ap_start_reg assign process. --
    grp_load_points_buffer_fu_87_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_load_points_buffer_fu_87_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
                    grp_load_points_buffer_fu_87_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_load_points_buffer_fu_87_ap_ready)) then 
                    grp_load_points_buffer_fu_87_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_store_output_points_buffer_fu_99_ap_start_ap_start_reg assign process. --
    grp_store_output_points_buffer_fu_99_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_store_output_points_buffer_fu_99_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                    grp_store_output_points_buffer_fu_99_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_store_output_points_buffer_fu_99_ap_ready)) then 
                    grp_store_output_points_buffer_fu_99_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- output_addr0data_reg assign process. --
    output_addr0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_addr0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = output_addr0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = output_addr0vld_reg) and (ap_const_logic_1 = output_addr0ack_out)))) then 
                    output_addr0data_reg <= output_addr;
                end if; 
            end if;
        end if;
    end process;


    -- output_addr0vld_reg assign process. --
    output_addr0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                data_points_block_address_reg_130 <= data_points_block_address_fu_113_p2;
            end if;
        end if;
    end process;
    block_address0vld_reg <= '0';
    data_points_addr0vld_reg <= '0';
    output_addr0vld_reg <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , grp_load_points_buffer_fu_87_ap_done , grp_store_output_points_buffer_fu_99_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = grp_load_points_buffer_fu_87_ap_done))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_logic_0 = grp_store_output_points_buffer_fu_99_ap_done))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, grp_store_output_points_buffer_fu_99_ap_done)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_logic_0 = grp_store_output_points_buffer_fu_99_ap_done)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, grp_store_output_points_buffer_fu_99_ap_done)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_logic_0 = grp_store_output_points_buffer_fu_99_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- block_address0ack_out assign process. --
    block_address0ack_out_assign_proc : process(ap_CS_fsm, grp_store_output_points_buffer_fu_99_ap_done)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_logic_0 = grp_store_output_points_buffer_fu_99_ap_done)))) then 
            block_address0ack_out <= ap_const_logic_1;
        else 
            block_address0ack_out <= ap_const_logic_0;
        end if; 
    end process;


    -- data_points_addr0ack_out assign process. --
    data_points_addr0ack_out_assign_proc : process(ap_CS_fsm, grp_store_output_points_buffer_fu_99_ap_done)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_logic_0 = grp_store_output_points_buffer_fu_99_ap_done)))) then 
            data_points_addr0ack_out <= ap_const_logic_1;
        else 
            data_points_addr0ack_out <= ap_const_logic_0;
        end if; 
    end process;

    data_points_block_address_fu_113_p2 <= std_logic_vector(unsigned(tmp_fu_107_p2) - unsigned(block_address0data_reg));
    data_points_buffer_0_value_address0 <= grp_load_points_buffer_fu_87_buffer_0_value_address0;

    -- data_points_buffer_0_value_ce0 assign process. --
    data_points_buffer_0_value_ce0_assign_proc : process(ap_CS_fsm, grp_load_points_buffer_fu_87_buffer_0_value_ce0)
    begin
        if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            data_points_buffer_0_value_ce0 <= grp_load_points_buffer_fu_87_buffer_0_value_ce0;
        else 
            data_points_buffer_0_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_points_buffer_0_value_d0 <= grp_load_points_buffer_fu_87_buffer_0_value_d0;

    -- data_points_buffer_0_value_we0 assign process. --
    data_points_buffer_0_value_we0_assign_proc : process(ap_CS_fsm, grp_load_points_buffer_fu_87_buffer_0_value_we0)
    begin
        if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            data_points_buffer_0_value_we0 <= grp_load_points_buffer_fu_87_buffer_0_value_we0;
        else 
            data_points_buffer_0_value_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_points_buffer_1_value_address0 <= grp_load_points_buffer_fu_87_buffer_1_value_address0;

    -- data_points_buffer_1_value_ce0 assign process. --
    data_points_buffer_1_value_ce0_assign_proc : process(ap_CS_fsm, grp_load_points_buffer_fu_87_buffer_1_value_ce0)
    begin
        if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            data_points_buffer_1_value_ce0 <= grp_load_points_buffer_fu_87_buffer_1_value_ce0;
        else 
            data_points_buffer_1_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_points_buffer_1_value_d0 <= grp_load_points_buffer_fu_87_buffer_1_value_d0;

    -- data_points_buffer_1_value_we0 assign process. --
    data_points_buffer_1_value_we0_assign_proc : process(ap_CS_fsm, grp_load_points_buffer_fu_87_buffer_1_value_we0)
    begin
        if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            data_points_buffer_1_value_we0 <= grp_load_points_buffer_fu_87_buffer_1_value_we0;
        else 
            data_points_buffer_1_value_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_points_buffer_2_value_address0 <= grp_load_points_buffer_fu_87_buffer_2_value_address0;

    -- data_points_buffer_2_value_ce0 assign process. --
    data_points_buffer_2_value_ce0_assign_proc : process(ap_CS_fsm, grp_load_points_buffer_fu_87_buffer_2_value_ce0)
    begin
        if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            data_points_buffer_2_value_ce0 <= grp_load_points_buffer_fu_87_buffer_2_value_ce0;
        else 
            data_points_buffer_2_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_points_buffer_2_value_d0 <= grp_load_points_buffer_fu_87_buffer_2_value_d0;

    -- data_points_buffer_2_value_we0 assign process. --
    data_points_buffer_2_value_we0_assign_proc : process(ap_CS_fsm, grp_load_points_buffer_fu_87_buffer_2_value_we0)
    begin
        if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            data_points_buffer_2_value_we0 <= grp_load_points_buffer_fu_87_buffer_2_value_we0;
        else 
            data_points_buffer_2_value_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_load_points_buffer_fu_87_address <= data_points_block_address_reg_130;
    grp_load_points_buffer_fu_87_ap_start <= grp_load_points_buffer_fu_87_ap_start_ap_start_reg;
    grp_load_points_buffer_fu_87_bus_r_datain <= master_portA_datain;
    grp_load_points_buffer_fu_87_bus_r_req_full_n <= master_portA_req_full_n;
    grp_load_points_buffer_fu_87_bus_r_rsp_empty_n <= master_portA_rsp_empty_n;
    grp_load_points_buffer_fu_87_offset <= data_points_addr0data_reg;
    grp_store_output_points_buffer_fu_99_address <= data_points_block_address_reg_130;
    grp_store_output_points_buffer_fu_99_ap_start <= grp_store_output_points_buffer_fu_99_ap_start_ap_start_reg;
    grp_store_output_points_buffer_fu_99_bus_r_datain <= master_portA_datain;
    grp_store_output_points_buffer_fu_99_bus_r_req_full_n <= master_portA_req_full_n;
    grp_store_output_points_buffer_fu_99_bus_r_rsp_empty_n <= master_portA_rsp_empty_n;
    grp_store_output_points_buffer_fu_99_offset <= output_addr0data_reg;

    -- master_portA_address assign process. --
    master_portA_address_assign_proc : process(ap_CS_fsm, grp_load_points_buffer_fu_87_ap_idle, grp_load_points_buffer_fu_87_bus_r_address, grp_store_output_points_buffer_fu_99_ap_idle, grp_store_output_points_buffer_fu_99_bus_r_address)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_99_ap_idle)))) then 
            master_portA_address <= grp_store_output_points_buffer_fu_99_bus_r_address;
        elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = grp_load_points_buffer_fu_87_ap_idle)))) then 
            master_portA_address <= grp_load_points_buffer_fu_87_bus_r_address;
        else 
            master_portA_address <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- master_portA_dataout assign process. --
    master_portA_dataout_assign_proc : process(ap_CS_fsm, grp_load_points_buffer_fu_87_ap_idle, grp_load_points_buffer_fu_87_bus_r_dataout, grp_store_output_points_buffer_fu_99_ap_idle, grp_store_output_points_buffer_fu_99_bus_r_dataout)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_99_ap_idle)))) then 
            master_portA_dataout <= grp_store_output_points_buffer_fu_99_bus_r_dataout;
        elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = grp_load_points_buffer_fu_87_ap_idle)))) then 
            master_portA_dataout <= grp_load_points_buffer_fu_87_bus_r_dataout;
        else 
            master_portA_dataout <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- master_portA_req_din assign process. --
    master_portA_req_din_assign_proc : process(ap_CS_fsm, grp_load_points_buffer_fu_87_ap_idle, grp_load_points_buffer_fu_87_bus_r_req_din, grp_store_output_points_buffer_fu_99_ap_idle, grp_store_output_points_buffer_fu_99_bus_r_req_din)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_99_ap_idle)))) then 
            master_portA_req_din <= grp_store_output_points_buffer_fu_99_bus_r_req_din;
        elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = grp_load_points_buffer_fu_87_ap_idle)))) then 
            master_portA_req_din <= grp_load_points_buffer_fu_87_bus_r_req_din;
        else 
            master_portA_req_din <= 'X';
        end if; 
    end process;


    -- master_portA_req_write assign process. --
    master_portA_req_write_assign_proc : process(ap_CS_fsm, grp_load_points_buffer_fu_87_ap_idle, grp_load_points_buffer_fu_87_bus_r_req_write, grp_store_output_points_buffer_fu_99_ap_idle, grp_store_output_points_buffer_fu_99_bus_r_req_write)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_99_ap_idle)))) then 
            master_portA_req_write <= grp_store_output_points_buffer_fu_99_bus_r_req_write;
        elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = grp_load_points_buffer_fu_87_ap_idle)))) then 
            master_portA_req_write <= grp_load_points_buffer_fu_87_bus_r_req_write;
        else 
            master_portA_req_write <= 'X';
        end if; 
    end process;


    -- master_portA_rsp_read assign process. --
    master_portA_rsp_read_assign_proc : process(ap_CS_fsm, grp_load_points_buffer_fu_87_ap_idle, grp_load_points_buffer_fu_87_bus_r_rsp_read, grp_store_output_points_buffer_fu_99_ap_idle, grp_store_output_points_buffer_fu_99_bus_r_rsp_read)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_99_ap_idle)))) then 
            master_portA_rsp_read <= grp_store_output_points_buffer_fu_99_bus_r_rsp_read;
        elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = grp_load_points_buffer_fu_87_ap_idle)))) then 
            master_portA_rsp_read <= grp_load_points_buffer_fu_87_bus_r_rsp_read;
        else 
            master_portA_rsp_read <= 'X';
        end if; 
    end process;


    -- master_portA_size assign process. --
    master_portA_size_assign_proc : process(ap_CS_fsm, grp_load_points_buffer_fu_87_ap_idle, grp_load_points_buffer_fu_87_bus_r_size, grp_store_output_points_buffer_fu_99_ap_idle, grp_store_output_points_buffer_fu_99_bus_r_size)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_99_ap_idle)))) then 
            master_portA_size <= grp_store_output_points_buffer_fu_99_bus_r_size;
        elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = grp_load_points_buffer_fu_87_ap_idle)))) then 
            master_portA_size <= grp_load_points_buffer_fu_87_bus_r_size;
        else 
            master_portA_size <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    master_portB_address <= ap_const_lv32_0;
    master_portB_dataout <= ap_const_lv32_0;
    master_portB_req_din <= ap_const_logic_0;
    master_portB_req_write <= ap_const_logic_0;
    master_portB_rsp_read <= ap_const_logic_0;
    master_portB_size <= ap_const_lv32_0;

    -- output_addr0ack_out assign process. --
    output_addr0ack_out_assign_proc : process(ap_CS_fsm, grp_store_output_points_buffer_fu_99_ap_done)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_logic_0 = grp_store_output_points_buffer_fu_99_ap_done)))) then 
            output_addr0ack_out <= ap_const_logic_1;
        else 
            output_addr0ack_out <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_107_p2 <= std_logic_vector(shift_left(unsigned(block_address0data_reg),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
end behav;
