-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_centres_buffer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    offset : IN STD_LOGIC_VECTOR (31 downto 0);
    bus_r_req_din : OUT STD_LOGIC;
    bus_r_req_full_n : IN STD_LOGIC;
    bus_r_req_write : OUT STD_LOGIC;
    bus_r_rsp_empty_n : IN STD_LOGIC;
    bus_r_rsp_read : OUT STD_LOGIC;
    bus_r_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    bus_r_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    bus_r_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    bus_r_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    k_V : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer_0_value_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_0_value_ce0 : OUT STD_LOGIC;
    buffer_0_value_we0 : OUT STD_LOGIC;
    buffer_0_value_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_1_value_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_1_value_ce0 : OUT STD_LOGIC;
    buffer_1_value_we0 : OUT STD_LOGIC;
    buffer_1_value_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_2_value_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_2_value_ce0 : OUT STD_LOGIC;
    buffer_2_value_we0 : OUT STD_LOGIC;
    buffer_2_value_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of load_centres_buffer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp1_stg0_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_pp1_stg1_fsm_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_ST_st13_fsm_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_F : STD_LOGIC_VECTOR (12 downto 0) := "0000000001111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal indvar_reg_193 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_reg_ppstg_indvar_reg_193_pp0_it1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal exitcond3_reg_406 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond3_reg_406_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_79 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppstg_indvar_reg_193_pp0_it2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_reg_ppstg_indvar_reg_193_pp0_it3 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_reg_ppstg_indvar_reg_193_pp0_it4 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_reg_ppstg_indvar_reg_193_pp0_it5 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_reg_ppstg_indvar_reg_193_pp0_it6 : STD_LOGIC_VECTOR (29 downto 0);
    signal t_V_reg_205 : STD_LOGIC_VECTOR (7 downto 0);
    signal bus_addr_reg_390 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_add_i32_shr_fu_284_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_1_fu_274_p4_temp: signed (11-1 downto 0);
    signal tmp_6_add_i32_shr_reg_396 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_6_add_i32_shr_cast_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_add_i32_shr_cast_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond3_reg_406_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond3_reg_406_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond3_reg_406_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond3_reg_406_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond3_reg_406_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_297_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_next_reg_410 : STD_LOGIC_VECTOR (29 downto 0);
    signal isIter0_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isIter0_reg_415 : STD_LOGIC_VECTOR (0 downto 0);
    signal bus_addr_read_reg_419 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_424 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal i_V_fu_319_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_reg_428 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_341_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_reg_433 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_448 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_452 : STD_LOGIC_VECTOR (63 downto 0);
    signal int_buffer_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal int_buffer_ce0 : STD_LOGIC;
    signal int_buffer_we0 : STD_LOGIC;
    signal int_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal int_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal int_buffer_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal int_buffer_ce1 : STD_LOGIC;
    signal int_buffer_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_phi_fu_197_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal t_V_phi_fu_209_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_cast_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_341_p2_temp: signed (11-1 downto 0);
    signal tmp_12_1_cast_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_1_fu_352_p2_temp: signed (11-1 downto 0);
    signal tmp_12_2_cast_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_2_fu_374_p2_temp: signed (11-1 downto 0);
    signal tmp_2_cast_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_218_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_shl_fu_238_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_fu_250_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_246_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl1_cast_fu_258_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_fu_262_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_add_i_fu_268_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_fu_274_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_add_i32_shr_cast_fu_288_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_shl2_fu_329_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_337_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_cast1_fu_325_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_1_fu_352_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_2_fu_374_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component load_centres_buffer_int_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    int_buffer_U : component load_centres_buffer_int_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => int_buffer_address0,
        ce0 => int_buffer_ce0,
        we0 => int_buffer_we0,
        d0 => int_buffer_d0,
        q0 => int_buffer_q0,
        address1 => int_buffer_address1,
        ce1 => int_buffer_ce1,
        q1 => int_buffer_q1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and not((ap_const_lv1_0 = exitcond3_fu_292_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and (ap_const_lv1_0 = exitcond3_fu_292_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or ((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and not((ap_const_lv1_0 = exitcond3_fu_292_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg1_fsm_3 = ap_CS_fsm) and (not((ap_const_lv1_0 = tmp_7_reg_424)) or ((ap_const_lv1_0 = tmp_7_reg_424) and not((ap_const_lv1_0 = tmp_10_reg_448)))))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and not((ap_const_lv1_0 = exitcond3_fu_292_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg1_fsm_3 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it1 <= ap_reg_ppiten_pp1_it0;
                elsif (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and not((ap_const_lv1_0 = exitcond3_fu_292_p2)))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- indvar_reg_193 assign process. --
    indvar_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                indvar_reg_193 <= ap_const_lv30_0;
            elsif (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and (exitcond3_reg_406 = ap_const_lv1_0))) then 
                indvar_reg_193 <= indvar_next_reg_410;
            end if; 
        end if;
    end process;

    -- t_V_reg_205 assign process. --
    t_V_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and not((ap_const_lv1_0 = exitcond3_fu_292_p2)))) then 
                t_V_reg_205 <= ap_const_lv8_0;
            elsif (((ap_ST_pp1_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = tmp_7_reg_424) and (ap_const_lv1_0 = tmp_10_reg_448))) then 
                t_V_reg_205 <= i_V_reg_428;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then
                ap_reg_ppstg_exitcond3_reg_406_pp0_it1 <= exitcond3_reg_406;
                ap_reg_ppstg_exitcond3_reg_406_pp0_it2 <= ap_reg_ppstg_exitcond3_reg_406_pp0_it1;
                ap_reg_ppstg_exitcond3_reg_406_pp0_it3 <= ap_reg_ppstg_exitcond3_reg_406_pp0_it2;
                ap_reg_ppstg_exitcond3_reg_406_pp0_it4 <= ap_reg_ppstg_exitcond3_reg_406_pp0_it3;
                ap_reg_ppstg_exitcond3_reg_406_pp0_it5 <= ap_reg_ppstg_exitcond3_reg_406_pp0_it4;
                ap_reg_ppstg_exitcond3_reg_406_pp0_it6 <= ap_reg_ppstg_exitcond3_reg_406_pp0_it5;
                ap_reg_ppstg_indvar_reg_193_pp0_it1 <= indvar_reg_193;
                ap_reg_ppstg_indvar_reg_193_pp0_it2 <= ap_reg_ppstg_indvar_reg_193_pp0_it1;
                ap_reg_ppstg_indvar_reg_193_pp0_it3 <= ap_reg_ppstg_indvar_reg_193_pp0_it2;
                ap_reg_ppstg_indvar_reg_193_pp0_it4 <= ap_reg_ppstg_indvar_reg_193_pp0_it3;
                ap_reg_ppstg_indvar_reg_193_pp0_it5 <= ap_reg_ppstg_indvar_reg_193_pp0_it4;
                ap_reg_ppstg_indvar_reg_193_pp0_it6 <= ap_reg_ppstg_indvar_reg_193_pp0_it5;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_reg_ppstg_exitcond3_reg_406_pp0_it5 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then
                bus_addr_read_reg_419 <= bus_r_datain;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then
                bus_addr_reg_390(0) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(0);
    bus_addr_reg_390(1) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(1);
    bus_addr_reg_390(2) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(2);
    bus_addr_reg_390(3) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(3);
    bus_addr_reg_390(4) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(4);
    bus_addr_reg_390(5) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(5);
    bus_addr_reg_390(6) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(6);
    bus_addr_reg_390(7) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(7);
    bus_addr_reg_390(8) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(8);
    bus_addr_reg_390(9) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(9);
    bus_addr_reg_390(10) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(10);
    bus_addr_reg_390(11) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(11);
    bus_addr_reg_390(12) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(12);
    bus_addr_reg_390(13) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(13);
    bus_addr_reg_390(14) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(14);
    bus_addr_reg_390(15) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(15);
    bus_addr_reg_390(16) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(16);
    bus_addr_reg_390(17) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(17);
    bus_addr_reg_390(18) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(18);
    bus_addr_reg_390(19) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(19);
    bus_addr_reg_390(20) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(20);
    bus_addr_reg_390(21) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(21);
    bus_addr_reg_390(22) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(22);
    bus_addr_reg_390(23) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(23);
    bus_addr_reg_390(24) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(24);
    bus_addr_reg_390(25) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(25);
    bus_addr_reg_390(26) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(26);
    bus_addr_reg_390(27) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(27);
    bus_addr_reg_390(28) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(28);
    bus_addr_reg_390(29) <= tmp_2_cast_fu_228_p1(32 - 1 downto 0)(29);
                tmp_6_add_i32_shr_cast_reg_401(0) <= tmp_6_add_i32_shr_cast_fu_288_p1(0);
    tmp_6_add_i32_shr_cast_reg_401(1) <= tmp_6_add_i32_shr_cast_fu_288_p1(1);
    tmp_6_add_i32_shr_cast_reg_401(2) <= tmp_6_add_i32_shr_cast_fu_288_p1(2);
    tmp_6_add_i32_shr_cast_reg_401(3) <= tmp_6_add_i32_shr_cast_fu_288_p1(3);
    tmp_6_add_i32_shr_cast_reg_401(4) <= tmp_6_add_i32_shr_cast_fu_288_p1(4);
    tmp_6_add_i32_shr_cast_reg_401(5) <= tmp_6_add_i32_shr_cast_fu_288_p1(5);
    tmp_6_add_i32_shr_cast_reg_401(6) <= tmp_6_add_i32_shr_cast_fu_288_p1(6);
    tmp_6_add_i32_shr_cast_reg_401(7) <= tmp_6_add_i32_shr_cast_fu_288_p1(7);
    tmp_6_add_i32_shr_cast_reg_401(8) <= tmp_6_add_i32_shr_cast_fu_288_p1(8);
    tmp_6_add_i32_shr_cast_reg_401(9) <= tmp_6_add_i32_shr_cast_fu_288_p1(9);
    tmp_6_add_i32_shr_cast_reg_401(10) <= tmp_6_add_i32_shr_cast_fu_288_p1(10);
    tmp_6_add_i32_shr_cast_reg_401(11) <= tmp_6_add_i32_shr_cast_fu_288_p1(11);
    tmp_6_add_i32_shr_cast_reg_401(12) <= tmp_6_add_i32_shr_cast_fu_288_p1(12);
    tmp_6_add_i32_shr_cast_reg_401(13) <= tmp_6_add_i32_shr_cast_fu_288_p1(13);
    tmp_6_add_i32_shr_cast_reg_401(14) <= tmp_6_add_i32_shr_cast_fu_288_p1(14);
    tmp_6_add_i32_shr_cast_reg_401(15) <= tmp_6_add_i32_shr_cast_fu_288_p1(15);
    tmp_6_add_i32_shr_cast_reg_401(16) <= tmp_6_add_i32_shr_cast_fu_288_p1(16);
    tmp_6_add_i32_shr_cast_reg_401(17) <= tmp_6_add_i32_shr_cast_fu_288_p1(17);
    tmp_6_add_i32_shr_cast_reg_401(18) <= tmp_6_add_i32_shr_cast_fu_288_p1(18);
    tmp_6_add_i32_shr_cast_reg_401(19) <= tmp_6_add_i32_shr_cast_fu_288_p1(19);
    tmp_6_add_i32_shr_cast_reg_401(20) <= tmp_6_add_i32_shr_cast_fu_288_p1(20);
    tmp_6_add_i32_shr_cast_reg_401(21) <= tmp_6_add_i32_shr_cast_fu_288_p1(21);
    tmp_6_add_i32_shr_cast_reg_401(22) <= tmp_6_add_i32_shr_cast_fu_288_p1(22);
    tmp_6_add_i32_shr_cast_reg_401(23) <= tmp_6_add_i32_shr_cast_fu_288_p1(23);
    tmp_6_add_i32_shr_cast_reg_401(24) <= tmp_6_add_i32_shr_cast_fu_288_p1(24);
    tmp_6_add_i32_shr_cast_reg_401(25) <= tmp_6_add_i32_shr_cast_fu_288_p1(25);
    tmp_6_add_i32_shr_cast_reg_401(26) <= tmp_6_add_i32_shr_cast_fu_288_p1(26);
    tmp_6_add_i32_shr_cast_reg_401(27) <= tmp_6_add_i32_shr_cast_fu_288_p1(27);
    tmp_6_add_i32_shr_cast_reg_401(28) <= tmp_6_add_i32_shr_cast_fu_288_p1(28);
    tmp_6_add_i32_shr_cast_reg_401(29) <= tmp_6_add_i32_shr_cast_fu_288_p1(29);
                tmp_6_add_i32_shr_reg_396 <= tmp_6_add_i32_shr_fu_284_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then
                exitcond3_reg_406 <= exitcond3_fu_292_p2;
                indvar_next_reg_410 <= indvar_next_fu_297_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then
                i_V_reg_428 <= i_V_fu_319_p2;
                tmp_7_reg_424 <= tmp_7_fu_314_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and (ap_const_lv1_0 = exitcond3_fu_292_p2))) then
                isIter0_reg_415 <= isIter0_fu_303_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = tmp_7_fu_314_p2))) then
                tmp_10_reg_448 <= tmp_10_fu_363_p2;
                tmp_9_reg_433 <= tmp_9_fu_341_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_ST_pp1_stg1_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_7_reg_424))) then
                tmp_8_reg_452(0) <= tmp_8_fu_368_p1(0);
    tmp_8_reg_452(1) <= tmp_8_fu_368_p1(1);
    tmp_8_reg_452(2) <= tmp_8_fu_368_p1(2);
    tmp_8_reg_452(3) <= tmp_8_fu_368_p1(3);
    tmp_8_reg_452(4) <= tmp_8_fu_368_p1(4);
    tmp_8_reg_452(5) <= tmp_8_fu_368_p1(5);
    tmp_8_reg_452(6) <= tmp_8_fu_368_p1(6);
    tmp_8_reg_452(7) <= tmp_8_fu_368_p1(7);
            end if;
        end if;
    end process;
    bus_addr_reg_390(31 downto 30) <= "00";
    tmp_6_add_i32_shr_cast_reg_401(31 downto 30) <= "00";
    tmp_8_reg_452(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , ap_reg_ppiten_pp0_it0 , ap_reg_ppiten_pp0_it1 , ap_sig_bdd_79 , ap_reg_ppiten_pp0_it6 , ap_reg_ppiten_pp0_it7 , exitcond3_fu_292_p2 , ap_reg_ppiten_pp1_it0 , ap_reg_ppiten_pp1_it1)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and not((ap_const_lv1_0 = exitcond3_fu_292_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif ((((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and not((ap_const_lv1_0 = exitcond3_fu_292_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_pp1_stg0_fsm_2 => 
                if (not(((ap_ST_pp1_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it0))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg1_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_4;
                end if;
            when ap_ST_pp1_stg1_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp1_stg0_fsm_2;
            when ap_ST_st13_fsm_4 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or (ap_ST_st13_fsm_4 = ap_CS_fsm))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st13_fsm_4 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_79 assign process. --
    ap_sig_bdd_79_assign_proc : process(bus_r_rsp_empty_n, ap_reg_ppstg_exitcond3_reg_406_pp0_it5)
    begin
                ap_sig_bdd_79 <= ((bus_r_rsp_empty_n = ap_const_logic_0) and (ap_reg_ppstg_exitcond3_reg_406_pp0_it5 = ap_const_lv1_0));
    end process;

    buffer_0_value_address0 <= tmp_8_fu_368_p1(8 - 1 downto 0);

    -- buffer_0_value_ce0 assign process. --
    buffer_0_value_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it0)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_ST_pp1_stg1_fsm_3 = ap_CS_fsm))) then 
            buffer_0_value_ce0 <= ap_const_logic_1;
        else 
            buffer_0_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_0_value_d0 <= int_buffer_q0;

    -- buffer_0_value_we0 assign process. --
    buffer_0_value_we0_assign_proc : process(ap_CS_fsm, tmp_7_reg_424, ap_reg_ppiten_pp1_it0)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_ST_pp1_stg1_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_7_reg_424)))) then 
            buffer_0_value_we0 <= ap_const_logic_1;
        else 
            buffer_0_value_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_1_value_address0 <= tmp_8_fu_368_p1(8 - 1 downto 0);

    -- buffer_1_value_ce0 assign process. --
    buffer_1_value_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it0)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_ST_pp1_stg1_fsm_3 = ap_CS_fsm))) then 
            buffer_1_value_ce0 <= ap_const_logic_1;
        else 
            buffer_1_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_1_value_d0 <= int_buffer_q1;

    -- buffer_1_value_we0 assign process. --
    buffer_1_value_we0_assign_proc : process(ap_CS_fsm, tmp_7_reg_424, ap_reg_ppiten_pp1_it0)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_ST_pp1_stg1_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_7_reg_424)))) then 
            buffer_1_value_we0 <= ap_const_logic_1;
        else 
            buffer_1_value_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_2_value_address0 <= tmp_8_reg_452(8 - 1 downto 0);

    -- buffer_2_value_ce0 assign process. --
    buffer_2_value_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_ST_pp1_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            buffer_2_value_ce0 <= ap_const_logic_1;
        else 
            buffer_2_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_2_value_d0 <= int_buffer_q1;

    -- buffer_2_value_we0 assign process. --
    buffer_2_value_we0_assign_proc : process(ap_CS_fsm, tmp_7_reg_424, ap_reg_ppiten_pp1_it1)
    begin
        if ((((ap_ST_pp1_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = tmp_7_reg_424)))) then 
            buffer_2_value_we0 <= ap_const_logic_1;
        else 
            buffer_2_value_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bus_r_address <= bus_addr_reg_390;
    bus_r_dataout <= ap_const_lv32_0;
    bus_r_req_din <= ap_const_logic_0;

    -- bus_r_req_write assign process. --
    bus_r_req_write_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it1, exitcond3_reg_406, ap_sig_bdd_79, ap_reg_ppiten_pp0_it6, isIter0_reg_415)
    begin
        if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and (exitcond3_reg_406 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_415)))) then 
            bus_r_req_write <= ap_const_logic_1;
        else 
            bus_r_req_write <= ap_const_logic_0;
        end if; 
    end process;


    -- bus_r_rsp_read assign process. --
    bus_r_rsp_read_assign_proc : process(ap_CS_fsm, ap_reg_ppstg_exitcond3_reg_406_pp0_it5, ap_sig_bdd_79, ap_reg_ppiten_pp0_it6)
    begin
        if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_reg_ppstg_exitcond3_reg_406_pp0_it5 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
            bus_r_rsp_read <= ap_const_logic_1;
        else 
            bus_r_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    bus_r_size <= tmp_6_add_i32_shr_cast_reg_401;
    exitcond3_fu_292_p2 <= "1" when (indvar_phi_fu_197_p4 = tmp_6_add_i32_shr_reg_396) else "0";
    i_V_fu_319_p2 <= std_logic_vector(unsigned(t_V_phi_fu_209_p4) + unsigned(ap_const_lv8_1));
    indvar_next_fu_297_p2 <= std_logic_vector(unsigned(indvar_phi_fu_197_p4) + unsigned(ap_const_lv30_1));

    -- indvar_phi_fu_197_p4 assign process. --
    indvar_phi_fu_197_p4_assign_proc : process(ap_CS_fsm, indvar_reg_193, ap_reg_ppiten_pp0_it1, exitcond3_reg_406, indvar_next_reg_410)
    begin
        if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond3_reg_406 = ap_const_lv1_0))) then 
            indvar_phi_fu_197_p4 <= indvar_next_reg_410;
        else 
            indvar_phi_fu_197_p4 <= indvar_reg_193;
        end if; 
    end process;


    -- int_buffer_address0 assign process. --
    int_buffer_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp1_it0, tmp_s_fu_309_p1, tmp_9_cast_fu_347_p1)
    begin
        if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7))) then 
            int_buffer_address0 <= tmp_s_fu_309_p1(10 - 1 downto 0);
        elsif (((ap_ST_pp1_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            int_buffer_address0 <= tmp_9_cast_fu_347_p1(10 - 1 downto 0);
        else 
            int_buffer_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- int_buffer_address1 assign process. --
    int_buffer_address1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it0, tmp_12_1_cast_fu_358_p1, tmp_12_2_cast_fu_379_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) then
            if ((ap_ST_pp1_stg1_fsm_3 = ap_CS_fsm)) then 
                int_buffer_address1 <= tmp_12_2_cast_fu_379_p1(10 - 1 downto 0);
            elsif ((ap_ST_pp1_stg0_fsm_2 = ap_CS_fsm)) then 
                int_buffer_address1 <= tmp_12_1_cast_fu_358_p1(10 - 1 downto 0);
            else 
                int_buffer_address1 <= "XXXXXXXXXX";
            end if;
        else 
            int_buffer_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- int_buffer_ce0 assign process. --
    int_buffer_ce0_assign_proc : process(ap_CS_fsm, ap_sig_bdd_79, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp1_it0)
    begin
        if ((((ap_ST_pp1_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or ((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
            int_buffer_ce0 <= ap_const_logic_1;
        else 
            int_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- int_buffer_ce1 assign process. --
    int_buffer_ce1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it0)
    begin
        if ((((ap_ST_pp1_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_ST_pp1_stg1_fsm_3 = ap_CS_fsm)))) then 
            int_buffer_ce1 <= ap_const_logic_1;
        else 
            int_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    int_buffer_d0 <= bus_addr_read_reg_419;

    -- int_buffer_we0 assign process. --
    int_buffer_we0_assign_proc : process(ap_CS_fsm, ap_sig_bdd_79, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it7, ap_reg_ppstg_exitcond3_reg_406_pp0_it6)
    begin
        if ((((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and not((ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_406_pp0_it6)))) then 
            int_buffer_we0 <= ap_const_logic_1;
        else 
            int_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    isIter0_fu_303_p2 <= "1" when (indvar_phi_fu_197_p4 = ap_const_lv30_0) else "0";
    p_shl1_cast_fu_258_p1 <= std_logic_vector(resize(unsigned(p_shl1_fu_250_p3),13));
    p_shl1_fu_250_p3 <= (k_V & ap_const_lv2_0);
    p_shl2_cast_fu_337_p1 <= std_logic_vector(resize(unsigned(p_shl2_fu_329_p3),11));
    p_shl2_fu_329_p3 <= (t_V_phi_fu_209_p4 & ap_const_lv2_0);
    p_shl_cast_fu_246_p1 <= std_logic_vector(resize(unsigned(p_shl_fu_238_p3),13));
    p_shl_fu_238_p3 <= (k_V & ap_const_lv4_0);

    -- t_V_phi_fu_209_p4 assign process. --
    t_V_phi_fu_209_p4_assign_proc : process(ap_CS_fsm, t_V_reg_205, tmp_7_reg_424, ap_reg_ppiten_pp1_it1, i_V_reg_428, tmp_10_reg_448)
    begin
        if (((ap_ST_pp1_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = tmp_7_reg_424) and (ap_const_lv1_0 = tmp_10_reg_448))) then 
            t_V_phi_fu_209_p4 <= i_V_reg_428;
        else 
            t_V_phi_fu_209_p4 <= t_V_reg_205;
        end if; 
    end process;

    tmp_10_fu_363_p2 <= "1" when (t_V_phi_fu_209_p4 = k_V) else "0";
    
    tmp_12_1_fu_352_p2_temp <= signed(tmp_12_1_fu_352_p2);
    tmp_12_1_cast_fu_358_p1 <= std_logic_vector(resize(tmp_12_1_fu_352_p2_temp,64));

    tmp_12_1_fu_352_p2 <= std_logic_vector(unsigned(tmp_9_fu_341_p2) + unsigned(ap_const_lv11_1));
    
    tmp_12_2_fu_374_p2_temp <= signed(tmp_12_2_fu_374_p2);
    tmp_12_2_cast_fu_379_p1 <= std_logic_vector(resize(tmp_12_2_fu_374_p2_temp,64));

    tmp_12_2_fu_374_p2 <= std_logic_vector(unsigned(tmp_9_reg_433) + unsigned(ap_const_lv11_2));
    tmp_1_fu_274_p4 <= tmp_6_add_i_fu_268_p2(12 downto 2);
    tmp_2_cast_fu_228_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_218_p4),64));
    tmp_2_fu_218_p4 <= offset(31 downto 2);
    tmp_5_fu_262_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_246_p1) - unsigned(p_shl1_cast_fu_258_p1));
    
    tmp_1_fu_274_p4_temp <= signed(tmp_1_fu_274_p4);
    tmp_6_add_i32_shr_cast_fu_288_p0 <= std_logic_vector(resize(tmp_1_fu_274_p4_temp,30));

    tmp_6_add_i32_shr_cast_fu_288_p1 <= std_logic_vector(resize(unsigned(tmp_6_add_i32_shr_cast_fu_288_p0),32));
    
    tmp_1_fu_274_p4_temp <= signed(tmp_1_fu_274_p4);
    tmp_6_add_i32_shr_fu_284_p1 <= std_logic_vector(resize(tmp_1_fu_274_p4_temp,30));

    tmp_6_add_i_fu_268_p2 <= std_logic_vector(unsigned(tmp_5_fu_262_p2) + unsigned(ap_const_lv13_F));
    tmp_7_fu_314_p2 <= "1" when (unsigned(t_V_phi_fu_209_p4) > unsigned(k_V)) else "0";
    tmp_8_cast1_fu_325_p1 <= std_logic_vector(resize(unsigned(t_V_phi_fu_209_p4),11));
    tmp_8_fu_368_p1 <= std_logic_vector(resize(unsigned(t_V_reg_205),64));
    
    tmp_9_fu_341_p2_temp <= signed(tmp_9_fu_341_p2);
    tmp_9_cast_fu_347_p1 <= std_logic_vector(resize(tmp_9_fu_341_p2_temp,64));

    tmp_9_fu_341_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_337_p1) - unsigned(tmp_8_cast1_fu_325_p1));
    tmp_s_fu_309_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar_reg_193_pp0_it6),64));
end behav;
