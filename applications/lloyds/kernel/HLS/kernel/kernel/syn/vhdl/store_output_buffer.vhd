-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity store_output_buffer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    offset : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_min_idx_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_min_idx_V_ce0 : OUT STD_LOGIC;
    buffer_min_idx_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer_sum_sq_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_sum_sq_ce0 : OUT STD_LOGIC;
    buffer_sum_sq_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    address : IN STD_LOGIC_VECTOR (31 downto 0);
    bus_r_req_din : OUT STD_LOGIC;
    bus_r_req_full_n : IN STD_LOGIC;
    bus_r_req_write : OUT STD_LOGIC;
    bus_r_rsp_empty_n : IN STD_LOGIC;
    bus_r_rsp_read : OUT STD_LOGIC;
    bus_r_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    bus_r_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    bus_r_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    bus_r_size : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of store_output_buffer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st4_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_pp1_stg0_fsm_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_ST_st8_fsm_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal i_reg_157 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_reg_168 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_286 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal i_2_fu_186_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_198_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_reg_300 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_21_fu_202_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_21_reg_305 : STD_LOGIC_VECTOR (4 downto 0);
    signal bus_addr_reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond5_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_reg_320 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond5_reg_320_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_95 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal indvar_next_fu_259_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal isIter0_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isIter0_reg_334 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_isIter0_reg_334_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal int_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal int_buffer_load_reg_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal int_buffer_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal int_buffer_ce0 : STD_LOGIC;
    signal int_buffer_we0 : STD_LOGIC;
    signal int_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal int_buffer_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal int_buffer_ce1 : STD_LOGIC;
    signal int_buffer_we1 : STD_LOGIC;
    signal int_buffer_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_217_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_233_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component store_output_buffer_int_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    int_buffer_U : component store_output_buffer_int_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => int_buffer_address0,
        ce0 => int_buffer_ce0,
        we0 => int_buffer_we0,
        d0 => int_buffer_d0,
        q0 => int_buffer_q0,
        address1 => int_buffer_address1,
        ce1 => int_buffer_ce1,
        we1 => int_buffer_we1,
        d1 => int_buffer_d1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((exitcond_fu_180_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (exitcond_fu_180_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or ((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((exitcond_fu_180_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_3 = ap_CS_fsm) and not((ap_sig_bdd_95 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond5_fu_253_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif ((ap_ST_st4_fsm_2 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_3 = ap_CS_fsm) and not((ap_sig_bdd_95 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond5_fu_253_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif (((ap_ST_st4_fsm_2 = ap_CS_fsm) or ((ap_ST_pp1_stg0_fsm_3 = ap_CS_fsm) and not((ap_sig_bdd_95 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond5_fu_253_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_3 = ap_CS_fsm) and not((ap_sig_bdd_95 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                elsif ((ap_ST_st4_fsm_2 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_157 assign process. --
    i_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_fu_180_p2 = ap_const_lv1_0))) then 
                i_reg_157 <= i_2_fu_186_p2;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_157 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- indvar_reg_168 assign process. --
    indvar_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_2 = ap_CS_fsm)) then 
                indvar_reg_168 <= ap_const_lv6_0;
            elsif (((ap_ST_pp1_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_95 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond5_fu_253_p2))) then 
                indvar_reg_168 <= indvar_next_fu_259_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_3 = ap_CS_fsm) and not((ap_sig_bdd_95 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))))) then
                ap_reg_ppstg_exitcond5_reg_320_pp1_it1 <= exitcond5_reg_320;
                ap_reg_ppstg_isIter0_reg_334_pp1_it1 <= isIter0_reg_334;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_2 = ap_CS_fsm)) then
                bus_addr_reg_315(0) <= tmp_13_fu_243_p1(32 - 1 downto 0)(0);
    bus_addr_reg_315(1) <= tmp_13_fu_243_p1(32 - 1 downto 0)(1);
    bus_addr_reg_315(2) <= tmp_13_fu_243_p1(32 - 1 downto 0)(2);
    bus_addr_reg_315(3) <= tmp_13_fu_243_p1(32 - 1 downto 0)(3);
    bus_addr_reg_315(4) <= tmp_13_fu_243_p1(32 - 1 downto 0)(4);
    bus_addr_reg_315(5) <= tmp_13_fu_243_p1(32 - 1 downto 0)(5);
    bus_addr_reg_315(6) <= tmp_13_fu_243_p1(32 - 1 downto 0)(6);
    bus_addr_reg_315(7) <= tmp_13_fu_243_p1(32 - 1 downto 0)(7);
    bus_addr_reg_315(8) <= tmp_13_fu_243_p1(32 - 1 downto 0)(8);
    bus_addr_reg_315(9) <= tmp_13_fu_243_p1(32 - 1 downto 0)(9);
    bus_addr_reg_315(10) <= tmp_13_fu_243_p1(32 - 1 downto 0)(10);
    bus_addr_reg_315(11) <= tmp_13_fu_243_p1(32 - 1 downto 0)(11);
    bus_addr_reg_315(12) <= tmp_13_fu_243_p1(32 - 1 downto 0)(12);
    bus_addr_reg_315(13) <= tmp_13_fu_243_p1(32 - 1 downto 0)(13);
    bus_addr_reg_315(14) <= tmp_13_fu_243_p1(32 - 1 downto 0)(14);
    bus_addr_reg_315(15) <= tmp_13_fu_243_p1(32 - 1 downto 0)(15);
    bus_addr_reg_315(16) <= tmp_13_fu_243_p1(32 - 1 downto 0)(16);
    bus_addr_reg_315(17) <= tmp_13_fu_243_p1(32 - 1 downto 0)(17);
    bus_addr_reg_315(18) <= tmp_13_fu_243_p1(32 - 1 downto 0)(18);
    bus_addr_reg_315(19) <= tmp_13_fu_243_p1(32 - 1 downto 0)(19);
    bus_addr_reg_315(20) <= tmp_13_fu_243_p1(32 - 1 downto 0)(20);
    bus_addr_reg_315(21) <= tmp_13_fu_243_p1(32 - 1 downto 0)(21);
    bus_addr_reg_315(22) <= tmp_13_fu_243_p1(32 - 1 downto 0)(22);
    bus_addr_reg_315(23) <= tmp_13_fu_243_p1(32 - 1 downto 0)(23);
    bus_addr_reg_315(24) <= tmp_13_fu_243_p1(32 - 1 downto 0)(24);
    bus_addr_reg_315(25) <= tmp_13_fu_243_p1(32 - 1 downto 0)(25);
    bus_addr_reg_315(26) <= tmp_13_fu_243_p1(32 - 1 downto 0)(26);
    bus_addr_reg_315(27) <= tmp_13_fu_243_p1(32 - 1 downto 0)(27);
    bus_addr_reg_315(28) <= tmp_13_fu_243_p1(32 - 1 downto 0)(28);
    bus_addr_reg_315(29) <= tmp_13_fu_243_p1(32 - 1 downto 0)(29);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_95 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))))) then
                exitcond5_reg_320 <= exitcond5_fu_253_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                exitcond_reg_286 <= exitcond_fu_180_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_95 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond5_reg_320))) then
                int_buffer_load_reg_338 <= int_buffer_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_95 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond5_fu_253_p2))) then
                isIter0_reg_334 <= isIter0_fu_270_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_fu_180_p2 = ap_const_lv1_0))) then
                tmp_16_reg_300 <= tmp_16_fu_198_p1;
                tmp_21_reg_305(1) <= tmp_21_fu_202_p2(1);
    tmp_21_reg_305(2) <= tmp_21_fu_202_p2(2);
    tmp_21_reg_305(3) <= tmp_21_fu_202_p2(3);
    tmp_21_reg_305(4) <= tmp_21_fu_202_p2(4);
            end if;
        end if;
    end process;
    tmp_21_reg_305(0) <= '0';
    bus_addr_reg_315(31 downto 30) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , exitcond_fu_180_p2 , ap_reg_ppiten_pp0_it0 , exitcond5_fu_253_p2 , ap_reg_ppiten_pp1_it0 , ap_reg_ppiten_pp1_it1 , ap_sig_bdd_95 , ap_reg_ppiten_pp1_it2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_fu_180_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_2;
                end if;
            when ap_ST_st4_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp1_stg0_fsm_3;
            when ap_ST_pp1_stg0_fsm_3 => 
                if ((not(((ap_ST_pp1_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_95 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_95 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond5_fu_253_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_3;
                elsif ((((ap_ST_pp1_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_95 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_95 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond5_fu_253_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_3;
                end if;
            when ap_ST_st8_fsm_4 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or (ap_ST_st8_fsm_4 = ap_CS_fsm))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st8_fsm_4 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_95 assign process. --
    ap_sig_bdd_95_assign_proc : process(bus_r_req_full_n, ap_reg_ppstg_exitcond5_reg_320_pp1_it1)
    begin
                ap_sig_bdd_95 <= ((bus_r_req_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_320_pp1_it1));
    end process;

    buffer_min_idx_V_address0 <= tmp_14_fu_192_p1(4 - 1 downto 0);

    -- buffer_min_idx_V_ce0 assign process. --
    buffer_min_idx_V_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            buffer_min_idx_V_ce0 <= ap_const_logic_1;
        else 
            buffer_min_idx_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_sum_sq_address0 <= tmp_14_fu_192_p1(4 - 1 downto 0);

    -- buffer_sum_sq_ce0 assign process. --
    buffer_sum_sq_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            buffer_sum_sq_ce0 <= ap_const_logic_1;
        else 
            buffer_sum_sq_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bus_r_address <= bus_addr_reg_315;
    bus_r_dataout <= int_buffer_load_reg_338;

    -- bus_r_req_din assign process. --
    bus_r_req_din_assign_proc : process(ap_CS_fsm, ap_reg_ppstg_exitcond5_reg_320_pp1_it1, ap_sig_bdd_95, ap_reg_ppiten_pp1_it2, ap_reg_ppstg_isIter0_reg_334_pp1_it1)
    begin
        if ((((ap_ST_pp1_stg0_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_320_pp1_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_95 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter0_reg_334_pp1_it1))) or ((ap_ST_pp1_stg0_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_320_pp1_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_95 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)))))) then 
            bus_r_req_din <= ap_const_logic_1;
        else 
            bus_r_req_din <= ap_const_logic_0;
        end if; 
    end process;


    -- bus_r_req_write assign process. --
    bus_r_req_write_assign_proc : process(ap_CS_fsm, ap_reg_ppstg_exitcond5_reg_320_pp1_it1, ap_sig_bdd_95, ap_reg_ppiten_pp1_it2, ap_reg_ppstg_isIter0_reg_334_pp1_it1)
    begin
        if ((((ap_ST_pp1_stg0_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_320_pp1_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_95 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter0_reg_334_pp1_it1))) or ((ap_ST_pp1_stg0_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_320_pp1_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_95 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)))))) then 
            bus_r_req_write <= ap_const_logic_1;
        else 
            bus_r_req_write <= ap_const_logic_0;
        end if; 
    end process;

    bus_r_rsp_read <= ap_const_logic_0;
    bus_r_size <= ap_const_lv32_20;
    exitcond5_fu_253_p2 <= "1" when (indvar_reg_168 = ap_const_lv6_20) else "0";
    exitcond_fu_180_p2 <= "1" when (i_reg_157 = ap_const_lv5_10) else "0";
    i_2_fu_186_p2 <= std_logic_vector(unsigned(i_reg_157) + unsigned(ap_const_lv5_1));
    indvar_next_fu_259_p2 <= std_logic_vector(unsigned(indvar_reg_168) + unsigned(ap_const_lv6_1));

    -- int_buffer_address0 assign process. --
    int_buffer_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp1_it0, tmp_17_fu_213_p1, tmp_20_fu_265_p1)
    begin
        if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            int_buffer_address0 <= tmp_17_fu_213_p1(5 - 1 downto 0);
        elsif (((ap_ST_pp1_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            int_buffer_address0 <= tmp_20_fu_265_p1(5 - 1 downto 0);
        else 
            int_buffer_address0 <= "XXXXX";
        end if; 
    end process;

    int_buffer_address1 <= tmp_19_fu_224_p1(5 - 1 downto 0);

    -- int_buffer_ce0 assign process. --
    int_buffer_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp1_it0, ap_sig_bdd_95, ap_reg_ppiten_pp1_it2)
    begin
        if ((((ap_ST_pp1_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_95 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)))) or ((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
            int_buffer_ce0 <= ap_const_logic_1;
        else 
            int_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- int_buffer_ce1 assign process. --
    int_buffer_ce1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            int_buffer_ce1 <= ap_const_logic_1;
        else 
            int_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    int_buffer_d0 <= std_logic_vector(resize(unsigned(buffer_min_idx_V_q0),32));
    int_buffer_d1 <= buffer_sum_sq_q0;

    -- int_buffer_we0 assign process. --
    int_buffer_we0_assign_proc : process(ap_CS_fsm, exitcond_reg_286, ap_reg_ppiten_pp0_it1)
    begin
        if ((((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_reg_286 = ap_const_lv1_0)))) then 
            int_buffer_we0 <= ap_const_logic_1;
        else 
            int_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- int_buffer_we1 assign process. --
    int_buffer_we1_assign_proc : process(ap_CS_fsm, exitcond_reg_286, ap_reg_ppiten_pp0_it1)
    begin
        if ((((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_reg_286 = ap_const_lv1_0)))) then 
            int_buffer_we1 <= ap_const_logic_1;
        else 
            int_buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;

    isIter0_fu_270_p2 <= "1" when (indvar_reg_168 = ap_const_lv6_0) else "0";
    tmp_13_fu_243_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_233_p4),64));
    tmp_14_fu_192_p1 <= std_logic_vector(resize(unsigned(i_reg_157),64));
    tmp_16_fu_198_p1 <= i_reg_157(4 - 1 downto 0);
    tmp_17_fu_213_p1 <= std_logic_vector(resize(unsigned(tmp_21_reg_305),64));
    tmp_18_fu_217_p3 <= (tmp_16_reg_300 & ap_const_lv1_1);
    tmp_19_fu_224_p1 <= std_logic_vector(resize(unsigned(tmp_18_fu_217_p3),64));
    tmp_20_fu_265_p1 <= std_logic_vector(resize(unsigned(indvar_reg_168),64));
    tmp_21_fu_202_p2 <= std_logic_vector(shift_left(unsigned(i_reg_157),to_integer(unsigned('0' & ap_const_lv5_1(5-1 downto 0)))));
    tmp_fu_229_p2 <= std_logic_vector(unsigned(address) + unsigned(offset));
    tmp_s_fu_233_p4 <= tmp_fu_229_p2(31 downto 2);
end behav;
