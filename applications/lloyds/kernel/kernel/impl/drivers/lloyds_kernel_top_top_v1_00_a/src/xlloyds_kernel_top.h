// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef XLLOYDS_KERNEL_TOP_H
#define XLLOYDS_KERNEL_TOP_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xlloyds_kernel_top_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Config_bus_BaseAddress;
} XLloyds_kernel_top_Config;
#endif

typedef struct {
    u32 Config_bus_BaseAddress;
    u32 IsReady;
} XLloyds_kernel_top;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XLloyds_kernel_top_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XLloyds_kernel_top_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XLloyds_kernel_top_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XLloyds_kernel_top_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XLloyds_kernel_top_Initialize(XLloyds_kernel_top *InstancePtr, u16 DeviceId);
XLloyds_kernel_top_Config* XLloyds_kernel_top_LookupConfig(u16 DeviceId);
int XLloyds_kernel_top_CfgInitialize(XLloyds_kernel_top *InstancePtr, XLloyds_kernel_top_Config *ConfigPtr);
#else
int XLloyds_kernel_top_Initialize(XLloyds_kernel_top *InstancePtr, const char* InstanceName);
int XLloyds_kernel_top_Release(XLloyds_kernel_top *InstancePtr);
#endif

void XLloyds_kernel_top_Start(XLloyds_kernel_top *InstancePtr);
u32 XLloyds_kernel_top_IsDone(XLloyds_kernel_top *InstancePtr);
u32 XLloyds_kernel_top_IsIdle(XLloyds_kernel_top *InstancePtr);
u32 XLloyds_kernel_top_IsReady(XLloyds_kernel_top *InstancePtr);
void XLloyds_kernel_top_EnableAutoRestart(XLloyds_kernel_top *InstancePtr);
void XLloyds_kernel_top_DisableAutoRestart(XLloyds_kernel_top *InstancePtr);

void XLloyds_kernel_top_SetBlock_address(XLloyds_kernel_top *InstancePtr, u32 Data);
u32 XLloyds_kernel_top_GetBlock_address(XLloyds_kernel_top *InstancePtr);
void XLloyds_kernel_top_SetData_points_addr(XLloyds_kernel_top *InstancePtr, u32 Data);
u32 XLloyds_kernel_top_GetData_points_addr(XLloyds_kernel_top *InstancePtr);
void XLloyds_kernel_top_SetCentres_in_addr(XLloyds_kernel_top *InstancePtr, u32 Data);
u32 XLloyds_kernel_top_GetCentres_in_addr(XLloyds_kernel_top *InstancePtr);
void XLloyds_kernel_top_SetOutput_addr(XLloyds_kernel_top *InstancePtr, u32 Data);
u32 XLloyds_kernel_top_GetOutput_addr(XLloyds_kernel_top *InstancePtr);
void XLloyds_kernel_top_SetUpdate_points(XLloyds_kernel_top *InstancePtr, u32 Data);
u32 XLloyds_kernel_top_GetUpdate_points(XLloyds_kernel_top *InstancePtr);
void XLloyds_kernel_top_SetN(XLloyds_kernel_top *InstancePtr, u32 Data);
u32 XLloyds_kernel_top_GetN(XLloyds_kernel_top *InstancePtr);
void XLloyds_kernel_top_SetK(XLloyds_kernel_top *InstancePtr, u32 Data);
u32 XLloyds_kernel_top_GetK(XLloyds_kernel_top *InstancePtr);
u32 XLloyds_kernel_top_GetDebug(XLloyds_kernel_top *InstancePtr);

void XLloyds_kernel_top_InterruptGlobalEnable(XLloyds_kernel_top *InstancePtr);
void XLloyds_kernel_top_InterruptGlobalDisable(XLloyds_kernel_top *InstancePtr);
void XLloyds_kernel_top_InterruptEnable(XLloyds_kernel_top *InstancePtr, u32 Mask);
void XLloyds_kernel_top_InterruptDisable(XLloyds_kernel_top *InstancePtr, u32 Mask);
void XLloyds_kernel_top_InterruptClear(XLloyds_kernel_top *InstancePtr, u32 Mask);
u32 XLloyds_kernel_top_InterruptGetEnabled(XLloyds_kernel_top *InstancePtr);
u32 XLloyds_kernel_top_InterruptGetStatus(XLloyds_kernel_top *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
