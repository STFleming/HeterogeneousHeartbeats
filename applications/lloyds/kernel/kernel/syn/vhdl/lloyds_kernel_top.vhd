-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lloyds_kernel_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    block_address : IN STD_LOGIC_VECTOR (31 downto 0);
    master_portA_req_din : OUT STD_LOGIC;
    master_portA_req_full_n : IN STD_LOGIC;
    master_portA_req_write : OUT STD_LOGIC;
    master_portA_rsp_empty_n : IN STD_LOGIC;
    master_portA_rsp_read : OUT STD_LOGIC;
    master_portA_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    master_portA_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    master_portA_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    master_portA_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_points_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    centres_in_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    output_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    update_points : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    k : IN STD_LOGIC_VECTOR (31 downto 0);
    debug : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of lloyds_kernel_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lloyds_kernel_top,hls_ip_2013_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_ST_pp0_stg0_fsm_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_ST_st18_fsm_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_ST_st19_fsm_10 : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal block_address0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal block_address0vld_reg : STD_LOGIC := '0';
    signal block_address0ack_out : STD_LOGIC;
    signal data_points_addr0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal data_points_addr0vld_reg : STD_LOGIC := '0';
    signal data_points_addr0ack_out : STD_LOGIC;
    signal centres_in_addr0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal centres_in_addr0vld_reg : STD_LOGIC := '0';
    signal centres_in_addr0ack_out : STD_LOGIC;
    signal output_addr0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal output_addr0vld_reg : STD_LOGIC := '0';
    signal output_addr0ack_out : STD_LOGIC;
    signal update_points0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal update_points0vld_reg : STD_LOGIC := '0';
    signal update_points0ack_out : STD_LOGIC;
    signal k0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal k0vld_reg : STD_LOGIC := '0';
    signal k0ack_out : STD_LOGIC;
    signal debug1data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal debug1vld_reg : STD_LOGIC := '0';
    signal debug1vld_in : STD_LOGIC;
    signal debug1ack_in : STD_LOGIC;
    signal final_centre_index_V_reg_380 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_final_centre_index_V_reg_380_pp0_it1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppstg_final_centre_index_V_reg_380_pp0_it2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_final_centre_index_V_reg_380_pp0_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_final_centre_index_V_reg_380_pp0_it4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_final_centre_index_V_reg_380_pp0_it5 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_final_centre_index_V_reg_380_pp0_it6 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_final_centre_index_V_reg_380_pp0_it7 : STD_LOGIC_VECTOR (7 downto 0);
    signal closest_centre_value_2_1_reg_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal closest_centre_value_1_1_reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal closest_centre_value_0_1_reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_reg_425 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_sq_out_reg_437 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_dist_reg_449 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_points_buffer_0_value_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_centres_buffer_fu_522_ap_done : STD_LOGIC;
    signal data_points_block_address_fu_577_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_points_block_address_reg_810 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_584_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_reg_816 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_info_block_address_fu_588_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_info_block_address_reg_826 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_599_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_834 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_605_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_839 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_863 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_points_buffer_1_value_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_points_buffer_1_value_load_reg_867 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_points_buffer_2_value_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_points_buffer_2_value_load_reg_872 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_877 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_877_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_877_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_877_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_877_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_877_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_877_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_877_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ii_V_fu_626_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ii_V_reg_881 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_901_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_901_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_901_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_901_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_901_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_901_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_901_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal centres_buffer_0_value_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal closest_centre_value_0_reg_905 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_closest_centre_value_0_reg_905_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_closest_centre_value_0_reg_905_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_closest_centre_value_0_reg_905_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_closest_centre_value_0_reg_905_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_closest_centre_value_0_reg_905_pp0_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_closest_centre_value_0_reg_905_pp0_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal centres_buffer_1_value_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal closest_centre_value_1_reg_911 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_closest_centre_value_1_reg_911_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_closest_centre_value_1_reg_911_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_closest_centre_value_1_reg_911_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_closest_centre_value_1_reg_911_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_closest_centre_value_1_reg_911_pp0_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_closest_centre_value_1_reg_911_pp0_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal centres_buffer_2_value_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal closest_centre_value_2_reg_917 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_closest_centre_value_2_reg_917_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_closest_centre_value_2_reg_917_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_closest_centre_value_2_reg_917_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_closest_centre_value_2_reg_917_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_closest_centre_value_2_reg_917_pp0_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_closest_centre_value_2_reg_917_pp0_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_fu_649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_644_p2_temp: signed (32-1 downto 0);
    signal lhs_V_1_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_1_fu_659_p2_temp: signed (32-1 downto 0);
    signal lhs_V_2_fu_677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_2_fu_673_p2_temp: signed (32-1 downto 0);
    signal result_2_reg_941 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_717_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_946 : STD_LOGIC_VECTOR (31 downto 0);
    signal closest_centre_value_2_closest_centre_value_2_1_fu_733_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal closest_centre_value_1_closest_centre_value_1_1_fu_740_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal closest_centre_value_0_closest_centre_value_0_1_fu_747_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal final_centre_index_V_s_fu_754_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_dist_sum_sq_out_fu_762_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_dist_min_dist_fu_770_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_points_buffer_0_value_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal data_points_buffer_0_value_ce0 : STD_LOGIC;
    signal data_points_buffer_0_value_we0 : STD_LOGIC;
    signal data_points_buffer_0_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_points_buffer_1_value_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal data_points_buffer_1_value_ce0 : STD_LOGIC;
    signal data_points_buffer_1_value_we0 : STD_LOGIC;
    signal data_points_buffer_1_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_points_buffer_2_value_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal data_points_buffer_2_value_ce0 : STD_LOGIC;
    signal data_points_buffer_2_value_we0 : STD_LOGIC;
    signal data_points_buffer_2_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal centres_buffer_0_value_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal centres_buffer_0_value_ce0 : STD_LOGIC;
    signal centres_buffer_0_value_we0 : STD_LOGIC;
    signal centres_buffer_0_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal centres_buffer_1_value_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal centres_buffer_1_value_ce0 : STD_LOGIC;
    signal centres_buffer_1_value_we0 : STD_LOGIC;
    signal centres_buffer_1_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal centres_buffer_2_value_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal centres_buffer_2_value_ce0 : STD_LOGIC;
    signal centres_buffer_2_value_we0 : STD_LOGIC;
    signal centres_buffer_2_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_buffer_min_idx_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_buffer_min_idx_V_ce0 : STD_LOGIC;
    signal output_buffer_min_idx_V_we0 : STD_LOGIC;
    signal output_buffer_min_idx_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_buffer_min_idx_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_buffer_sum_sq_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_buffer_sum_sq_ce0 : STD_LOGIC;
    signal output_buffer_sum_sq_we0 : STD_LOGIC;
    signal output_buffer_sum_sq_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_buffer_sum_sq_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_points_buffer_0_value_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_points_buffer_0_value_ce0 : STD_LOGIC;
    signal output_points_buffer_0_value_we0 : STD_LOGIC;
    signal output_points_buffer_0_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_points_buffer_0_value_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_points_buffer_1_value_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_points_buffer_1_value_ce0 : STD_LOGIC;
    signal output_points_buffer_1_value_we0 : STD_LOGIC;
    signal output_points_buffer_1_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_points_buffer_1_value_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_points_buffer_2_value_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_points_buffer_2_value_ce0 : STD_LOGIC;
    signal output_points_buffer_2_value_we0 : STD_LOGIC;
    signal output_points_buffer_2_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_points_buffer_2_value_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_centres_buffer_fu_522_ap_start : STD_LOGIC;
    signal grp_load_centres_buffer_fu_522_ap_idle : STD_LOGIC;
    signal grp_load_centres_buffer_fu_522_ap_ready : STD_LOGIC;
    signal grp_load_centres_buffer_fu_522_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_centres_buffer_fu_522_bus_r_req_din : STD_LOGIC;
    signal grp_load_centres_buffer_fu_522_bus_r_req_full_n : STD_LOGIC;
    signal grp_load_centres_buffer_fu_522_bus_r_req_write : STD_LOGIC;
    signal grp_load_centres_buffer_fu_522_bus_r_rsp_empty_n : STD_LOGIC;
    signal grp_load_centres_buffer_fu_522_bus_r_rsp_read : STD_LOGIC;
    signal grp_load_centres_buffer_fu_522_bus_r_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_centres_buffer_fu_522_bus_r_datain : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_centres_buffer_fu_522_bus_r_dataout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_centres_buffer_fu_522_bus_r_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_centres_buffer_fu_522_k_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_load_centres_buffer_fu_522_buffer_0_value_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_load_centres_buffer_fu_522_buffer_0_value_ce0 : STD_LOGIC;
    signal grp_load_centres_buffer_fu_522_buffer_0_value_we0 : STD_LOGIC;
    signal grp_load_centres_buffer_fu_522_buffer_0_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_centres_buffer_fu_522_buffer_1_value_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_load_centres_buffer_fu_522_buffer_1_value_ce0 : STD_LOGIC;
    signal grp_load_centres_buffer_fu_522_buffer_1_value_we0 : STD_LOGIC;
    signal grp_load_centres_buffer_fu_522_buffer_1_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_centres_buffer_fu_522_buffer_2_value_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_load_centres_buffer_fu_522_buffer_2_value_ce0 : STD_LOGIC;
    signal grp_load_centres_buffer_fu_522_buffer_2_value_we0 : STD_LOGIC;
    signal grp_load_centres_buffer_fu_522_buffer_2_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_points_buffer_fu_533_ap_start : STD_LOGIC;
    signal grp_store_output_points_buffer_fu_533_ap_done : STD_LOGIC;
    signal grp_store_output_points_buffer_fu_533_ap_idle : STD_LOGIC;
    signal grp_store_output_points_buffer_fu_533_ap_ready : STD_LOGIC;
    signal grp_store_output_points_buffer_fu_533_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_points_buffer_fu_533_buffer_0_value_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_output_points_buffer_fu_533_buffer_0_value_ce0 : STD_LOGIC;
    signal grp_store_output_points_buffer_fu_533_buffer_0_value_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_points_buffer_fu_533_buffer_1_value_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_output_points_buffer_fu_533_buffer_1_value_ce0 : STD_LOGIC;
    signal grp_store_output_points_buffer_fu_533_buffer_1_value_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_points_buffer_fu_533_buffer_2_value_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_output_points_buffer_fu_533_buffer_2_value_ce0 : STD_LOGIC;
    signal grp_store_output_points_buffer_fu_533_buffer_2_value_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_points_buffer_fu_533_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_points_buffer_fu_533_bus_r_req_din : STD_LOGIC;
    signal grp_store_output_points_buffer_fu_533_bus_r_req_full_n : STD_LOGIC;
    signal grp_store_output_points_buffer_fu_533_bus_r_req_write : STD_LOGIC;
    signal grp_store_output_points_buffer_fu_533_bus_r_rsp_empty_n : STD_LOGIC;
    signal grp_store_output_points_buffer_fu_533_bus_r_rsp_read : STD_LOGIC;
    signal grp_store_output_points_buffer_fu_533_bus_r_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_points_buffer_fu_533_bus_r_datain : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_points_buffer_fu_533_bus_r_dataout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_points_buffer_fu_533_bus_r_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_points_buffer_fu_544_ap_start : STD_LOGIC;
    signal grp_load_points_buffer_fu_544_ap_done : STD_LOGIC;
    signal grp_load_points_buffer_fu_544_ap_idle : STD_LOGIC;
    signal grp_load_points_buffer_fu_544_ap_ready : STD_LOGIC;
    signal grp_load_points_buffer_fu_544_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_points_buffer_fu_544_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_points_buffer_fu_544_bus_r_req_din : STD_LOGIC;
    signal grp_load_points_buffer_fu_544_bus_r_req_full_n : STD_LOGIC;
    signal grp_load_points_buffer_fu_544_bus_r_req_write : STD_LOGIC;
    signal grp_load_points_buffer_fu_544_bus_r_rsp_empty_n : STD_LOGIC;
    signal grp_load_points_buffer_fu_544_bus_r_rsp_read : STD_LOGIC;
    signal grp_load_points_buffer_fu_544_bus_r_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_points_buffer_fu_544_bus_r_datain : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_points_buffer_fu_544_bus_r_dataout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_points_buffer_fu_544_bus_r_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_points_buffer_fu_544_buffer_0_value_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_points_buffer_fu_544_buffer_0_value_ce0 : STD_LOGIC;
    signal grp_load_points_buffer_fu_544_buffer_0_value_we0 : STD_LOGIC;
    signal grp_load_points_buffer_fu_544_buffer_0_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_points_buffer_fu_544_buffer_1_value_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_points_buffer_fu_544_buffer_1_value_ce0 : STD_LOGIC;
    signal grp_load_points_buffer_fu_544_buffer_1_value_we0 : STD_LOGIC;
    signal grp_load_points_buffer_fu_544_buffer_1_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_points_buffer_fu_544_buffer_2_value_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_points_buffer_fu_544_buffer_2_value_ce0 : STD_LOGIC;
    signal grp_load_points_buffer_fu_544_buffer_2_value_we0 : STD_LOGIC;
    signal grp_load_points_buffer_fu_544_buffer_2_value_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_buffer_fu_556_ap_start : STD_LOGIC;
    signal grp_store_output_buffer_fu_556_ap_done : STD_LOGIC;
    signal grp_store_output_buffer_fu_556_ap_idle : STD_LOGIC;
    signal grp_store_output_buffer_fu_556_ap_ready : STD_LOGIC;
    signal grp_store_output_buffer_fu_556_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_buffer_fu_556_buffer_min_idx_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_output_buffer_fu_556_buffer_min_idx_V_ce0 : STD_LOGIC;
    signal grp_store_output_buffer_fu_556_buffer_min_idx_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_store_output_buffer_fu_556_buffer_sum_sq_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_output_buffer_fu_556_buffer_sum_sq_ce0 : STD_LOGIC;
    signal grp_store_output_buffer_fu_556_buffer_sum_sq_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_buffer_fu_556_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_buffer_fu_556_bus_r_req_din : STD_LOGIC;
    signal grp_store_output_buffer_fu_556_bus_r_req_full_n : STD_LOGIC;
    signal grp_store_output_buffer_fu_556_bus_r_req_write : STD_LOGIC;
    signal grp_store_output_buffer_fu_556_bus_r_rsp_empty_n : STD_LOGIC;
    signal grp_store_output_buffer_fu_556_bus_r_rsp_read : STD_LOGIC;
    signal grp_store_output_buffer_fu_556_bus_r_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_buffer_fu_556_bus_r_datain : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_buffer_fu_556_bus_r_dataout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_buffer_fu_556_bus_r_size : STD_LOGIC_VECTOR (31 downto 0);
    signal closest_centre_value_2_s_reg_333 : STD_LOGIC_VECTOR (31 downto 0);
    signal closest_centre_value_1_s_reg_345 : STD_LOGIC_VECTOR (31 downto 0);
    signal closest_centre_value_0_s_reg_357 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_369 : STD_LOGIC_VECTOR (4 downto 0);
    signal final_centre_index_V_phi_fu_384_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal closest_centre_value_2_3_reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal closest_centre_value_1_3_reg_473 : STD_LOGIC_VECTOR (31 downto 0);
    signal closest_centre_value_0_3_reg_486 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_036_2_reg_499 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_sq_out_2_reg_510 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_centres_buffer_fu_522_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_store_output_points_buffer_fu_533_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_load_points_buffer_fu_544_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_store_output_buffer_fu_556_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_5_fu_632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_617_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_644_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_653_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_653_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_fu_659_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_667_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_667_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_fu_673_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_681_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_681_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_653_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_667_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_681_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp3_fu_717_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_717_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_sq_out_3_fu_723_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_sq_out_3_fu_723_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_sq_out_3_fu_723_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_653_ce : STD_LOGIC;
    signal grp_fu_667_ce : STD_LOGIC;
    signal grp_fu_681_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_bdd_679 : BOOLEAN;
    signal ap_sig_bdd_426 : BOOLEAN;

    component load_centres_buffer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        offset : IN STD_LOGIC_VECTOR (31 downto 0);
        bus_r_req_din : OUT STD_LOGIC;
        bus_r_req_full_n : IN STD_LOGIC;
        bus_r_req_write : OUT STD_LOGIC;
        bus_r_rsp_empty_n : IN STD_LOGIC;
        bus_r_rsp_read : OUT STD_LOGIC;
        bus_r_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        bus_r_datain : IN STD_LOGIC_VECTOR (31 downto 0);
        bus_r_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
        bus_r_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        k_V : IN STD_LOGIC_VECTOR (7 downto 0);
        buffer_0_value_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buffer_0_value_ce0 : OUT STD_LOGIC;
        buffer_0_value_we0 : OUT STD_LOGIC;
        buffer_0_value_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_1_value_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buffer_1_value_ce0 : OUT STD_LOGIC;
        buffer_1_value_we0 : OUT STD_LOGIC;
        buffer_1_value_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_2_value_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buffer_2_value_ce0 : OUT STD_LOGIC;
        buffer_2_value_we0 : OUT STD_LOGIC;
        buffer_2_value_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component store_output_points_buffer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        offset : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_0_value_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_0_value_ce0 : OUT STD_LOGIC;
        buffer_0_value_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_1_value_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_1_value_ce0 : OUT STD_LOGIC;
        buffer_1_value_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_2_value_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_2_value_ce0 : OUT STD_LOGIC;
        buffer_2_value_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address : IN STD_LOGIC_VECTOR (31 downto 0);
        bus_r_req_din : OUT STD_LOGIC;
        bus_r_req_full_n : IN STD_LOGIC;
        bus_r_req_write : OUT STD_LOGIC;
        bus_r_rsp_empty_n : IN STD_LOGIC;
        bus_r_rsp_read : OUT STD_LOGIC;
        bus_r_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        bus_r_datain : IN STD_LOGIC_VECTOR (31 downto 0);
        bus_r_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
        bus_r_size : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component load_points_buffer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        offset : IN STD_LOGIC_VECTOR (31 downto 0);
        address : IN STD_LOGIC_VECTOR (31 downto 0);
        bus_r_req_din : OUT STD_LOGIC;
        bus_r_req_full_n : IN STD_LOGIC;
        bus_r_req_write : OUT STD_LOGIC;
        bus_r_rsp_empty_n : IN STD_LOGIC;
        bus_r_rsp_read : OUT STD_LOGIC;
        bus_r_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        bus_r_datain : IN STD_LOGIC_VECTOR (31 downto 0);
        bus_r_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
        bus_r_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_0_value_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_0_value_ce0 : OUT STD_LOGIC;
        buffer_0_value_we0 : OUT STD_LOGIC;
        buffer_0_value_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_1_value_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_1_value_ce0 : OUT STD_LOGIC;
        buffer_1_value_we0 : OUT STD_LOGIC;
        buffer_1_value_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_2_value_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_2_value_ce0 : OUT STD_LOGIC;
        buffer_2_value_we0 : OUT STD_LOGIC;
        buffer_2_value_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component store_output_buffer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        offset : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_min_idx_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_min_idx_V_ce0 : OUT STD_LOGIC;
        buffer_min_idx_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buffer_sum_sq_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_sum_sq_ce0 : OUT STD_LOGIC;
        buffer_sum_sq_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address : IN STD_LOGIC_VECTOR (31 downto 0);
        bus_r_req_din : OUT STD_LOGIC;
        bus_r_req_full_n : IN STD_LOGIC;
        bus_r_req_write : OUT STD_LOGIC;
        bus_r_rsp_empty_n : IN STD_LOGIC;
        bus_r_rsp_read : OUT STD_LOGIC;
        bus_r_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        bus_r_datain : IN STD_LOGIC_VECTOR (31 downto 0);
        bus_r_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
        bus_r_size : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lloyds_kernel_top_mul_32s_32s_64_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lloyds_kernel_top_add_32ns_32ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lloyds_kernel_top_data_points_buffer_0_value IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lloyds_kernel_top_centres_buffer_0_value IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lloyds_kernel_top_output_buffer_min_idx_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    data_points_buffer_0_value_U : component lloyds_kernel_top_data_points_buffer_0_value
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_points_buffer_0_value_address0,
        ce0 => data_points_buffer_0_value_ce0,
        we0 => data_points_buffer_0_value_we0,
        d0 => data_points_buffer_0_value_d0,
        q0 => data_points_buffer_0_value_q0);

    data_points_buffer_1_value_U : component lloyds_kernel_top_data_points_buffer_0_value
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_points_buffer_1_value_address0,
        ce0 => data_points_buffer_1_value_ce0,
        we0 => data_points_buffer_1_value_we0,
        d0 => data_points_buffer_1_value_d0,
        q0 => data_points_buffer_1_value_q0);

    data_points_buffer_2_value_U : component lloyds_kernel_top_data_points_buffer_0_value
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_points_buffer_2_value_address0,
        ce0 => data_points_buffer_2_value_ce0,
        we0 => data_points_buffer_2_value_we0,
        d0 => data_points_buffer_2_value_d0,
        q0 => data_points_buffer_2_value_q0);

    centres_buffer_0_value_U : component lloyds_kernel_top_centres_buffer_0_value
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => centres_buffer_0_value_address0,
        ce0 => centres_buffer_0_value_ce0,
        we0 => centres_buffer_0_value_we0,
        d0 => centres_buffer_0_value_d0,
        q0 => centres_buffer_0_value_q0);

    centres_buffer_1_value_U : component lloyds_kernel_top_centres_buffer_0_value
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => centres_buffer_1_value_address0,
        ce0 => centres_buffer_1_value_ce0,
        we0 => centres_buffer_1_value_we0,
        d0 => centres_buffer_1_value_d0,
        q0 => centres_buffer_1_value_q0);

    centres_buffer_2_value_U : component lloyds_kernel_top_centres_buffer_0_value
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => centres_buffer_2_value_address0,
        ce0 => centres_buffer_2_value_ce0,
        we0 => centres_buffer_2_value_we0,
        d0 => centres_buffer_2_value_d0,
        q0 => centres_buffer_2_value_q0);

    output_buffer_min_idx_V_U : component lloyds_kernel_top_output_buffer_min_idx_V
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_buffer_min_idx_V_address0,
        ce0 => output_buffer_min_idx_V_ce0,
        we0 => output_buffer_min_idx_V_we0,
        d0 => output_buffer_min_idx_V_d0,
        q0 => output_buffer_min_idx_V_q0);

    output_buffer_sum_sq_U : component lloyds_kernel_top_data_points_buffer_0_value
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_buffer_sum_sq_address0,
        ce0 => output_buffer_sum_sq_ce0,
        we0 => output_buffer_sum_sq_we0,
        d0 => output_buffer_sum_sq_d0,
        q0 => output_buffer_sum_sq_q0);

    output_points_buffer_0_value_U : component lloyds_kernel_top_data_points_buffer_0_value
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_points_buffer_0_value_address0,
        ce0 => output_points_buffer_0_value_ce0,
        we0 => output_points_buffer_0_value_we0,
        d0 => output_points_buffer_0_value_d0,
        q0 => output_points_buffer_0_value_q0);

    output_points_buffer_1_value_U : component lloyds_kernel_top_data_points_buffer_0_value
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_points_buffer_1_value_address0,
        ce0 => output_points_buffer_1_value_ce0,
        we0 => output_points_buffer_1_value_we0,
        d0 => output_points_buffer_1_value_d0,
        q0 => output_points_buffer_1_value_q0);

    output_points_buffer_2_value_U : component lloyds_kernel_top_data_points_buffer_0_value
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_points_buffer_2_value_address0,
        ce0 => output_points_buffer_2_value_ce0,
        we0 => output_points_buffer_2_value_we0,
        d0 => output_points_buffer_2_value_d0,
        q0 => output_points_buffer_2_value_q0);

    grp_load_centres_buffer_fu_522 : component load_centres_buffer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_load_centres_buffer_fu_522_ap_start,
        ap_done => grp_load_centres_buffer_fu_522_ap_done,
        ap_idle => grp_load_centres_buffer_fu_522_ap_idle,
        ap_ready => grp_load_centres_buffer_fu_522_ap_ready,
        offset => grp_load_centres_buffer_fu_522_offset,
        bus_r_req_din => grp_load_centres_buffer_fu_522_bus_r_req_din,
        bus_r_req_full_n => grp_load_centres_buffer_fu_522_bus_r_req_full_n,
        bus_r_req_write => grp_load_centres_buffer_fu_522_bus_r_req_write,
        bus_r_rsp_empty_n => grp_load_centres_buffer_fu_522_bus_r_rsp_empty_n,
        bus_r_rsp_read => grp_load_centres_buffer_fu_522_bus_r_rsp_read,
        bus_r_address => grp_load_centres_buffer_fu_522_bus_r_address,
        bus_r_datain => grp_load_centres_buffer_fu_522_bus_r_datain,
        bus_r_dataout => grp_load_centres_buffer_fu_522_bus_r_dataout,
        bus_r_size => grp_load_centres_buffer_fu_522_bus_r_size,
        k_V => grp_load_centres_buffer_fu_522_k_V,
        buffer_0_value_address0 => grp_load_centres_buffer_fu_522_buffer_0_value_address0,
        buffer_0_value_ce0 => grp_load_centres_buffer_fu_522_buffer_0_value_ce0,
        buffer_0_value_we0 => grp_load_centres_buffer_fu_522_buffer_0_value_we0,
        buffer_0_value_d0 => grp_load_centres_buffer_fu_522_buffer_0_value_d0,
        buffer_1_value_address0 => grp_load_centres_buffer_fu_522_buffer_1_value_address0,
        buffer_1_value_ce0 => grp_load_centres_buffer_fu_522_buffer_1_value_ce0,
        buffer_1_value_we0 => grp_load_centres_buffer_fu_522_buffer_1_value_we0,
        buffer_1_value_d0 => grp_load_centres_buffer_fu_522_buffer_1_value_d0,
        buffer_2_value_address0 => grp_load_centres_buffer_fu_522_buffer_2_value_address0,
        buffer_2_value_ce0 => grp_load_centres_buffer_fu_522_buffer_2_value_ce0,
        buffer_2_value_we0 => grp_load_centres_buffer_fu_522_buffer_2_value_we0,
        buffer_2_value_d0 => grp_load_centres_buffer_fu_522_buffer_2_value_d0);

    grp_store_output_points_buffer_fu_533 : component store_output_points_buffer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_store_output_points_buffer_fu_533_ap_start,
        ap_done => grp_store_output_points_buffer_fu_533_ap_done,
        ap_idle => grp_store_output_points_buffer_fu_533_ap_idle,
        ap_ready => grp_store_output_points_buffer_fu_533_ap_ready,
        offset => grp_store_output_points_buffer_fu_533_offset,
        buffer_0_value_address0 => grp_store_output_points_buffer_fu_533_buffer_0_value_address0,
        buffer_0_value_ce0 => grp_store_output_points_buffer_fu_533_buffer_0_value_ce0,
        buffer_0_value_q0 => grp_store_output_points_buffer_fu_533_buffer_0_value_q0,
        buffer_1_value_address0 => grp_store_output_points_buffer_fu_533_buffer_1_value_address0,
        buffer_1_value_ce0 => grp_store_output_points_buffer_fu_533_buffer_1_value_ce0,
        buffer_1_value_q0 => grp_store_output_points_buffer_fu_533_buffer_1_value_q0,
        buffer_2_value_address0 => grp_store_output_points_buffer_fu_533_buffer_2_value_address0,
        buffer_2_value_ce0 => grp_store_output_points_buffer_fu_533_buffer_2_value_ce0,
        buffer_2_value_q0 => grp_store_output_points_buffer_fu_533_buffer_2_value_q0,
        address => grp_store_output_points_buffer_fu_533_address,
        bus_r_req_din => grp_store_output_points_buffer_fu_533_bus_r_req_din,
        bus_r_req_full_n => grp_store_output_points_buffer_fu_533_bus_r_req_full_n,
        bus_r_req_write => grp_store_output_points_buffer_fu_533_bus_r_req_write,
        bus_r_rsp_empty_n => grp_store_output_points_buffer_fu_533_bus_r_rsp_empty_n,
        bus_r_rsp_read => grp_store_output_points_buffer_fu_533_bus_r_rsp_read,
        bus_r_address => grp_store_output_points_buffer_fu_533_bus_r_address,
        bus_r_datain => grp_store_output_points_buffer_fu_533_bus_r_datain,
        bus_r_dataout => grp_store_output_points_buffer_fu_533_bus_r_dataout,
        bus_r_size => grp_store_output_points_buffer_fu_533_bus_r_size);

    grp_load_points_buffer_fu_544 : component load_points_buffer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_load_points_buffer_fu_544_ap_start,
        ap_done => grp_load_points_buffer_fu_544_ap_done,
        ap_idle => grp_load_points_buffer_fu_544_ap_idle,
        ap_ready => grp_load_points_buffer_fu_544_ap_ready,
        offset => grp_load_points_buffer_fu_544_offset,
        address => grp_load_points_buffer_fu_544_address,
        bus_r_req_din => grp_load_points_buffer_fu_544_bus_r_req_din,
        bus_r_req_full_n => grp_load_points_buffer_fu_544_bus_r_req_full_n,
        bus_r_req_write => grp_load_points_buffer_fu_544_bus_r_req_write,
        bus_r_rsp_empty_n => grp_load_points_buffer_fu_544_bus_r_rsp_empty_n,
        bus_r_rsp_read => grp_load_points_buffer_fu_544_bus_r_rsp_read,
        bus_r_address => grp_load_points_buffer_fu_544_bus_r_address,
        bus_r_datain => grp_load_points_buffer_fu_544_bus_r_datain,
        bus_r_dataout => grp_load_points_buffer_fu_544_bus_r_dataout,
        bus_r_size => grp_load_points_buffer_fu_544_bus_r_size,
        buffer_0_value_address0 => grp_load_points_buffer_fu_544_buffer_0_value_address0,
        buffer_0_value_ce0 => grp_load_points_buffer_fu_544_buffer_0_value_ce0,
        buffer_0_value_we0 => grp_load_points_buffer_fu_544_buffer_0_value_we0,
        buffer_0_value_d0 => grp_load_points_buffer_fu_544_buffer_0_value_d0,
        buffer_1_value_address0 => grp_load_points_buffer_fu_544_buffer_1_value_address0,
        buffer_1_value_ce0 => grp_load_points_buffer_fu_544_buffer_1_value_ce0,
        buffer_1_value_we0 => grp_load_points_buffer_fu_544_buffer_1_value_we0,
        buffer_1_value_d0 => grp_load_points_buffer_fu_544_buffer_1_value_d0,
        buffer_2_value_address0 => grp_load_points_buffer_fu_544_buffer_2_value_address0,
        buffer_2_value_ce0 => grp_load_points_buffer_fu_544_buffer_2_value_ce0,
        buffer_2_value_we0 => grp_load_points_buffer_fu_544_buffer_2_value_we0,
        buffer_2_value_d0 => grp_load_points_buffer_fu_544_buffer_2_value_d0);

    grp_store_output_buffer_fu_556 : component store_output_buffer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_store_output_buffer_fu_556_ap_start,
        ap_done => grp_store_output_buffer_fu_556_ap_done,
        ap_idle => grp_store_output_buffer_fu_556_ap_idle,
        ap_ready => grp_store_output_buffer_fu_556_ap_ready,
        offset => grp_store_output_buffer_fu_556_offset,
        buffer_min_idx_V_address0 => grp_store_output_buffer_fu_556_buffer_min_idx_V_address0,
        buffer_min_idx_V_ce0 => grp_store_output_buffer_fu_556_buffer_min_idx_V_ce0,
        buffer_min_idx_V_q0 => grp_store_output_buffer_fu_556_buffer_min_idx_V_q0,
        buffer_sum_sq_address0 => grp_store_output_buffer_fu_556_buffer_sum_sq_address0,
        buffer_sum_sq_ce0 => grp_store_output_buffer_fu_556_buffer_sum_sq_ce0,
        buffer_sum_sq_q0 => grp_store_output_buffer_fu_556_buffer_sum_sq_q0,
        address => grp_store_output_buffer_fu_556_address,
        bus_r_req_din => grp_store_output_buffer_fu_556_bus_r_req_din,
        bus_r_req_full_n => grp_store_output_buffer_fu_556_bus_r_req_full_n,
        bus_r_req_write => grp_store_output_buffer_fu_556_bus_r_req_write,
        bus_r_rsp_empty_n => grp_store_output_buffer_fu_556_bus_r_rsp_empty_n,
        bus_r_rsp_read => grp_store_output_buffer_fu_556_bus_r_rsp_read,
        bus_r_address => grp_store_output_buffer_fu_556_bus_r_address,
        bus_r_datain => grp_store_output_buffer_fu_556_bus_r_datain,
        bus_r_dataout => grp_store_output_buffer_fu_556_bus_r_dataout,
        bus_r_size => grp_store_output_buffer_fu_556_bus_r_size);

    lloyds_kernel_top_mul_32s_32s_64_6_U28 : component lloyds_kernel_top_mul_32s_32s_64_6
    generic map (
        ID => 28,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_653_p0,
        din1 => grp_fu_653_p1,
        ce => grp_fu_653_ce,
        dout => grp_fu_653_p2);

    lloyds_kernel_top_mul_32s_32s_64_6_U29 : component lloyds_kernel_top_mul_32s_32s_64_6
    generic map (
        ID => 29,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_667_p0,
        din1 => grp_fu_667_p1,
        ce => grp_fu_667_ce,
        dout => grp_fu_667_p2);

    lloyds_kernel_top_mul_32s_32s_64_6_U30 : component lloyds_kernel_top_mul_32s_32s_64_6
    generic map (
        ID => 30,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_681_p0,
        din1 => grp_fu_681_p1,
        ce => grp_fu_681_ce,
        dout => grp_fu_681_p2);

    lloyds_kernel_top_add_32ns_32ns_32_1_U31 : component lloyds_kernel_top_add_32ns_32ns_32_1
    generic map (
        ID => 31,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp3_fu_717_p0,
        din1 => tmp3_fu_717_p1,
        dout => tmp3_fu_717_p2);

    lloyds_kernel_top_add_32ns_32ns_32_1_U32 : component lloyds_kernel_top_add_32ns_32ns_32_1
    generic map (
        ID => 32,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => sum_sq_out_3_fu_723_p0,
        din1 => sum_sq_out_3_fu_723_p1,
        dout => sum_sq_out_3_fu_723_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm) and (not((ap_const_lv1_0 = tmp_3_fu_621_p2)) or ((ap_const_lv1_0 = tmp_3_fu_621_p2) and not((ap_const_lv1_0 = tmp_14_fu_639_p2)))))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- block_address0data_reg assign process. --
    block_address0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                block_address0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = block_address0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = block_address0vld_reg) and (ap_const_logic_1 = block_address0ack_out)))) then 
                    block_address0data_reg <= block_address;
                end if; 
            end if;
        end if;
    end process;


    -- block_address0vld_reg assign process. --
    block_address0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- centres_in_addr0data_reg assign process. --
    centres_in_addr0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                centres_in_addr0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = centres_in_addr0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = centres_in_addr0vld_reg) and (ap_const_logic_1 = centres_in_addr0ack_out)))) then 
                    centres_in_addr0data_reg <= centres_in_addr;
                end if; 
            end if;
        end if;
    end process;


    -- centres_in_addr0vld_reg assign process. --
    centres_in_addr0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- data_points_addr0data_reg assign process. --
    data_points_addr0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                data_points_addr0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = data_points_addr0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = data_points_addr0vld_reg) and (ap_const_logic_1 = data_points_addr0ack_out)))) then 
                    data_points_addr0data_reg <= data_points_addr;
                end if; 
            end if;
        end if;
    end process;


    -- data_points_addr0vld_reg assign process. --
    data_points_addr0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- debug1data_reg assign process. --
    debug1data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                debug1data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = debug1vld_in) and (ap_const_logic_0 = debug1vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = debug1vld_in) and (ap_const_logic_1 = debug1vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
                    debug1data_reg <= data_points_buffer_0_value_q0;
                end if; 
            end if;
        end if;
    end process;


    -- debug1vld_reg assign process. --
    debug1vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- grp_load_centres_buffer_fu_522_ap_start_ap_start_reg assign process. --
    grp_load_centres_buffer_fu_522_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_load_centres_buffer_fu_522_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                    grp_load_centres_buffer_fu_522_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_load_centres_buffer_fu_522_ap_ready)) then 
                    grp_load_centres_buffer_fu_522_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_load_points_buffer_fu_544_ap_start_ap_start_reg assign process. --
    grp_load_points_buffer_fu_544_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_load_points_buffer_fu_544_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
                    grp_load_points_buffer_fu_544_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_load_points_buffer_fu_544_ap_ready)) then 
                    grp_load_points_buffer_fu_544_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_store_output_buffer_fu_556_ap_start_ap_start_reg assign process. --
    grp_store_output_buffer_fu_556_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_store_output_buffer_fu_556_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((exitcond_fu_593_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_s_fu_612_p2)))) then 
                    grp_store_output_buffer_fu_556_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_store_output_buffer_fu_556_ap_ready)) then 
                    grp_store_output_buffer_fu_556_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_store_output_points_buffer_fu_533_ap_start_ap_start_reg assign process. --
    grp_store_output_points_buffer_fu_533_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_store_output_points_buffer_fu_533_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((exitcond_fu_593_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_s_fu_612_p2))) then 
                    grp_store_output_points_buffer_fu_533_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_store_output_points_buffer_fu_533_ap_ready)) then 
                    grp_store_output_points_buffer_fu_533_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- k0data_reg assign process. --
    k0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                k0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = k0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = k0vld_reg) and (ap_const_logic_1 = k0ack_out)))) then 
                    k0data_reg <= k;
                end if; 
            end if;
        end if;
    end process;


    -- k0vld_reg assign process. --
    k0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- output_addr0data_reg assign process. --
    output_addr0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_addr0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = output_addr0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = output_addr0vld_reg) and (ap_const_logic_1 = output_addr0ack_out)))) then 
                    output_addr0data_reg <= output_addr;
                end if; 
            end if;
        end if;
    end process;


    -- output_addr0vld_reg assign process. --
    output_addr0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- update_points0data_reg assign process. --
    update_points0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                update_points0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = update_points0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = update_points0vld_reg) and (ap_const_logic_1 = update_points0ack_out)))) then 
                    update_points0data_reg <= update_points;
                end if; 
            end if;
        end if;
    end process;


    -- update_points0vld_reg assign process. --
    update_points0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- closest_centre_value_0_1_reg_414 assign process. --
    closest_centre_value_0_1_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_877_pp0_it7) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_901_pp0_it7))) then 
                closest_centre_value_0_1_reg_414 <= closest_centre_value_0_closest_centre_value_0_1_fu_747_p3;
            elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
                closest_centre_value_0_1_reg_414 <= closest_centre_value_0_s_reg_357;
            end if; 
        end if;
    end process;

    -- closest_centre_value_0_3_reg_486 assign process. --
    closest_centre_value_0_3_reg_486_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_426) then
                if (ap_sig_bdd_679) then 
                    closest_centre_value_0_3_reg_486 <= closest_centre_value_0_closest_centre_value_0_1_fu_747_p3;
                elsif (not((ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_877_pp0_it7))) then 
                    closest_centre_value_0_3_reg_486 <= closest_centre_value_0_1_reg_414;
                end if;
            end if; 
        end if;
    end process;

    -- closest_centre_value_1_1_reg_403 assign process. --
    closest_centre_value_1_1_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_877_pp0_it7) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_901_pp0_it7))) then 
                closest_centre_value_1_1_reg_403 <= closest_centre_value_1_closest_centre_value_1_1_fu_740_p3;
            elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
                closest_centre_value_1_1_reg_403 <= closest_centre_value_1_s_reg_345;
            end if; 
        end if;
    end process;

    -- closest_centre_value_1_3_reg_473 assign process. --
    closest_centre_value_1_3_reg_473_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_426) then
                if (ap_sig_bdd_679) then 
                    closest_centre_value_1_3_reg_473 <= closest_centre_value_1_closest_centre_value_1_1_fu_740_p3;
                elsif (not((ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_877_pp0_it7))) then 
                    closest_centre_value_1_3_reg_473 <= closest_centre_value_1_1_reg_403;
                end if;
            end if; 
        end if;
    end process;

    -- closest_centre_value_2_1_reg_392 assign process. --
    closest_centre_value_2_1_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_877_pp0_it7) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_901_pp0_it7))) then 
                closest_centre_value_2_1_reg_392 <= closest_centre_value_2_closest_centre_value_2_1_fu_733_p3;
            elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
                closest_centre_value_2_1_reg_392 <= closest_centre_value_2_s_reg_333;
            end if; 
        end if;
    end process;

    -- closest_centre_value_2_3_reg_460 assign process. --
    closest_centre_value_2_3_reg_460_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_426) then
                if (ap_sig_bdd_679) then 
                    closest_centre_value_2_3_reg_460 <= closest_centre_value_2_closest_centre_value_2_1_fu_733_p3;
                elsif (not((ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_877_pp0_it7))) then 
                    closest_centre_value_2_3_reg_460 <= closest_centre_value_2_1_reg_392;
                end if;
            end if; 
        end if;
    end process;

    -- final_centre_index_V_reg_380 assign process. --
    final_centre_index_V_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = tmp_3_reg_877) and (ap_const_lv1_0 = tmp_14_reg_901))) then 
                final_centre_index_V_reg_380 <= ii_V_reg_881;
            elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
                final_centre_index_V_reg_380 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- i_reg_369 assign process. --
    i_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st18_fsm_9 = ap_CS_fsm)) then 
                i_reg_369 <= i_1_reg_834;
            elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
                i_reg_369 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- min_dist_reg_449 assign process. --
    min_dist_reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_877_pp0_it7) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_901_pp0_it7))) then 
                min_dist_reg_449 <= tmp_dist_min_dist_fu_770_p3;
            elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
                min_dist_reg_449 <= ap_const_lv32_7FFFFFFF;
            end if; 
        end if;
    end process;

    -- p_036_2_reg_499 assign process. --
    p_036_2_reg_499_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_426) then
                if (ap_sig_bdd_679) then 
                    p_036_2_reg_499 <= final_centre_index_V_s_fu_754_p3;
                elsif (not((ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_877_pp0_it7))) then 
                    p_036_2_reg_499 <= p_s_reg_425;
                end if;
            end if; 
        end if;
    end process;

    -- p_s_reg_425 assign process. --
    p_s_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_877_pp0_it7) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_901_pp0_it7))) then 
                p_s_reg_425 <= final_centre_index_V_s_fu_754_p3;
            elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
                p_s_reg_425 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- sum_sq_out_2_reg_510 assign process. --
    sum_sq_out_2_reg_510_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_426) then
                if (ap_sig_bdd_679) then 
                    sum_sq_out_2_reg_510 <= tmp_dist_sum_sq_out_fu_762_p3;
                elsif (not((ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_877_pp0_it7))) then 
                    sum_sq_out_2_reg_510 <= sum_sq_out_reg_437;
                end if;
            end if; 
        end if;
    end process;

    -- sum_sq_out_reg_437 assign process. --
    sum_sq_out_reg_437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_877_pp0_it7) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_901_pp0_it7))) then 
                sum_sq_out_reg_437 <= tmp_dist_sum_sq_out_fu_762_p3;
            elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
                sum_sq_out_reg_437 <= ap_const_lv32_7FFFFFFF;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm)) then
                ap_reg_ppstg_closest_centre_value_0_reg_905_pp0_it2 <= closest_centre_value_0_reg_905;
                ap_reg_ppstg_closest_centre_value_0_reg_905_pp0_it3 <= ap_reg_ppstg_closest_centre_value_0_reg_905_pp0_it2;
                ap_reg_ppstg_closest_centre_value_0_reg_905_pp0_it4 <= ap_reg_ppstg_closest_centre_value_0_reg_905_pp0_it3;
                ap_reg_ppstg_closest_centre_value_0_reg_905_pp0_it5 <= ap_reg_ppstg_closest_centre_value_0_reg_905_pp0_it4;
                ap_reg_ppstg_closest_centre_value_0_reg_905_pp0_it6 <= ap_reg_ppstg_closest_centre_value_0_reg_905_pp0_it5;
                ap_reg_ppstg_closest_centre_value_0_reg_905_pp0_it7 <= ap_reg_ppstg_closest_centre_value_0_reg_905_pp0_it6;
                ap_reg_ppstg_closest_centre_value_1_reg_911_pp0_it2 <= closest_centre_value_1_reg_911;
                ap_reg_ppstg_closest_centre_value_1_reg_911_pp0_it3 <= ap_reg_ppstg_closest_centre_value_1_reg_911_pp0_it2;
                ap_reg_ppstg_closest_centre_value_1_reg_911_pp0_it4 <= ap_reg_ppstg_closest_centre_value_1_reg_911_pp0_it3;
                ap_reg_ppstg_closest_centre_value_1_reg_911_pp0_it5 <= ap_reg_ppstg_closest_centre_value_1_reg_911_pp0_it4;
                ap_reg_ppstg_closest_centre_value_1_reg_911_pp0_it6 <= ap_reg_ppstg_closest_centre_value_1_reg_911_pp0_it5;
                ap_reg_ppstg_closest_centre_value_1_reg_911_pp0_it7 <= ap_reg_ppstg_closest_centre_value_1_reg_911_pp0_it6;
                ap_reg_ppstg_closest_centre_value_2_reg_917_pp0_it2 <= closest_centre_value_2_reg_917;
                ap_reg_ppstg_closest_centre_value_2_reg_917_pp0_it3 <= ap_reg_ppstg_closest_centre_value_2_reg_917_pp0_it2;
                ap_reg_ppstg_closest_centre_value_2_reg_917_pp0_it4 <= ap_reg_ppstg_closest_centre_value_2_reg_917_pp0_it3;
                ap_reg_ppstg_closest_centre_value_2_reg_917_pp0_it5 <= ap_reg_ppstg_closest_centre_value_2_reg_917_pp0_it4;
                ap_reg_ppstg_closest_centre_value_2_reg_917_pp0_it6 <= ap_reg_ppstg_closest_centre_value_2_reg_917_pp0_it5;
                ap_reg_ppstg_closest_centre_value_2_reg_917_pp0_it7 <= ap_reg_ppstg_closest_centre_value_2_reg_917_pp0_it6;
                ap_reg_ppstg_final_centre_index_V_reg_380_pp0_it1 <= final_centre_index_V_reg_380;
                ap_reg_ppstg_final_centre_index_V_reg_380_pp0_it2 <= ap_reg_ppstg_final_centre_index_V_reg_380_pp0_it1;
                ap_reg_ppstg_final_centre_index_V_reg_380_pp0_it3 <= ap_reg_ppstg_final_centre_index_V_reg_380_pp0_it2;
                ap_reg_ppstg_final_centre_index_V_reg_380_pp0_it4 <= ap_reg_ppstg_final_centre_index_V_reg_380_pp0_it3;
                ap_reg_ppstg_final_centre_index_V_reg_380_pp0_it5 <= ap_reg_ppstg_final_centre_index_V_reg_380_pp0_it4;
                ap_reg_ppstg_final_centre_index_V_reg_380_pp0_it6 <= ap_reg_ppstg_final_centre_index_V_reg_380_pp0_it5;
                ap_reg_ppstg_final_centre_index_V_reg_380_pp0_it7 <= ap_reg_ppstg_final_centre_index_V_reg_380_pp0_it6;
                ap_reg_ppstg_tmp_14_reg_901_pp0_it1 <= tmp_14_reg_901;
                ap_reg_ppstg_tmp_14_reg_901_pp0_it2 <= ap_reg_ppstg_tmp_14_reg_901_pp0_it1;
                ap_reg_ppstg_tmp_14_reg_901_pp0_it3 <= ap_reg_ppstg_tmp_14_reg_901_pp0_it2;
                ap_reg_ppstg_tmp_14_reg_901_pp0_it4 <= ap_reg_ppstg_tmp_14_reg_901_pp0_it3;
                ap_reg_ppstg_tmp_14_reg_901_pp0_it5 <= ap_reg_ppstg_tmp_14_reg_901_pp0_it4;
                ap_reg_ppstg_tmp_14_reg_901_pp0_it6 <= ap_reg_ppstg_tmp_14_reg_901_pp0_it5;
                ap_reg_ppstg_tmp_14_reg_901_pp0_it7 <= ap_reg_ppstg_tmp_14_reg_901_pp0_it6;
                ap_reg_ppstg_tmp_3_reg_877_pp0_it1 <= tmp_3_reg_877;
                ap_reg_ppstg_tmp_3_reg_877_pp0_it2 <= ap_reg_ppstg_tmp_3_reg_877_pp0_it1;
                ap_reg_ppstg_tmp_3_reg_877_pp0_it3 <= ap_reg_ppstg_tmp_3_reg_877_pp0_it2;
                ap_reg_ppstg_tmp_3_reg_877_pp0_it4 <= ap_reg_ppstg_tmp_3_reg_877_pp0_it3;
                ap_reg_ppstg_tmp_3_reg_877_pp0_it5 <= ap_reg_ppstg_tmp_3_reg_877_pp0_it4;
                ap_reg_ppstg_tmp_3_reg_877_pp0_it6 <= ap_reg_ppstg_tmp_3_reg_877_pp0_it5;
                ap_reg_ppstg_tmp_3_reg_877_pp0_it7 <= ap_reg_ppstg_tmp_3_reg_877_pp0_it6;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = tmp_3_reg_877))) then
                closest_centre_value_0_reg_905 <= centres_buffer_0_value_q0;
                closest_centre_value_1_reg_911 <= centres_buffer_1_value_q0;
                closest_centre_value_2_reg_917 <= centres_buffer_2_value_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st18_fsm_9 = ap_CS_fsm)) then
                closest_centre_value_0_s_reg_357 <= closest_centre_value_0_3_reg_486;
                closest_centre_value_1_s_reg_345 <= closest_centre_value_1_3_reg_473;
                closest_centre_value_2_s_reg_333 <= closest_centre_value_2_3_reg_460;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                data_points_block_address_reg_810 <= data_points_block_address_fu_577_p2;
                tmp_16_reg_816 <= tmp_16_fu_584_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then
                data_points_buffer_1_value_load_reg_867 <= data_points_buffer_1_value_q0;
                data_points_buffer_2_value_load_reg_872 <= data_points_buffer_2_value_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then
                i_1_reg_834 <= i_1_fu_599_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                ii_V_reg_881 <= ii_V_fu_626_p2;
                tmp_3_reg_877 <= tmp_3_fu_621_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then
                kernel_info_block_address_reg_826(1) <= kernel_info_block_address_fu_588_p2(1);
    kernel_info_block_address_reg_826(2) <= kernel_info_block_address_fu_588_p2(2);
    kernel_info_block_address_reg_826(3) <= kernel_info_block_address_fu_588_p2(3);
    kernel_info_block_address_reg_826(4) <= kernel_info_block_address_fu_588_p2(4);
    kernel_info_block_address_reg_826(5) <= kernel_info_block_address_fu_588_p2(5);
    kernel_info_block_address_reg_826(6) <= kernel_info_block_address_fu_588_p2(6);
    kernel_info_block_address_reg_826(7) <= kernel_info_block_address_fu_588_p2(7);
    kernel_info_block_address_reg_826(8) <= kernel_info_block_address_fu_588_p2(8);
    kernel_info_block_address_reg_826(9) <= kernel_info_block_address_fu_588_p2(9);
    kernel_info_block_address_reg_826(10) <= kernel_info_block_address_fu_588_p2(10);
    kernel_info_block_address_reg_826(11) <= kernel_info_block_address_fu_588_p2(11);
    kernel_info_block_address_reg_826(12) <= kernel_info_block_address_fu_588_p2(12);
    kernel_info_block_address_reg_826(13) <= kernel_info_block_address_fu_588_p2(13);
    kernel_info_block_address_reg_826(14) <= kernel_info_block_address_fu_588_p2(14);
    kernel_info_block_address_reg_826(15) <= kernel_info_block_address_fu_588_p2(15);
    kernel_info_block_address_reg_826(16) <= kernel_info_block_address_fu_588_p2(16);
    kernel_info_block_address_reg_826(17) <= kernel_info_block_address_fu_588_p2(17);
    kernel_info_block_address_reg_826(18) <= kernel_info_block_address_fu_588_p2(18);
    kernel_info_block_address_reg_826(19) <= kernel_info_block_address_fu_588_p2(19);
    kernel_info_block_address_reg_826(20) <= kernel_info_block_address_fu_588_p2(20);
    kernel_info_block_address_reg_826(21) <= kernel_info_block_address_fu_588_p2(21);
    kernel_info_block_address_reg_826(22) <= kernel_info_block_address_fu_588_p2(22);
    kernel_info_block_address_reg_826(23) <= kernel_info_block_address_fu_588_p2(23);
    kernel_info_block_address_reg_826(24) <= kernel_info_block_address_fu_588_p2(24);
    kernel_info_block_address_reg_826(25) <= kernel_info_block_address_fu_588_p2(25);
    kernel_info_block_address_reg_826(26) <= kernel_info_block_address_fu_588_p2(26);
    kernel_info_block_address_reg_826(27) <= kernel_info_block_address_fu_588_p2(27);
    kernel_info_block_address_reg_826(28) <= kernel_info_block_address_fu_588_p2(28);
    kernel_info_block_address_reg_826(29) <= kernel_info_block_address_fu_588_p2(29);
    kernel_info_block_address_reg_826(30) <= kernel_info_block_address_fu_588_p2(30);
    kernel_info_block_address_reg_826(31) <= kernel_info_block_address_fu_588_p2(31);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_logic_0 = grp_load_centres_buffer_fu_522_ap_done))) or (ap_ST_st8_fsm_7 = ap_CS_fsm))) then
                reg_566 <= data_points_buffer_0_value_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_877_pp0_it6))) then
                result_2_reg_941 <= grp_fu_681_p2(37 downto 6);
                tmp3_reg_946 <= tmp3_fu_717_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = tmp_3_fu_621_p2))) then
                tmp_14_reg_901 <= tmp_14_fu_639_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st7_fsm_6 = ap_CS_fsm) and (exitcond_fu_593_p2 = ap_const_lv1_0))) then
                tmp_1_reg_839(0) <= tmp_1_fu_605_p1(0);
    tmp_1_reg_839(1) <= tmp_1_fu_605_p1(1);
    tmp_1_reg_839(2) <= tmp_1_fu_605_p1(2);
    tmp_1_reg_839(3) <= tmp_1_fu_605_p1(3);
    tmp_1_reg_839(4) <= tmp_1_fu_605_p1(4);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((exitcond_fu_593_p2 = ap_const_lv1_0)))) then
                tmp_s_reg_863 <= tmp_s_fu_612_p2;
            end if;
        end if;
    end process;
    block_address0vld_reg <= '0';
    data_points_addr0vld_reg <= '0';
    centres_in_addr0vld_reg <= '0';
    output_addr0vld_reg <= '0';
    update_points0vld_reg <= '0';
    k0vld_reg <= '0';
    debug1vld_reg <= '0';
    kernel_info_block_address_reg_826(0) <= '0';
    tmp_1_reg_839(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , debug1ack_in , ap_reg_ppiten_pp0_it7 , ap_reg_ppiten_pp0_it8 , grp_load_centres_buffer_fu_522_ap_done , exitcond_fu_593_p2 , tmp_s_reg_863 , grp_store_output_points_buffer_fu_533_ap_done , grp_load_points_buffer_fu_544_ap_done , grp_store_output_buffer_fu_556_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = grp_load_points_buffer_fu_544_ap_done))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_logic_0 = grp_load_centres_buffer_fu_522_ap_done))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                if (not((exitcond_fu_593_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_8;
            when ap_ST_pp0_stg0_fsm_8 => 
                if (not(((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it7))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_9;
                end if;
            when ap_ST_st18_fsm_9 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st19_fsm_10 => 
                if (not(((debug1ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_863) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_533_ap_done)) or (not((ap_const_lv1_0 = tmp_s_reg_863)) and (ap_const_logic_0 = grp_store_output_buffer_fu_556_ap_done))))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st19_fsm_10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, debug1ack_in, tmp_s_reg_863, grp_store_output_points_buffer_fu_533_ap_done, grp_store_output_buffer_fu_556_ap_done)
    begin
        if (((ap_ST_st19_fsm_10 = ap_CS_fsm) and not(((debug1ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_863) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_533_ap_done)) or (not((ap_const_lv1_0 = tmp_s_reg_863)) and (ap_const_logic_0 = grp_store_output_buffer_fu_556_ap_done)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, debug1ack_in, tmp_s_reg_863, grp_store_output_points_buffer_fu_533_ap_done, grp_store_output_buffer_fu_556_ap_done)
    begin
        if (((ap_ST_st19_fsm_10 = ap_CS_fsm) and not(((debug1ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_863) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_533_ap_done)) or (not((ap_const_lv1_0 = tmp_s_reg_863)) and (ap_const_logic_0 = grp_store_output_buffer_fu_556_ap_done)))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_426 assign process. --
    ap_sig_bdd_426_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it8)
    begin
                ap_sig_bdd_426 <= ((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it8));
    end process;


    -- ap_sig_bdd_679 assign process. --
    ap_sig_bdd_679_assign_proc : process(ap_reg_ppstg_tmp_3_reg_877_pp0_it7, ap_reg_ppstg_tmp_14_reg_901_pp0_it7)
    begin
                ap_sig_bdd_679 <= ((ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_877_pp0_it7) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_901_pp0_it7)));
    end process;


    -- block_address0ack_out assign process. --
    block_address0ack_out_assign_proc : process(ap_CS_fsm, debug1ack_in, tmp_s_reg_863, grp_store_output_points_buffer_fu_533_ap_done, grp_store_output_buffer_fu_556_ap_done)
    begin
        if (((ap_ST_st19_fsm_10 = ap_CS_fsm) and not(((debug1ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_863) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_533_ap_done)) or (not((ap_const_lv1_0 = tmp_s_reg_863)) and (ap_const_logic_0 = grp_store_output_buffer_fu_556_ap_done)))))) then 
            block_address0ack_out <= ap_const_logic_1;
        else 
            block_address0ack_out <= ap_const_logic_0;
        end if; 
    end process;


    -- centres_buffer_0_value_address0 assign process. --
    centres_buffer_0_value_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, grp_load_centres_buffer_fu_522_buffer_0_value_address0, tmp_5_fu_632_p1)
    begin
        if (((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            centres_buffer_0_value_address0 <= tmp_5_fu_632_p1(8 - 1 downto 0);
        elsif ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            centres_buffer_0_value_address0 <= grp_load_centres_buffer_fu_522_buffer_0_value_address0;
        else 
            centres_buffer_0_value_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- centres_buffer_0_value_ce0 assign process. --
    centres_buffer_0_value_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, grp_load_centres_buffer_fu_522_buffer_0_value_ce0)
    begin
        if (((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            centres_buffer_0_value_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            centres_buffer_0_value_ce0 <= grp_load_centres_buffer_fu_522_buffer_0_value_ce0;
        else 
            centres_buffer_0_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    centres_buffer_0_value_d0 <= grp_load_centres_buffer_fu_522_buffer_0_value_d0;

    -- centres_buffer_0_value_we0 assign process. --
    centres_buffer_0_value_we0_assign_proc : process(ap_CS_fsm, grp_load_centres_buffer_fu_522_buffer_0_value_we0)
    begin
        if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            centres_buffer_0_value_we0 <= grp_load_centres_buffer_fu_522_buffer_0_value_we0;
        else 
            centres_buffer_0_value_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centres_buffer_1_value_address0 assign process. --
    centres_buffer_1_value_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, grp_load_centres_buffer_fu_522_buffer_1_value_address0, tmp_5_fu_632_p1)
    begin
        if (((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            centres_buffer_1_value_address0 <= tmp_5_fu_632_p1(8 - 1 downto 0);
        elsif ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            centres_buffer_1_value_address0 <= grp_load_centres_buffer_fu_522_buffer_1_value_address0;
        else 
            centres_buffer_1_value_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- centres_buffer_1_value_ce0 assign process. --
    centres_buffer_1_value_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, grp_load_centres_buffer_fu_522_buffer_1_value_ce0)
    begin
        if (((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            centres_buffer_1_value_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            centres_buffer_1_value_ce0 <= grp_load_centres_buffer_fu_522_buffer_1_value_ce0;
        else 
            centres_buffer_1_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    centres_buffer_1_value_d0 <= grp_load_centres_buffer_fu_522_buffer_1_value_d0;

    -- centres_buffer_1_value_we0 assign process. --
    centres_buffer_1_value_we0_assign_proc : process(ap_CS_fsm, grp_load_centres_buffer_fu_522_buffer_1_value_we0)
    begin
        if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            centres_buffer_1_value_we0 <= grp_load_centres_buffer_fu_522_buffer_1_value_we0;
        else 
            centres_buffer_1_value_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centres_buffer_2_value_address0 assign process. --
    centres_buffer_2_value_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, grp_load_centres_buffer_fu_522_buffer_2_value_address0, tmp_5_fu_632_p1)
    begin
        if (((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            centres_buffer_2_value_address0 <= tmp_5_fu_632_p1(8 - 1 downto 0);
        elsif ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            centres_buffer_2_value_address0 <= grp_load_centres_buffer_fu_522_buffer_2_value_address0;
        else 
            centres_buffer_2_value_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- centres_buffer_2_value_ce0 assign process. --
    centres_buffer_2_value_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, grp_load_centres_buffer_fu_522_buffer_2_value_ce0)
    begin
        if (((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            centres_buffer_2_value_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            centres_buffer_2_value_ce0 <= grp_load_centres_buffer_fu_522_buffer_2_value_ce0;
        else 
            centres_buffer_2_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    centres_buffer_2_value_d0 <= grp_load_centres_buffer_fu_522_buffer_2_value_d0;

    -- centres_buffer_2_value_we0 assign process. --
    centres_buffer_2_value_we0_assign_proc : process(ap_CS_fsm, grp_load_centres_buffer_fu_522_buffer_2_value_we0)
    begin
        if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            centres_buffer_2_value_we0 <= grp_load_centres_buffer_fu_522_buffer_2_value_we0;
        else 
            centres_buffer_2_value_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- centres_in_addr0ack_out assign process. --
    centres_in_addr0ack_out_assign_proc : process(ap_CS_fsm, debug1ack_in, tmp_s_reg_863, grp_store_output_points_buffer_fu_533_ap_done, grp_store_output_buffer_fu_556_ap_done)
    begin
        if (((ap_ST_st19_fsm_10 = ap_CS_fsm) and not(((debug1ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_863) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_533_ap_done)) or (not((ap_const_lv1_0 = tmp_s_reg_863)) and (ap_const_logic_0 = grp_store_output_buffer_fu_556_ap_done)))))) then 
            centres_in_addr0ack_out <= ap_const_logic_1;
        else 
            centres_in_addr0ack_out <= ap_const_logic_0;
        end if; 
    end process;

    closest_centre_value_0_closest_centre_value_0_1_fu_747_p3 <= 
        ap_reg_ppstg_closest_centre_value_0_reg_905_pp0_it7 when (tmp_13_fu_727_p2(0) = '1') else 
        closest_centre_value_0_1_reg_414;
    closest_centre_value_1_closest_centre_value_1_1_fu_740_p3 <= 
        ap_reg_ppstg_closest_centre_value_1_reg_911_pp0_it7 when (tmp_13_fu_727_p2(0) = '1') else 
        closest_centre_value_1_1_reg_403;
    closest_centre_value_2_closest_centre_value_2_1_fu_733_p3 <= 
        ap_reg_ppstg_closest_centre_value_2_reg_917_pp0_it7 when (tmp_13_fu_727_p2(0) = '1') else 
        closest_centre_value_2_1_reg_392;

    -- data_points_addr0ack_out assign process. --
    data_points_addr0ack_out_assign_proc : process(ap_CS_fsm, debug1ack_in, tmp_s_reg_863, grp_store_output_points_buffer_fu_533_ap_done, grp_store_output_buffer_fu_556_ap_done)
    begin
        if (((ap_ST_st19_fsm_10 = ap_CS_fsm) and not(((debug1ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_863) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_533_ap_done)) or (not((ap_const_lv1_0 = tmp_s_reg_863)) and (ap_const_logic_0 = grp_store_output_buffer_fu_556_ap_done)))))) then 
            data_points_addr0ack_out <= ap_const_logic_1;
        else 
            data_points_addr0ack_out <= ap_const_logic_0;
        end if; 
    end process;

    data_points_block_address_fu_577_p2 <= std_logic_vector(unsigned(tmp_11_fu_571_p2) - unsigned(block_address0data_reg));

    -- data_points_buffer_0_value_address0 assign process. --
    data_points_buffer_0_value_address0_assign_proc : process(ap_CS_fsm, tmp_1_fu_605_p1, grp_load_points_buffer_fu_544_buffer_0_value_address0)
    begin
        if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            data_points_buffer_0_value_address0 <= tmp_1_fu_605_p1(4 - 1 downto 0);
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            data_points_buffer_0_value_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            data_points_buffer_0_value_address0 <= grp_load_points_buffer_fu_544_buffer_0_value_address0;
        else 
            data_points_buffer_0_value_address0 <= "XXXX";
        end if; 
    end process;


    -- data_points_buffer_0_value_ce0 assign process. --
    data_points_buffer_0_value_ce0_assign_proc : process(ap_CS_fsm, grp_load_points_buffer_fu_544_buffer_0_value_ce0)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            data_points_buffer_0_value_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            data_points_buffer_0_value_ce0 <= grp_load_points_buffer_fu_544_buffer_0_value_ce0;
        else 
            data_points_buffer_0_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_points_buffer_0_value_d0 <= grp_load_points_buffer_fu_544_buffer_0_value_d0;

    -- data_points_buffer_0_value_we0 assign process. --
    data_points_buffer_0_value_we0_assign_proc : process(ap_CS_fsm, grp_load_points_buffer_fu_544_buffer_0_value_we0)
    begin
        if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            data_points_buffer_0_value_we0 <= grp_load_points_buffer_fu_544_buffer_0_value_we0;
        else 
            data_points_buffer_0_value_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- data_points_buffer_1_value_address0 assign process. --
    data_points_buffer_1_value_address0_assign_proc : process(ap_CS_fsm, tmp_1_fu_605_p1, grp_load_points_buffer_fu_544_buffer_1_value_address0)
    begin
        if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            data_points_buffer_1_value_address0 <= tmp_1_fu_605_p1(4 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            data_points_buffer_1_value_address0 <= grp_load_points_buffer_fu_544_buffer_1_value_address0;
        else 
            data_points_buffer_1_value_address0 <= "XXXX";
        end if; 
    end process;


    -- data_points_buffer_1_value_ce0 assign process. --
    data_points_buffer_1_value_ce0_assign_proc : process(ap_CS_fsm, grp_load_points_buffer_fu_544_buffer_1_value_ce0)
    begin
        if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            data_points_buffer_1_value_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            data_points_buffer_1_value_ce0 <= grp_load_points_buffer_fu_544_buffer_1_value_ce0;
        else 
            data_points_buffer_1_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_points_buffer_1_value_d0 <= grp_load_points_buffer_fu_544_buffer_1_value_d0;

    -- data_points_buffer_1_value_we0 assign process. --
    data_points_buffer_1_value_we0_assign_proc : process(ap_CS_fsm, grp_load_points_buffer_fu_544_buffer_1_value_we0)
    begin
        if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            data_points_buffer_1_value_we0 <= grp_load_points_buffer_fu_544_buffer_1_value_we0;
        else 
            data_points_buffer_1_value_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- data_points_buffer_2_value_address0 assign process. --
    data_points_buffer_2_value_address0_assign_proc : process(ap_CS_fsm, tmp_1_fu_605_p1, grp_load_points_buffer_fu_544_buffer_2_value_address0)
    begin
        if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            data_points_buffer_2_value_address0 <= tmp_1_fu_605_p1(4 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            data_points_buffer_2_value_address0 <= grp_load_points_buffer_fu_544_buffer_2_value_address0;
        else 
            data_points_buffer_2_value_address0 <= "XXXX";
        end if; 
    end process;


    -- data_points_buffer_2_value_ce0 assign process. --
    data_points_buffer_2_value_ce0_assign_proc : process(ap_CS_fsm, grp_load_points_buffer_fu_544_buffer_2_value_ce0)
    begin
        if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            data_points_buffer_2_value_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            data_points_buffer_2_value_ce0 <= grp_load_points_buffer_fu_544_buffer_2_value_ce0;
        else 
            data_points_buffer_2_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_points_buffer_2_value_d0 <= grp_load_points_buffer_fu_544_buffer_2_value_d0;

    -- data_points_buffer_2_value_we0 assign process. --
    data_points_buffer_2_value_we0_assign_proc : process(ap_CS_fsm, grp_load_points_buffer_fu_544_buffer_2_value_we0)
    begin
        if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            data_points_buffer_2_value_we0 <= grp_load_points_buffer_fu_544_buffer_2_value_we0;
        else 
            data_points_buffer_2_value_we0 <= ap_const_logic_0;
        end if; 
    end process;

    debug <= debug1data_reg;

    -- debug1ack_in assign process. --
    debug1ack_in_assign_proc : process(debug1vld_reg)
    begin
        if (((ap_const_logic_0 = debug1vld_reg) or ((ap_const_logic_1 = debug1vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            debug1ack_in <= ap_const_logic_1;
        else 
            debug1ack_in <= ap_const_logic_0;
        end if; 
    end process;


    -- debug1vld_in assign process. --
    debug1vld_in_assign_proc : process(ap_CS_fsm, grp_load_centres_buffer_fu_522_ap_done)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_logic_0 = grp_load_centres_buffer_fu_522_ap_done)))) then 
            debug1vld_in <= ap_const_logic_1;
        else 
            debug1vld_in <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_593_p2 <= "1" when (i_reg_369 = ap_const_lv5_10) else "0";

    -- final_centre_index_V_phi_fu_384_p4 assign process. --
    final_centre_index_V_phi_fu_384_p4_assign_proc : process(ap_CS_fsm, final_centre_index_V_reg_380, ap_reg_ppiten_pp0_it1, tmp_3_reg_877, ii_V_reg_881, tmp_14_reg_901)
    begin
        if (((ap_ST_pp0_stg0_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = tmp_3_reg_877) and (ap_const_lv1_0 = tmp_14_reg_901))) then 
            final_centre_index_V_phi_fu_384_p4 <= ii_V_reg_881;
        else 
            final_centre_index_V_phi_fu_384_p4 <= final_centre_index_V_reg_380;
        end if; 
    end process;

    final_centre_index_V_s_fu_754_p3 <= 
        ap_reg_ppstg_final_centre_index_V_reg_380_pp0_it7 when (tmp_13_fu_727_p2(0) = '1') else 
        p_s_reg_425;
    grp_fu_653_ce <= ap_const_logic_1;
    grp_fu_653_p0 <= lhs_V_fu_649_p1(32 - 1 downto 0);
    grp_fu_653_p1 <= lhs_V_fu_649_p1(32 - 1 downto 0);
    grp_fu_667_ce <= ap_const_logic_1;
    grp_fu_667_p0 <= lhs_V_1_fu_663_p1(32 - 1 downto 0);
    grp_fu_667_p1 <= lhs_V_1_fu_663_p1(32 - 1 downto 0);
    grp_fu_681_ce <= ap_const_logic_1;
    grp_fu_681_p0 <= lhs_V_2_fu_677_p1(32 - 1 downto 0);
    grp_fu_681_p1 <= lhs_V_2_fu_677_p1(32 - 1 downto 0);
    grp_load_centres_buffer_fu_522_ap_start <= grp_load_centres_buffer_fu_522_ap_start_ap_start_reg;
    grp_load_centres_buffer_fu_522_bus_r_datain <= master_portA_datain;
    grp_load_centres_buffer_fu_522_bus_r_req_full_n <= master_portA_req_full_n;
    grp_load_centres_buffer_fu_522_bus_r_rsp_empty_n <= master_portA_rsp_empty_n;
    grp_load_centres_buffer_fu_522_k_V <= tmp_16_reg_816;
    grp_load_centres_buffer_fu_522_offset <= centres_in_addr0data_reg;
    grp_load_points_buffer_fu_544_address <= data_points_block_address_reg_810;
    grp_load_points_buffer_fu_544_ap_start <= grp_load_points_buffer_fu_544_ap_start_ap_start_reg;
    grp_load_points_buffer_fu_544_bus_r_datain <= master_portA_datain;
    grp_load_points_buffer_fu_544_bus_r_req_full_n <= master_portA_req_full_n;
    grp_load_points_buffer_fu_544_bus_r_rsp_empty_n <= master_portA_rsp_empty_n;
    grp_load_points_buffer_fu_544_offset <= data_points_addr0data_reg;
    grp_store_output_buffer_fu_556_address <= kernel_info_block_address_reg_826;
    grp_store_output_buffer_fu_556_ap_start <= grp_store_output_buffer_fu_556_ap_start_ap_start_reg;
    grp_store_output_buffer_fu_556_buffer_min_idx_V_q0 <= output_buffer_min_idx_V_q0;
    grp_store_output_buffer_fu_556_buffer_sum_sq_q0 <= output_buffer_sum_sq_q0;
    grp_store_output_buffer_fu_556_bus_r_datain <= master_portA_datain;
    grp_store_output_buffer_fu_556_bus_r_req_full_n <= master_portA_req_full_n;
    grp_store_output_buffer_fu_556_bus_r_rsp_empty_n <= master_portA_rsp_empty_n;
    grp_store_output_buffer_fu_556_offset <= output_addr0data_reg;
    grp_store_output_points_buffer_fu_533_address <= data_points_block_address_reg_810;
    grp_store_output_points_buffer_fu_533_ap_start <= grp_store_output_points_buffer_fu_533_ap_start_ap_start_reg;
    grp_store_output_points_buffer_fu_533_buffer_0_value_q0 <= output_points_buffer_0_value_q0;
    grp_store_output_points_buffer_fu_533_buffer_1_value_q0 <= output_points_buffer_1_value_q0;
    grp_store_output_points_buffer_fu_533_buffer_2_value_q0 <= output_points_buffer_2_value_q0;
    grp_store_output_points_buffer_fu_533_bus_r_datain <= master_portA_datain;
    grp_store_output_points_buffer_fu_533_bus_r_req_full_n <= master_portA_req_full_n;
    grp_store_output_points_buffer_fu_533_bus_r_rsp_empty_n <= master_portA_rsp_empty_n;
    grp_store_output_points_buffer_fu_533_offset <= output_addr0data_reg;
    i_1_fu_599_p2 <= std_logic_vector(unsigned(i_reg_369) + unsigned(ap_const_lv5_1));
    ii_V_fu_626_p2 <= std_logic_vector(unsigned(final_centre_index_V_phi_fu_384_p4) + unsigned(ap_const_lv8_1));

    -- k0ack_out assign process. --
    k0ack_out_assign_proc : process(ap_CS_fsm, debug1ack_in, tmp_s_reg_863, grp_store_output_points_buffer_fu_533_ap_done, grp_store_output_buffer_fu_556_ap_done)
    begin
        if (((ap_ST_st19_fsm_10 = ap_CS_fsm) and not(((debug1ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_863) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_533_ap_done)) or (not((ap_const_lv1_0 = tmp_s_reg_863)) and (ap_const_logic_0 = grp_store_output_buffer_fu_556_ap_done)))))) then 
            k0ack_out <= ap_const_logic_1;
        else 
            k0ack_out <= ap_const_logic_0;
        end if; 
    end process;

    kernel_info_block_address_fu_588_p2 <= std_logic_vector(shift_left(unsigned(block_address0data_reg),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    
    tmp_2_1_fu_659_p2_temp <= signed(tmp_2_1_fu_659_p2);
    lhs_V_1_fu_663_p1 <= std_logic_vector(resize(tmp_2_1_fu_659_p2_temp,64));

    
    tmp_2_2_fu_673_p2_temp <= signed(tmp_2_2_fu_673_p2);
    lhs_V_2_fu_677_p1 <= std_logic_vector(resize(tmp_2_2_fu_673_p2_temp,64));

    
    tmp_9_fu_644_p2_temp <= signed(tmp_9_fu_644_p2);
    lhs_V_fu_649_p1 <= std_logic_vector(resize(tmp_9_fu_644_p2_temp,64));


    -- master_portA_address assign process. --
    master_portA_address_assign_proc : process(ap_CS_fsm, debug1ack_in, exitcond_fu_593_p2, tmp_s_fu_612_p2, tmp_s_reg_863, grp_load_centres_buffer_fu_522_ap_idle, grp_load_centres_buffer_fu_522_bus_r_address, grp_store_output_points_buffer_fu_533_ap_idle, grp_store_output_points_buffer_fu_533_bus_r_address, grp_load_points_buffer_fu_544_ap_idle, grp_load_points_buffer_fu_544_bus_r_address, grp_store_output_buffer_fu_556_ap_idle, grp_store_output_buffer_fu_556_bus_r_address)
    begin
        if ((((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((exitcond_fu_593_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_s_fu_612_p2))) or ((ap_ST_st19_fsm_10 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_s_reg_863)) and ((debug1ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_863) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_533_ap_idle)) or (not((ap_const_lv1_0 = tmp_s_reg_863)) and (ap_const_logic_0 = grp_store_output_buffer_fu_556_ap_idle)))))) then 
            master_portA_address <= grp_store_output_buffer_fu_556_bus_r_address;
        elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = grp_load_points_buffer_fu_544_ap_idle)))) then 
            master_portA_address <= grp_load_points_buffer_fu_544_bus_r_address;
        elsif ((((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((exitcond_fu_593_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_s_fu_612_p2)) or ((ap_ST_st19_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_s_reg_863) and ((debug1ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_863) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_533_ap_idle)) or (not((ap_const_lv1_0 = tmp_s_reg_863)) and (ap_const_logic_0 = grp_store_output_buffer_fu_556_ap_idle)))))) then 
            master_portA_address <= grp_store_output_points_buffer_fu_533_bus_r_address;
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_logic_0 = grp_load_centres_buffer_fu_522_ap_idle)))) then 
            master_portA_address <= grp_load_centres_buffer_fu_522_bus_r_address;
        else 
            master_portA_address <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- master_portA_dataout assign process. --
    master_portA_dataout_assign_proc : process(ap_CS_fsm, debug1ack_in, exitcond_fu_593_p2, tmp_s_fu_612_p2, tmp_s_reg_863, grp_load_centres_buffer_fu_522_ap_idle, grp_load_centres_buffer_fu_522_bus_r_dataout, grp_store_output_points_buffer_fu_533_ap_idle, grp_store_output_points_buffer_fu_533_bus_r_dataout, grp_load_points_buffer_fu_544_ap_idle, grp_load_points_buffer_fu_544_bus_r_dataout, grp_store_output_buffer_fu_556_ap_idle, grp_store_output_buffer_fu_556_bus_r_dataout)
    begin
        if ((((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((exitcond_fu_593_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_s_fu_612_p2))) or ((ap_ST_st19_fsm_10 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_s_reg_863)) and ((debug1ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_863) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_533_ap_idle)) or (not((ap_const_lv1_0 = tmp_s_reg_863)) and (ap_const_logic_0 = grp_store_output_buffer_fu_556_ap_idle)))))) then 
            master_portA_dataout <= grp_store_output_buffer_fu_556_bus_r_dataout;
        elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = grp_load_points_buffer_fu_544_ap_idle)))) then 
            master_portA_dataout <= grp_load_points_buffer_fu_544_bus_r_dataout;
        elsif ((((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((exitcond_fu_593_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_s_fu_612_p2)) or ((ap_ST_st19_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_s_reg_863) and ((debug1ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_863) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_533_ap_idle)) or (not((ap_const_lv1_0 = tmp_s_reg_863)) and (ap_const_logic_0 = grp_store_output_buffer_fu_556_ap_idle)))))) then 
            master_portA_dataout <= grp_store_output_points_buffer_fu_533_bus_r_dataout;
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_logic_0 = grp_load_centres_buffer_fu_522_ap_idle)))) then 
            master_portA_dataout <= grp_load_centres_buffer_fu_522_bus_r_dataout;
        else 
            master_portA_dataout <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- master_portA_req_din assign process. --
    master_portA_req_din_assign_proc : process(ap_CS_fsm, debug1ack_in, exitcond_fu_593_p2, tmp_s_fu_612_p2, tmp_s_reg_863, grp_load_centres_buffer_fu_522_ap_idle, grp_load_centres_buffer_fu_522_bus_r_req_din, grp_store_output_points_buffer_fu_533_ap_idle, grp_store_output_points_buffer_fu_533_bus_r_req_din, grp_load_points_buffer_fu_544_ap_idle, grp_load_points_buffer_fu_544_bus_r_req_din, grp_store_output_buffer_fu_556_ap_idle, grp_store_output_buffer_fu_556_bus_r_req_din)
    begin
        if ((((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((exitcond_fu_593_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_s_fu_612_p2))) or ((ap_ST_st19_fsm_10 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_s_reg_863)) and ((debug1ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_863) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_533_ap_idle)) or (not((ap_const_lv1_0 = tmp_s_reg_863)) and (ap_const_logic_0 = grp_store_output_buffer_fu_556_ap_idle)))))) then 
            master_portA_req_din <= grp_store_output_buffer_fu_556_bus_r_req_din;
        elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = grp_load_points_buffer_fu_544_ap_idle)))) then 
            master_portA_req_din <= grp_load_points_buffer_fu_544_bus_r_req_din;
        elsif ((((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((exitcond_fu_593_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_s_fu_612_p2)) or ((ap_ST_st19_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_s_reg_863) and ((debug1ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_863) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_533_ap_idle)) or (not((ap_const_lv1_0 = tmp_s_reg_863)) and (ap_const_logic_0 = grp_store_output_buffer_fu_556_ap_idle)))))) then 
            master_portA_req_din <= grp_store_output_points_buffer_fu_533_bus_r_req_din;
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_logic_0 = grp_load_centres_buffer_fu_522_ap_idle)))) then 
            master_portA_req_din <= grp_load_centres_buffer_fu_522_bus_r_req_din;
        else 
            master_portA_req_din <= 'X';
        end if; 
    end process;


    -- master_portA_req_write assign process. --
    master_portA_req_write_assign_proc : process(ap_CS_fsm, debug1ack_in, exitcond_fu_593_p2, tmp_s_fu_612_p2, tmp_s_reg_863, grp_load_centres_buffer_fu_522_ap_idle, grp_load_centres_buffer_fu_522_bus_r_req_write, grp_store_output_points_buffer_fu_533_ap_idle, grp_store_output_points_buffer_fu_533_bus_r_req_write, grp_load_points_buffer_fu_544_ap_idle, grp_load_points_buffer_fu_544_bus_r_req_write, grp_store_output_buffer_fu_556_ap_idle, grp_store_output_buffer_fu_556_bus_r_req_write)
    begin
        if ((((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((exitcond_fu_593_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_s_fu_612_p2))) or ((ap_ST_st19_fsm_10 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_s_reg_863)) and ((debug1ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_863) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_533_ap_idle)) or (not((ap_const_lv1_0 = tmp_s_reg_863)) and (ap_const_logic_0 = grp_store_output_buffer_fu_556_ap_idle)))))) then 
            master_portA_req_write <= grp_store_output_buffer_fu_556_bus_r_req_write;
        elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = grp_load_points_buffer_fu_544_ap_idle)))) then 
            master_portA_req_write <= grp_load_points_buffer_fu_544_bus_r_req_write;
        elsif ((((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((exitcond_fu_593_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_s_fu_612_p2)) or ((ap_ST_st19_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_s_reg_863) and ((debug1ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_863) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_533_ap_idle)) or (not((ap_const_lv1_0 = tmp_s_reg_863)) and (ap_const_logic_0 = grp_store_output_buffer_fu_556_ap_idle)))))) then 
            master_portA_req_write <= grp_store_output_points_buffer_fu_533_bus_r_req_write;
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_logic_0 = grp_load_centres_buffer_fu_522_ap_idle)))) then 
            master_portA_req_write <= grp_load_centres_buffer_fu_522_bus_r_req_write;
        else 
            master_portA_req_write <= 'X';
        end if; 
    end process;


    -- master_portA_rsp_read assign process. --
    master_portA_rsp_read_assign_proc : process(ap_CS_fsm, debug1ack_in, exitcond_fu_593_p2, tmp_s_fu_612_p2, tmp_s_reg_863, grp_load_centres_buffer_fu_522_ap_idle, grp_load_centres_buffer_fu_522_bus_r_rsp_read, grp_store_output_points_buffer_fu_533_ap_idle, grp_store_output_points_buffer_fu_533_bus_r_rsp_read, grp_load_points_buffer_fu_544_ap_idle, grp_load_points_buffer_fu_544_bus_r_rsp_read, grp_store_output_buffer_fu_556_ap_idle, grp_store_output_buffer_fu_556_bus_r_rsp_read)
    begin
        if ((((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((exitcond_fu_593_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_s_fu_612_p2))) or ((ap_ST_st19_fsm_10 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_s_reg_863)) and ((debug1ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_863) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_533_ap_idle)) or (not((ap_const_lv1_0 = tmp_s_reg_863)) and (ap_const_logic_0 = grp_store_output_buffer_fu_556_ap_idle)))))) then 
            master_portA_rsp_read <= grp_store_output_buffer_fu_556_bus_r_rsp_read;
        elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = grp_load_points_buffer_fu_544_ap_idle)))) then 
            master_portA_rsp_read <= grp_load_points_buffer_fu_544_bus_r_rsp_read;
        elsif ((((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((exitcond_fu_593_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_s_fu_612_p2)) or ((ap_ST_st19_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_s_reg_863) and ((debug1ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_863) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_533_ap_idle)) or (not((ap_const_lv1_0 = tmp_s_reg_863)) and (ap_const_logic_0 = grp_store_output_buffer_fu_556_ap_idle)))))) then 
            master_portA_rsp_read <= grp_store_output_points_buffer_fu_533_bus_r_rsp_read;
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_logic_0 = grp_load_centres_buffer_fu_522_ap_idle)))) then 
            master_portA_rsp_read <= grp_load_centres_buffer_fu_522_bus_r_rsp_read;
        else 
            master_portA_rsp_read <= 'X';
        end if; 
    end process;


    -- master_portA_size assign process. --
    master_portA_size_assign_proc : process(ap_CS_fsm, debug1ack_in, exitcond_fu_593_p2, tmp_s_fu_612_p2, tmp_s_reg_863, grp_load_centres_buffer_fu_522_ap_idle, grp_load_centres_buffer_fu_522_bus_r_size, grp_store_output_points_buffer_fu_533_ap_idle, grp_store_output_points_buffer_fu_533_bus_r_size, grp_load_points_buffer_fu_544_ap_idle, grp_load_points_buffer_fu_544_bus_r_size, grp_store_output_buffer_fu_556_ap_idle, grp_store_output_buffer_fu_556_bus_r_size)
    begin
        if ((((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((exitcond_fu_593_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_s_fu_612_p2))) or ((ap_ST_st19_fsm_10 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_s_reg_863)) and ((debug1ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_863) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_533_ap_idle)) or (not((ap_const_lv1_0 = tmp_s_reg_863)) and (ap_const_logic_0 = grp_store_output_buffer_fu_556_ap_idle)))))) then 
            master_portA_size <= grp_store_output_buffer_fu_556_bus_r_size;
        elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = grp_load_points_buffer_fu_544_ap_idle)))) then 
            master_portA_size <= grp_load_points_buffer_fu_544_bus_r_size;
        elsif ((((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((exitcond_fu_593_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_s_fu_612_p2)) or ((ap_ST_st19_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_s_reg_863) and ((debug1ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_863) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_533_ap_idle)) or (not((ap_const_lv1_0 = tmp_s_reg_863)) and (ap_const_logic_0 = grp_store_output_buffer_fu_556_ap_idle)))))) then 
            master_portA_size <= grp_store_output_points_buffer_fu_533_bus_r_size;
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_logic_0 = grp_load_centres_buffer_fu_522_ap_idle)))) then 
            master_portA_size <= grp_load_centres_buffer_fu_522_bus_r_size;
        else 
            master_portA_size <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- output_addr0ack_out assign process. --
    output_addr0ack_out_assign_proc : process(ap_CS_fsm, debug1ack_in, tmp_s_reg_863, grp_store_output_points_buffer_fu_533_ap_done, grp_store_output_buffer_fu_556_ap_done)
    begin
        if (((ap_ST_st19_fsm_10 = ap_CS_fsm) and not(((debug1ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_863) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_533_ap_done)) or (not((ap_const_lv1_0 = tmp_s_reg_863)) and (ap_const_logic_0 = grp_store_output_buffer_fu_556_ap_done)))))) then 
            output_addr0ack_out <= ap_const_logic_1;
        else 
            output_addr0ack_out <= ap_const_logic_0;
        end if; 
    end process;


    -- output_buffer_min_idx_V_address0 assign process. --
    output_buffer_min_idx_V_address0_assign_proc : process(ap_CS_fsm, tmp_1_reg_839, tmp_s_reg_863, grp_store_output_buffer_fu_556_buffer_min_idx_V_address0)
    begin
        if ((ap_ST_st18_fsm_9 = ap_CS_fsm)) then 
            output_buffer_min_idx_V_address0 <= tmp_1_reg_839(4 - 1 downto 0);
        elsif (((ap_ST_st19_fsm_10 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_s_reg_863)))) then 
            output_buffer_min_idx_V_address0 <= grp_store_output_buffer_fu_556_buffer_min_idx_V_address0;
        else 
            output_buffer_min_idx_V_address0 <= "XXXX";
        end if; 
    end process;


    -- output_buffer_min_idx_V_ce0 assign process. --
    output_buffer_min_idx_V_ce0_assign_proc : process(ap_CS_fsm, tmp_s_reg_863, grp_store_output_buffer_fu_556_buffer_min_idx_V_ce0)
    begin
        if ((ap_ST_st18_fsm_9 = ap_CS_fsm)) then 
            output_buffer_min_idx_V_ce0 <= ap_const_logic_1;
        elsif (((ap_ST_st19_fsm_10 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_s_reg_863)))) then 
            output_buffer_min_idx_V_ce0 <= grp_store_output_buffer_fu_556_buffer_min_idx_V_ce0;
        else 
            output_buffer_min_idx_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_buffer_min_idx_V_d0 <= p_036_2_reg_499;

    -- output_buffer_min_idx_V_we0 assign process. --
    output_buffer_min_idx_V_we0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st18_fsm_9 = ap_CS_fsm))) then 
            output_buffer_min_idx_V_we0 <= ap_const_logic_1;
        else 
            output_buffer_min_idx_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- output_buffer_sum_sq_address0 assign process. --
    output_buffer_sum_sq_address0_assign_proc : process(ap_CS_fsm, tmp_1_reg_839, tmp_s_reg_863, grp_store_output_buffer_fu_556_buffer_sum_sq_address0)
    begin
        if ((ap_ST_st18_fsm_9 = ap_CS_fsm)) then 
            output_buffer_sum_sq_address0 <= tmp_1_reg_839(4 - 1 downto 0);
        elsif (((ap_ST_st19_fsm_10 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_s_reg_863)))) then 
            output_buffer_sum_sq_address0 <= grp_store_output_buffer_fu_556_buffer_sum_sq_address0;
        else 
            output_buffer_sum_sq_address0 <= "XXXX";
        end if; 
    end process;


    -- output_buffer_sum_sq_ce0 assign process. --
    output_buffer_sum_sq_ce0_assign_proc : process(ap_CS_fsm, tmp_s_reg_863, grp_store_output_buffer_fu_556_buffer_sum_sq_ce0)
    begin
        if ((ap_ST_st18_fsm_9 = ap_CS_fsm)) then 
            output_buffer_sum_sq_ce0 <= ap_const_logic_1;
        elsif (((ap_ST_st19_fsm_10 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_s_reg_863)))) then 
            output_buffer_sum_sq_ce0 <= grp_store_output_buffer_fu_556_buffer_sum_sq_ce0;
        else 
            output_buffer_sum_sq_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_buffer_sum_sq_d0 <= sum_sq_out_2_reg_510;

    -- output_buffer_sum_sq_we0 assign process. --
    output_buffer_sum_sq_we0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st18_fsm_9 = ap_CS_fsm))) then 
            output_buffer_sum_sq_we0 <= ap_const_logic_1;
        else 
            output_buffer_sum_sq_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- output_points_buffer_0_value_address0 assign process. --
    output_points_buffer_0_value_address0_assign_proc : process(ap_CS_fsm, tmp_1_reg_839, tmp_s_reg_863, grp_store_output_points_buffer_fu_533_buffer_0_value_address0)
    begin
        if ((ap_ST_st18_fsm_9 = ap_CS_fsm)) then 
            output_points_buffer_0_value_address0 <= tmp_1_reg_839(4 - 1 downto 0);
        elsif (((ap_ST_st19_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_s_reg_863))) then 
            output_points_buffer_0_value_address0 <= grp_store_output_points_buffer_fu_533_buffer_0_value_address0;
        else 
            output_points_buffer_0_value_address0 <= "XXXX";
        end if; 
    end process;


    -- output_points_buffer_0_value_ce0 assign process. --
    output_points_buffer_0_value_ce0_assign_proc : process(ap_CS_fsm, tmp_s_reg_863, grp_store_output_points_buffer_fu_533_buffer_0_value_ce0)
    begin
        if ((ap_ST_st18_fsm_9 = ap_CS_fsm)) then 
            output_points_buffer_0_value_ce0 <= ap_const_logic_1;
        elsif (((ap_ST_st19_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_s_reg_863))) then 
            output_points_buffer_0_value_ce0 <= grp_store_output_points_buffer_fu_533_buffer_0_value_ce0;
        else 
            output_points_buffer_0_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_points_buffer_0_value_d0 <= closest_centre_value_0_3_reg_486;

    -- output_points_buffer_0_value_we0 assign process. --
    output_points_buffer_0_value_we0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st18_fsm_9 = ap_CS_fsm))) then 
            output_points_buffer_0_value_we0 <= ap_const_logic_1;
        else 
            output_points_buffer_0_value_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- output_points_buffer_1_value_address0 assign process. --
    output_points_buffer_1_value_address0_assign_proc : process(ap_CS_fsm, tmp_1_reg_839, tmp_s_reg_863, grp_store_output_points_buffer_fu_533_buffer_1_value_address0)
    begin
        if ((ap_ST_st18_fsm_9 = ap_CS_fsm)) then 
            output_points_buffer_1_value_address0 <= tmp_1_reg_839(4 - 1 downto 0);
        elsif (((ap_ST_st19_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_s_reg_863))) then 
            output_points_buffer_1_value_address0 <= grp_store_output_points_buffer_fu_533_buffer_1_value_address0;
        else 
            output_points_buffer_1_value_address0 <= "XXXX";
        end if; 
    end process;


    -- output_points_buffer_1_value_ce0 assign process. --
    output_points_buffer_1_value_ce0_assign_proc : process(ap_CS_fsm, tmp_s_reg_863, grp_store_output_points_buffer_fu_533_buffer_1_value_ce0)
    begin
        if ((ap_ST_st18_fsm_9 = ap_CS_fsm)) then 
            output_points_buffer_1_value_ce0 <= ap_const_logic_1;
        elsif (((ap_ST_st19_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_s_reg_863))) then 
            output_points_buffer_1_value_ce0 <= grp_store_output_points_buffer_fu_533_buffer_1_value_ce0;
        else 
            output_points_buffer_1_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_points_buffer_1_value_d0 <= closest_centre_value_1_3_reg_473;

    -- output_points_buffer_1_value_we0 assign process. --
    output_points_buffer_1_value_we0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st18_fsm_9 = ap_CS_fsm))) then 
            output_points_buffer_1_value_we0 <= ap_const_logic_1;
        else 
            output_points_buffer_1_value_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- output_points_buffer_2_value_address0 assign process. --
    output_points_buffer_2_value_address0_assign_proc : process(ap_CS_fsm, tmp_1_reg_839, tmp_s_reg_863, grp_store_output_points_buffer_fu_533_buffer_2_value_address0)
    begin
        if ((ap_ST_st18_fsm_9 = ap_CS_fsm)) then 
            output_points_buffer_2_value_address0 <= tmp_1_reg_839(4 - 1 downto 0);
        elsif (((ap_ST_st19_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_s_reg_863))) then 
            output_points_buffer_2_value_address0 <= grp_store_output_points_buffer_fu_533_buffer_2_value_address0;
        else 
            output_points_buffer_2_value_address0 <= "XXXX";
        end if; 
    end process;


    -- output_points_buffer_2_value_ce0 assign process. --
    output_points_buffer_2_value_ce0_assign_proc : process(ap_CS_fsm, tmp_s_reg_863, grp_store_output_points_buffer_fu_533_buffer_2_value_ce0)
    begin
        if ((ap_ST_st18_fsm_9 = ap_CS_fsm)) then 
            output_points_buffer_2_value_ce0 <= ap_const_logic_1;
        elsif (((ap_ST_st19_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_s_reg_863))) then 
            output_points_buffer_2_value_ce0 <= grp_store_output_points_buffer_fu_533_buffer_2_value_ce0;
        else 
            output_points_buffer_2_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_points_buffer_2_value_d0 <= closest_centre_value_2_3_reg_460;

    -- output_points_buffer_2_value_we0 assign process. --
    output_points_buffer_2_value_we0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st18_fsm_9 = ap_CS_fsm))) then 
            output_points_buffer_2_value_we0 <= ap_const_logic_1;
        else 
            output_points_buffer_2_value_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_sq_out_3_fu_723_p0 <= result_2_reg_941;
    sum_sq_out_3_fu_723_p1 <= tmp3_reg_946;
    tmp3_fu_717_p0 <= grp_fu_667_p2(37 downto 6);
    tmp3_fu_717_p1 <= grp_fu_653_p2(37 downto 6);
    tmp_11_fu_571_p2 <= std_logic_vector(shift_left(unsigned(block_address0data_reg),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_13_fu_727_p2 <= "1" when (signed(sum_sq_out_3_fu_723_p2) < signed(min_dist_reg_449)) else "0";
    tmp_14_fu_639_p2 <= "1" when (tmp_2_fu_617_p1 = k0data_reg) else "0";
    tmp_16_fu_584_p1 <= k0data_reg(8 - 1 downto 0);
    tmp_1_fu_605_p1 <= std_logic_vector(resize(unsigned(i_reg_369),64));
    tmp_2_1_fu_659_p2 <= std_logic_vector(unsigned(closest_centre_value_1_reg_911) - unsigned(data_points_buffer_1_value_load_reg_867));
    tmp_2_2_fu_673_p2 <= std_logic_vector(unsigned(closest_centre_value_2_reg_917) - unsigned(data_points_buffer_2_value_load_reg_872));
    tmp_2_fu_617_p1 <= std_logic_vector(resize(unsigned(final_centre_index_V_phi_fu_384_p4),32));
    tmp_3_fu_621_p2 <= "1" when (unsigned(tmp_2_fu_617_p1) > unsigned(k0data_reg)) else "0";
    tmp_5_fu_632_p1 <= std_logic_vector(resize(unsigned(final_centre_index_V_phi_fu_384_p4),64));
    tmp_9_fu_644_p2 <= std_logic_vector(unsigned(closest_centre_value_0_reg_905) - unsigned(reg_566));
    tmp_dist_min_dist_fu_770_p3 <= 
        sum_sq_out_3_fu_723_p2 when (tmp_13_fu_727_p2(0) = '1') else 
        min_dist_reg_449;
    tmp_dist_sum_sq_out_fu_762_p3 <= 
        sum_sq_out_3_fu_723_p2 when (tmp_13_fu_727_p2(0) = '1') else 
        sum_sq_out_reg_437;
    tmp_s_fu_612_p2 <= "1" when (update_points0data_reg = ap_const_lv32_0) else "0";

    -- update_points0ack_out assign process. --
    update_points0ack_out_assign_proc : process(ap_CS_fsm, debug1ack_in, tmp_s_reg_863, grp_store_output_points_buffer_fu_533_ap_done, grp_store_output_buffer_fu_556_ap_done)
    begin
        if (((ap_ST_st19_fsm_10 = ap_CS_fsm) and not(((debug1ack_in = ap_const_logic_0) or ((ap_const_lv1_0 = tmp_s_reg_863) and (ap_const_logic_0 = grp_store_output_points_buffer_fu_533_ap_done)) or (not((ap_const_lv1_0 = tmp_s_reg_863)) and (ap_const_logic_0 = grp_store_output_buffer_fu_556_ap_done)))))) then 
            update_points0ack_out <= ap_const_logic_1;
        else 
            update_points0ack_out <= ap_const_logic_0;
        end if; 
    end process;

end behav;
