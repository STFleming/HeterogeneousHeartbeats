// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _hwfreqscale_simple_adder_HH_
#define _hwfreqscale_simple_adder_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct hwfreqscale_simple_adder : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > input1;
    sc_in< sc_lv<32> > input2;
    sc_out< sc_lv<32> > output_r;
    sc_out< sc_lv<32> > frequency_value;


    // Module declarations
    hwfreqscale_simple_adder(sc_module_name name);
    SC_HAS_PROCESS(hwfreqscale_simple_adder);

    ~hwfreqscale_simple_adder();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_lv<32> > input10data_reg;
    sc_signal< sc_logic > input10vld_reg;
    sc_signal< sc_logic > input10ack_out;
    sc_signal< sc_lv<32> > input20data_reg;
    sc_signal< sc_logic > input20vld_reg;
    sc_signal< sc_logic > input20ack_out;
    sc_signal< sc_lv<32> > output_r1data_reg;
    sc_signal< sc_logic > output_r1vld_reg;
    sc_signal< sc_logic > output_r1vld_in;
    sc_signal< sc_logic > output_r1ack_in;
    sc_signal< sc_lv<32> > frequency_value1data_reg;
    sc_signal< sc_lv<32> > frequency_value1data_in;
    sc_signal< sc_logic > frequency_value1vld_reg;
    sc_signal< sc_logic > frequency_value1vld_in;
    sc_signal< sc_logic > frequency_value1ack_in;
    sc_signal< sc_lv<32> > output_assign_fu_64_p2;
    sc_signal< bool > ap_sig_bdd_134;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_st1_fsm_0;
    static const sc_lv<2> ap_ST_st2_fsm_1;
    static const sc_lv<2> ap_ST_st3_fsm_2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2A;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_134();
    void thread_frequency_value();
    void thread_frequency_value1ack_in();
    void thread_frequency_value1data_in();
    void thread_frequency_value1vld_in();
    void thread_input10ack_out();
    void thread_input20ack_out();
    void thread_output_assign_fu_64_p2();
    void thread_output_r();
    void thread_output_r1ack_in();
    void thread_output_r1vld_in();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
