// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "hwfreqscale_simple_adder.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic hwfreqscale_simple_adder::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic hwfreqscale_simple_adder::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> hwfreqscale_simple_adder::ap_ST_st1_fsm_0 = "00";
const sc_lv<2> hwfreqscale_simple_adder::ap_ST_st2_fsm_1 = "1";
const sc_lv<2> hwfreqscale_simple_adder::ap_ST_st3_fsm_2 = "10";
const sc_lv<32> hwfreqscale_simple_adder::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> hwfreqscale_simple_adder::ap_const_lv32_2A = "101010";

hwfreqscale_simple_adder::hwfreqscale_simple_adder(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_134 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_134 );

    SC_METHOD(thread_ap_sig_bdd_134);
    sensitive << ( output_r1ack_in );
    sensitive << ( frequency_value1ack_in );

    SC_METHOD(thread_frequency_value);
    sensitive << ( frequency_value1data_reg );

    SC_METHOD(thread_frequency_value1ack_in);
    sensitive << ( frequency_value1vld_reg );

    SC_METHOD(thread_frequency_value1data_in);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_frequency_value1vld_in);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_input10ack_out);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_134 );

    SC_METHOD(thread_input20ack_out);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_134 );

    SC_METHOD(thread_output_assign_fu_64_p2);
    sensitive << ( input10data_reg );
    sensitive << ( input20data_reg );

    SC_METHOD(thread_output_r);
    sensitive << ( output_r1data_reg );

    SC_METHOD(thread_output_r1ack_in);
    sensitive << ( output_r1vld_reg );

    SC_METHOD(thread_output_r1vld_in);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_134 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00";
    input10data_reg = "00000000000000000000000000000000";
    input10vld_reg = SC_LOGIC_0;
    input20data_reg = "00000000000000000000000000000000";
    input20vld_reg = SC_LOGIC_0;
    output_r1data_reg = "00000000000000000000000000000000";
    output_r1vld_reg = SC_LOGIC_0;
    frequency_value1data_reg = "00000000000000000000000000000000";
    frequency_value1vld_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "hwfreqscale_simple_adder_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input1, "(port)input1");
    sc_trace(mVcdFile, input2, "(port)input2");
    sc_trace(mVcdFile, output_r, "(port)output_r");
    sc_trace(mVcdFile, frequency_value, "(port)frequency_value");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, input10data_reg, "input10data_reg");
    sc_trace(mVcdFile, input10vld_reg, "input10vld_reg");
    sc_trace(mVcdFile, input10ack_out, "input10ack_out");
    sc_trace(mVcdFile, input20data_reg, "input20data_reg");
    sc_trace(mVcdFile, input20vld_reg, "input20vld_reg");
    sc_trace(mVcdFile, input20ack_out, "input20ack_out");
    sc_trace(mVcdFile, output_r1data_reg, "output_r1data_reg");
    sc_trace(mVcdFile, output_r1vld_reg, "output_r1vld_reg");
    sc_trace(mVcdFile, output_r1vld_in, "output_r1vld_in");
    sc_trace(mVcdFile, output_r1ack_in, "output_r1ack_in");
    sc_trace(mVcdFile, frequency_value1data_reg, "frequency_value1data_reg");
    sc_trace(mVcdFile, frequency_value1data_in, "frequency_value1data_in");
    sc_trace(mVcdFile, frequency_value1vld_reg, "frequency_value1vld_reg");
    sc_trace(mVcdFile, frequency_value1vld_in, "frequency_value1vld_in");
    sc_trace(mVcdFile, frequency_value1ack_in, "frequency_value1ack_in");
    sc_trace(mVcdFile, output_assign_fu_64_p2, "output_assign_fu_64_p2");
    sc_trace(mVcdFile, ap_sig_bdd_134, "ap_sig_bdd_134");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("hwfreqscale_simple_adder.hdltvin.dat");
    mHdltvoutHandle.open("hwfreqscale_simple_adder.hdltvout.dat");
}

hwfreqscale_simple_adder::~hwfreqscale_simple_adder() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void hwfreqscale_simple_adder::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        frequency_value1data_reg = ap_const_lv32_0;
    } else {
        if (((!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, frequency_value1vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, frequency_value1vld_reg.read())) || 
             (!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, frequency_value1vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, frequency_value1vld_reg.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1)))) {
            frequency_value1data_reg = frequency_value1data_in.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        frequency_value1vld_reg = ap_const_logic_0;
    } else {
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        input10data_reg = ap_const_lv32_0;
    } else {
        if (((!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_0, input10vld_reg.read())) || 
             (!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_1, input10vld_reg.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, input10ack_out.read())))) {
            input10data_reg = input1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        input10vld_reg = ap_const_logic_0;
    } else {
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        input20data_reg = ap_const_lv32_0;
    } else {
        if (((!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_0, input20vld_reg.read())) || 
             (!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_1, input20vld_reg.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, input20ack_out.read())))) {
            input20data_reg = input2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        input20vld_reg = ap_const_logic_0;
    } else {
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        output_r1data_reg = ap_const_lv32_0;
    } else {
        if (((!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, output_r1vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, output_r1vld_reg.read())) || 
             (!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, output_r1vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, output_r1vld_reg.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1)))) {
            output_r1data_reg = output_assign_fu_64_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        output_r1vld_reg = ap_const_logic_0;
    } else {
    }
}

void hwfreqscale_simple_adder::thread_ap_done() {
    if ((esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
         !ap_sig_bdd_134.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void hwfreqscale_simple_adder::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void hwfreqscale_simple_adder::thread_ap_ready() {
    if ((esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
         !ap_sig_bdd_134.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void hwfreqscale_simple_adder::thread_ap_sig_bdd_134() {
    ap_sig_bdd_134 = (esl_seteq<1,1,1>(output_r1ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(frequency_value1ack_in.read(), ap_const_logic_0));
}

void hwfreqscale_simple_adder::thread_frequency_value() {
    frequency_value = frequency_value1data_reg.read();
}

void hwfreqscale_simple_adder::thread_frequency_value1ack_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, frequency_value1vld_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, frequency_value1vld_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1)))) {
        frequency_value1ack_in = ap_const_logic_1;
    } else {
        frequency_value1ack_in = ap_const_logic_0;
    }
}

void hwfreqscale_simple_adder::thread_frequency_value1data_in() {
    frequency_value1data_in = ap_const_lv32_2A;
}

void hwfreqscale_simple_adder::thread_frequency_value1vld_in() {
    if (esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read())) {
        frequency_value1vld_in = ap_const_logic_1;
    } else {
        frequency_value1vld_in = ap_const_logic_0;
    }
}

void hwfreqscale_simple_adder::thread_input10ack_out() {
    if ((esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
         !ap_sig_bdd_134.read())) {
        input10ack_out = ap_const_logic_1;
    } else {
        input10ack_out = ap_const_logic_0;
    }
}

void hwfreqscale_simple_adder::thread_input20ack_out() {
    if ((esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
         !ap_sig_bdd_134.read())) {
        input20ack_out = ap_const_logic_1;
    } else {
        input20ack_out = ap_const_logic_0;
    }
}

void hwfreqscale_simple_adder::thread_output_assign_fu_64_p2() {
    output_assign_fu_64_p2 = (!input20data_reg.read().is_01() || !input10data_reg.read().is_01())? sc_lv<32>(): (sc_bigint<32>(input20data_reg.read()) + sc_biguint<32>(input10data_reg.read()));
}

void hwfreqscale_simple_adder::thread_output_r() {
    output_r = output_r1data_reg.read();
}

void hwfreqscale_simple_adder::thread_output_r1ack_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, output_r1vld_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, output_r1vld_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1)))) {
        output_r1ack_in = ap_const_logic_1;
    } else {
        output_r1ack_in = ap_const_logic_0;
    }
}

void hwfreqscale_simple_adder::thread_output_r1vld_in() {
    if (esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read())) {
        output_r1vld_in = ap_const_logic_1;
    } else {
        output_r1vld_in = ap_const_logic_0;
    }
}

void hwfreqscale_simple_adder::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 0 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 2 : 
            if (!ap_sig_bdd_134.read()) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}
void hwfreqscale_simple_adder::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input1\" :  \"" << input1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input2\" :  \"" << input2.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r\" :  \"" << output_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"frequency_value\" :  \"" << frequency_value.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

