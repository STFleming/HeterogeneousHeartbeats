// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps
module hwfreqscale_simple_adder_top (
s_axi_BUS_A_AWADDR,
s_axi_BUS_A_AWVALID,
s_axi_BUS_A_AWREADY,
s_axi_BUS_A_WDATA,
s_axi_BUS_A_WSTRB,
s_axi_BUS_A_WVALID,
s_axi_BUS_A_WREADY,
s_axi_BUS_A_BRESP,
s_axi_BUS_A_BVALID,
s_axi_BUS_A_BREADY,
s_axi_BUS_A_ARADDR,
s_axi_BUS_A_ARVALID,
s_axi_BUS_A_ARREADY,
s_axi_BUS_A_RDATA,
s_axi_BUS_A_RRESP,
s_axi_BUS_A_RVALID,
s_axi_BUS_A_RREADY,
interrupt,
aresetn,
aclk,
frequency_value
);

parameter C_S_AXI_BUS_A_ADDR_WIDTH = 6;
parameter C_S_AXI_BUS_A_DATA_WIDTH = 32;
parameter RESET_ACTIVE_LOW = 1;

input [C_S_AXI_BUS_A_ADDR_WIDTH - 1:0] s_axi_BUS_A_AWADDR ;
input s_axi_BUS_A_AWVALID ;
output s_axi_BUS_A_AWREADY ;
input [C_S_AXI_BUS_A_DATA_WIDTH - 1:0] s_axi_BUS_A_WDATA ;
input [C_S_AXI_BUS_A_DATA_WIDTH/8 - 1:0] s_axi_BUS_A_WSTRB ;
input s_axi_BUS_A_WVALID ;
output s_axi_BUS_A_WREADY ;
output [2 - 1:0] s_axi_BUS_A_BRESP ;
output s_axi_BUS_A_BVALID ;
input s_axi_BUS_A_BREADY ;
input [C_S_AXI_BUS_A_ADDR_WIDTH - 1:0] s_axi_BUS_A_ARADDR ;
input s_axi_BUS_A_ARVALID ;
output s_axi_BUS_A_ARREADY ;
output [C_S_AXI_BUS_A_DATA_WIDTH - 1:0] s_axi_BUS_A_RDATA ;
output [2 - 1:0] s_axi_BUS_A_RRESP ;
output s_axi_BUS_A_RVALID ;
input s_axi_BUS_A_RREADY ;
output interrupt ;

input aresetn ;

input aclk ;

output [32 - 1:0] frequency_value ;


wire [C_S_AXI_BUS_A_ADDR_WIDTH - 1:0] s_axi_BUS_A_AWADDR;
wire s_axi_BUS_A_AWVALID;
wire s_axi_BUS_A_AWREADY;
wire [C_S_AXI_BUS_A_DATA_WIDTH - 1:0] s_axi_BUS_A_WDATA;
wire [C_S_AXI_BUS_A_DATA_WIDTH/8 - 1:0] s_axi_BUS_A_WSTRB;
wire s_axi_BUS_A_WVALID;
wire s_axi_BUS_A_WREADY;
wire [2 - 1:0] s_axi_BUS_A_BRESP;
wire s_axi_BUS_A_BVALID;
wire s_axi_BUS_A_BREADY;
wire [C_S_AXI_BUS_A_ADDR_WIDTH - 1:0] s_axi_BUS_A_ARADDR;
wire s_axi_BUS_A_ARVALID;
wire s_axi_BUS_A_ARREADY;
wire [C_S_AXI_BUS_A_DATA_WIDTH - 1:0] s_axi_BUS_A_RDATA;
wire [2 - 1:0] s_axi_BUS_A_RRESP;
wire s_axi_BUS_A_RVALID;
wire s_axi_BUS_A_RREADY;
wire interrupt;

wire aresetn;


wire [32 - 1:0] sig_hwfreqscale_simple_adder_input1;
wire [32 - 1:0] sig_hwfreqscale_simple_adder_input2;
wire [32 - 1:0] sig_hwfreqscale_simple_adder_output_r;
wire sig_hwfreqscale_simple_adder_ap_start;
wire sig_hwfreqscale_simple_adder_ap_ready;
wire sig_hwfreqscale_simple_adder_ap_done;
wire sig_hwfreqscale_simple_adder_ap_idle;

wire sig_hwfreqscale_simple_adder_ap_rst;



hwfreqscale_simple_adder hwfreqscale_simple_adder_U(
    .input1(sig_hwfreqscale_simple_adder_input1),
    .input2(sig_hwfreqscale_simple_adder_input2),
    .output_r(sig_hwfreqscale_simple_adder_output_r),
    .ap_start(sig_hwfreqscale_simple_adder_ap_start),
    .ap_ready(sig_hwfreqscale_simple_adder_ap_ready),
    .ap_done(sig_hwfreqscale_simple_adder_ap_done),
    .ap_idle(sig_hwfreqscale_simple_adder_ap_idle),
    .ap_rst(sig_hwfreqscale_simple_adder_ap_rst),
    .ap_clk(aclk),
    .frequency_value(frequency_value)
);

hwfreqscale_simple_adder_BUS_A_if #(
    .C_ADDR_WIDTH(C_S_AXI_BUS_A_ADDR_WIDTH),
    .C_DATA_WIDTH(C_S_AXI_BUS_A_DATA_WIDTH))
hwfreqscale_simple_adder_BUS_A_if_U(
    .ACLK(aclk),
    .ARESETN(aresetn),
    .I_input1(sig_hwfreqscale_simple_adder_input1),
    .I_input2(sig_hwfreqscale_simple_adder_input2),
    .O_output_r(sig_hwfreqscale_simple_adder_output_r),
    .I_ap_start(sig_hwfreqscale_simple_adder_ap_start),
    .O_ap_ready(sig_hwfreqscale_simple_adder_ap_ready),
    .O_ap_done(sig_hwfreqscale_simple_adder_ap_done),
    .O_ap_idle(sig_hwfreqscale_simple_adder_ap_idle),
    .AWADDR(s_axi_BUS_A_AWADDR),
    .AWVALID(s_axi_BUS_A_AWVALID),
    .AWREADY(s_axi_BUS_A_AWREADY),
    .WDATA(s_axi_BUS_A_WDATA),
    .WSTRB(s_axi_BUS_A_WSTRB),
    .WVALID(s_axi_BUS_A_WVALID),
    .WREADY(s_axi_BUS_A_WREADY),
    .BRESP(s_axi_BUS_A_BRESP),
    .BVALID(s_axi_BUS_A_BVALID),
    .BREADY(s_axi_BUS_A_BREADY),
    .ARADDR(s_axi_BUS_A_ARADDR),
    .ARVALID(s_axi_BUS_A_ARVALID),
    .ARREADY(s_axi_BUS_A_ARREADY),
    .RDATA(s_axi_BUS_A_RDATA),
    .RRESP(s_axi_BUS_A_RRESP),
    .RVALID(s_axi_BUS_A_RVALID),
    .RREADY(s_axi_BUS_A_RREADY),
    .interrupt(interrupt));

hwfreqscale_simple_adder_ap_rst_if #(
    .RESET_ACTIVE_LOW(RESET_ACTIVE_LOW))
ap_rst_if_U(
    .dout(sig_hwfreqscale_simple_adder_ap_rst),
    .din(aresetn));

endmodule
