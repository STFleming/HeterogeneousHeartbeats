-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hwfreqscale_simple_adder is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input2 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r : OUT STD_LOGIC_VECTOR (31 downto 0);
    frequency_value : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of hwfreqscale_simple_adder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hwfreqscale_simple_adder,hls_ip_2013_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.440000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input10data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal input10vld_reg : STD_LOGIC := '0';
    signal input10ack_out : STD_LOGIC;
    signal input20data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal input20vld_reg : STD_LOGIC := '0';
    signal input20ack_out : STD_LOGIC;
    signal output_r1data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal output_r1vld_reg : STD_LOGIC := '0';
    signal output_r1vld_in : STD_LOGIC;
    signal output_r1ack_in : STD_LOGIC;
    signal frequency_value1data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal frequency_value1data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal frequency_value1vld_reg : STD_LOGIC := '0';
    signal frequency_value1vld_in : STD_LOGIC;
    signal frequency_value1ack_in : STD_LOGIC;
    signal output_assign_fu_64_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_134 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- frequency_value1data_reg assign process. --
    frequency_value1data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                frequency_value1data_reg(1) <= '0';
                frequency_value1data_reg(3) <= '0';
                frequency_value1data_reg(5) <= '0';
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = frequency_value1vld_in) and (ap_const_logic_0 = frequency_value1vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = frequency_value1vld_in) and (ap_const_logic_1 = frequency_value1vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
                    frequency_value1data_reg(1) <= frequency_value1data_in(1);
                    frequency_value1data_reg(3) <= frequency_value1data_in(3);
                    frequency_value1data_reg(5) <= frequency_value1data_in(5);
                end if; 
            end if;
        end if;
    end process;


    -- frequency_value1vld_reg assign process. --
    frequency_value1vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- input10data_reg assign process. --
    input10data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input10data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = input10vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = input10vld_reg) and (ap_const_logic_1 = input10ack_out)))) then 
                    input10data_reg <= input1;
                end if; 
            end if;
        end if;
    end process;


    -- input10vld_reg assign process. --
    input10vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- input20data_reg assign process. --
    input20data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input20data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = input20vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = input20vld_reg) and (ap_const_logic_1 = input20ack_out)))) then 
                    input20data_reg <= input2;
                end if; 
            end if;
        end if;
    end process;


    -- input20vld_reg assign process. --
    input20vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- output_r1data_reg assign process. --
    output_r1data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_r1data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = output_r1vld_in) and (ap_const_logic_0 = output_r1vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = output_r1vld_in) and (ap_const_logic_1 = output_r1vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
                    output_r1data_reg <= output_assign_fu_64_p2;
                end if; 
            end if;
        end if;
    end process;


    -- output_r1vld_reg assign process. --
    output_r1vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;

    input10vld_reg <= '0';
    input20vld_reg <= '0';
    output_r1vld_reg <= '0';
    frequency_value1data_reg(0) <= '0';
    frequency_value1data_reg(2 downto 2) <= "0";
    frequency_value1data_reg(4 downto 4) <= "0";
    frequency_value1data_reg(31 downto 6) <= "00000000000000000000000000";
    frequency_value1vld_reg <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , ap_sig_bdd_134)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not(ap_sig_bdd_134)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, ap_sig_bdd_134)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(ap_sig_bdd_134))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, ap_sig_bdd_134)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(ap_sig_bdd_134))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_134 assign process. --
    ap_sig_bdd_134_assign_proc : process(output_r1ack_in, frequency_value1ack_in)
    begin
                ap_sig_bdd_134 <= ((output_r1ack_in = ap_const_logic_0) or (frequency_value1ack_in = ap_const_logic_0));
    end process;

    frequency_value <= frequency_value1data_reg;

    -- frequency_value1ack_in assign process. --
    frequency_value1ack_in_assign_proc : process(frequency_value1vld_reg)
    begin
        if (((ap_const_logic_0 = frequency_value1vld_reg) or ((ap_const_logic_1 = frequency_value1vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            frequency_value1ack_in <= ap_const_logic_1;
        else 
            frequency_value1ack_in <= ap_const_logic_0;
        end if; 
    end process;

    frequency_value1data_in <= ap_const_lv32_2A;

    -- frequency_value1vld_in assign process. --
    frequency_value1vld_in_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            frequency_value1vld_in <= ap_const_logic_1;
        else 
            frequency_value1vld_in <= ap_const_logic_0;
        end if; 
    end process;


    -- input10ack_out assign process. --
    input10ack_out_assign_proc : process(ap_CS_fsm, ap_sig_bdd_134)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(ap_sig_bdd_134))) then 
            input10ack_out <= ap_const_logic_1;
        else 
            input10ack_out <= ap_const_logic_0;
        end if; 
    end process;


    -- input20ack_out assign process. --
    input20ack_out_assign_proc : process(ap_CS_fsm, ap_sig_bdd_134)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(ap_sig_bdd_134))) then 
            input20ack_out <= ap_const_logic_1;
        else 
            input20ack_out <= ap_const_logic_0;
        end if; 
    end process;

    output_assign_fu_64_p2 <= std_logic_vector(unsigned(input20data_reg) + unsigned(input10data_reg));
    output_r <= output_r1data_reg;

    -- output_r1ack_in assign process. --
    output_r1ack_in_assign_proc : process(output_r1vld_reg)
    begin
        if (((ap_const_logic_0 = output_r1vld_reg) or ((ap_const_logic_1 = output_r1vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            output_r1ack_in <= ap_const_logic_1;
        else 
            output_r1ack_in <= ap_const_logic_0;
        end if; 
    end process;


    -- output_r1vld_in assign process. --
    output_r1vld_in_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            output_r1vld_in <= ap_const_logic_1;
        else 
            output_r1vld_in <= ap_const_logic_0;
        end if; 
    end process;

end behav;
