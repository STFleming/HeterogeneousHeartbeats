// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cache_module,hls_ip_2013_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.278000,HLS_SYN_LAT=33,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module cache_module (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_req_din,
        a_req_full_n,
        a_req_write,
        a_rsp_empty_n,
        a_rsp_read,
        a_address,
        a_datain,
        a_dataout,
        a_size,
        AppID,
        sensorID,
        sensor_value,
        sensor_value_ap_vld,
        out_log_addr,
        out_log_addr_ap_vld,
        out_state_addr,
        out_state_addr_ap_vld
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   a_req_din;
input   a_req_full_n;
output   a_req_write;
input   a_rsp_empty_n;
output   a_rsp_read;
output  [31:0] a_address;
input  [31:0] a_datain;
output  [31:0] a_dataout;
output  [31:0] a_size;
input  [31:0] AppID;
input  [31:0] sensorID;
output  [31:0] sensor_value;
output   sensor_value_ap_vld;
output  [31:0] out_log_addr;
output   out_log_addr_ap_vld;
output  [31:0] out_state_addr;
output   out_state_addr_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sensor_value_ap_vld;
reg out_log_addr_ap_vld;
reg out_state_addr_ap_vld;
reg   [1:0] ap_CS_fsm = 2'b00;
wire   [4:0] i_fu_194_p2;
reg   [4:0] i_reg_245;
wire   [0:0] exitcond_i_fu_188_p2;
wire   [31:0] temp_cache_entry_prev_sensor_id_1_fu_213_p3;
wire   [31:0] temp_cache_entry_log_addr_1_fu_221_p3;
wire   [31:0] temp_cache_entry_state_addr_1_fu_229_p3;
wire   [3:0] hb_cache_AppID_address0;
reg    hb_cache_AppID_ce0;
wire   [31:0] hb_cache_AppID_q0;
wire   [3:0] hb_cache_state_addr_address0;
reg    hb_cache_state_addr_ce0;
wire   [31:0] hb_cache_state_addr_q0;
wire   [3:0] hb_cache_log_addr_address0;
reg    hb_cache_log_addr_ce0;
wire   [31:0] hb_cache_log_addr_q0;
wire   [3:0] hb_cache_prev_sensor_id_address0;
reg    hb_cache_prev_sensor_id_ce0;
wire   [31:0] hb_cache_prev_sensor_id_q0;
reg   [31:0] temp_res_prev_sensor_id_reg_137;
reg   [31:0] temp_res_log_addr_reg_150;
reg   [31:0] temp_res_state_addr_reg_163;
reg   [4:0] i_i_reg_176;
wire   [63:0] tmp_i_fu_200_p1;
wire   [0:0] tmp_1_i_fu_208_p2;
reg   [1:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b00;
parameter    ap_ST_st2_fsm_1 = 2'b1;
parameter    ap_ST_st3_fsm_2 = 2'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_true = 1'b1;


cache_module_hb_cache_AppID #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
hb_cache_AppID_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( hb_cache_AppID_address0 ),
    .ce0( hb_cache_AppID_ce0 ),
    .q0( hb_cache_AppID_q0 )
);

cache_module_hb_cache_AppID #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
hb_cache_state_addr_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( hb_cache_state_addr_address0 ),
    .ce0( hb_cache_state_addr_ce0 ),
    .q0( hb_cache_state_addr_q0 )
);

cache_module_hb_cache_AppID #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
hb_cache_log_addr_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( hb_cache_log_addr_address0 ),
    .ce0( hb_cache_log_addr_ce0 ),
    .q0( hb_cache_log_addr_q0 )
);

cache_module_hb_cache_AppID #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
hb_cache_prev_sensor_id_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( hb_cache_prev_sensor_id_address0 ),
    .ce0( hb_cache_prev_sensor_id_ce0 ),
    .q0( hb_cache_prev_sensor_id_q0 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        i_i_reg_176 <= i_reg_245;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        i_i_reg_176 <= ap_const_lv5_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        i_reg_245 <= i_fu_194_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        temp_res_log_addr_reg_150 <= temp_cache_entry_log_addr_1_fu_221_p3;
        temp_res_prev_sensor_id_reg_137 <= temp_cache_entry_prev_sensor_id_1_fu_213_p3;
        temp_res_state_addr_reg_163 <= temp_cache_entry_state_addr_1_fu_229_p3;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or exitcond_i_fu_188_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(exitcond_i_fu_188_p2 == ap_const_lv1_0))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or exitcond_i_fu_188_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(exitcond_i_fu_188_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// hb_cache_AppID_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        hb_cache_AppID_ce0 = ap_const_logic_1;
    end else begin
        hb_cache_AppID_ce0 = ap_const_logic_0;
    end
end

/// hb_cache_log_addr_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        hb_cache_log_addr_ce0 = ap_const_logic_1;
    end else begin
        hb_cache_log_addr_ce0 = ap_const_logic_0;
    end
end

/// hb_cache_prev_sensor_id_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        hb_cache_prev_sensor_id_ce0 = ap_const_logic_1;
    end else begin
        hb_cache_prev_sensor_id_ce0 = ap_const_logic_0;
    end
end

/// hb_cache_state_addr_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        hb_cache_state_addr_ce0 = ap_const_logic_1;
    end else begin
        hb_cache_state_addr_ce0 = ap_const_logic_0;
    end
end

/// out_log_addr_ap_vld assign process. ///
always @ (ap_CS_fsm or exitcond_i_fu_188_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(exitcond_i_fu_188_p2 == ap_const_lv1_0))) begin
        out_log_addr_ap_vld = ap_const_logic_1;
    end else begin
        out_log_addr_ap_vld = ap_const_logic_0;
    end
end

/// out_state_addr_ap_vld assign process. ///
always @ (ap_CS_fsm or exitcond_i_fu_188_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(exitcond_i_fu_188_p2 == ap_const_lv1_0))) begin
        out_state_addr_ap_vld = ap_const_logic_1;
    end else begin
        out_state_addr_ap_vld = ap_const_logic_0;
    end
end

/// sensor_value_ap_vld assign process. ///
always @ (ap_CS_fsm or exitcond_i_fu_188_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(exitcond_i_fu_188_p2 == ap_const_lv1_0))) begin
        sensor_value_ap_vld = ap_const_logic_1;
    end else begin
        sensor_value_ap_vld = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond_i_fu_188_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if (~(exitcond_i_fu_188_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        ap_ST_st3_fsm_2 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign a_address = ap_const_lv32_0;
assign a_dataout = ap_const_lv32_0;
assign a_req_din = ap_const_logic_0;
assign a_req_write = ap_const_logic_0;
assign a_rsp_read = ap_const_logic_0;
assign a_size = ap_const_lv32_0;
assign exitcond_i_fu_188_p2 = (i_i_reg_176 == ap_const_lv5_10? 1'b1: 1'b0);
assign hb_cache_AppID_address0 = tmp_i_fu_200_p1;
assign hb_cache_log_addr_address0 = tmp_i_fu_200_p1;
assign hb_cache_prev_sensor_id_address0 = tmp_i_fu_200_p1;
assign hb_cache_state_addr_address0 = tmp_i_fu_200_p1;
assign i_fu_194_p2 = (i_i_reg_176 + ap_const_lv5_1);
assign out_log_addr = temp_res_log_addr_reg_150;
assign out_state_addr = temp_res_state_addr_reg_163;
assign sensor_value = temp_res_prev_sensor_id_reg_137;
assign temp_cache_entry_log_addr_1_fu_221_p3 = ((tmp_1_i_fu_208_p2)? hb_cache_log_addr_q0: temp_res_log_addr_reg_150);
assign temp_cache_entry_prev_sensor_id_1_fu_213_p3 = ((tmp_1_i_fu_208_p2)? hb_cache_prev_sensor_id_q0: temp_res_prev_sensor_id_reg_137);
assign temp_cache_entry_state_addr_1_fu_229_p3 = ((tmp_1_i_fu_208_p2)? hb_cache_state_addr_q0: temp_res_state_addr_reg_163);
assign tmp_1_i_fu_208_p2 = (hb_cache_AppID_q0 == AppID? 1'b1: 1'b0);
assign tmp_i_fu_200_p1 = $unsigned(i_i_reg_176);


endmodule //cache_module

