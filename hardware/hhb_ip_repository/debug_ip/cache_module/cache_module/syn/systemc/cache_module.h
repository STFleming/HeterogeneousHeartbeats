// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _cache_module_HH_
#define _cache_module_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "cache_module_hb_cache_AppID.h"

namespace ap_rtl {

struct cache_module : public sc_module {
    // Port declarations 23
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > a_req_din;
    sc_in< sc_logic > a_req_full_n;
    sc_out< sc_logic > a_req_write;
    sc_in< sc_logic > a_rsp_empty_n;
    sc_out< sc_logic > a_rsp_read;
    sc_out< sc_lv<32> > a_address;
    sc_in< sc_lv<32> > a_datain;
    sc_out< sc_lv<32> > a_dataout;
    sc_out< sc_lv<32> > a_size;
    sc_in< sc_lv<32> > AppID;
    sc_in< sc_lv<32> > sensorID;
    sc_out< sc_lv<32> > sensor_value;
    sc_out< sc_logic > sensor_value_ap_vld;
    sc_out< sc_lv<32> > out_log_addr;
    sc_out< sc_logic > out_log_addr_ap_vld;
    sc_out< sc_lv<32> > out_state_addr;
    sc_out< sc_logic > out_state_addr_ap_vld;


    // Module declarations
    cache_module(sc_module_name name);
    SC_HAS_PROCESS(cache_module);

    ~cache_module();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    cache_module_hb_cache_AppID* hb_cache_AppID_U;
    cache_module_hb_cache_AppID* hb_cache_state_addr_U;
    cache_module_hb_cache_AppID* hb_cache_log_addr_U;
    cache_module_hb_cache_AppID* hb_cache_prev_sensor_id_U;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_lv<5> > i_fu_194_p2;
    sc_signal< sc_lv<5> > i_reg_245;
    sc_signal< sc_lv<1> > exitcond_i_fu_188_p2;
    sc_signal< sc_lv<32> > temp_cache_entry_prev_sensor_id_1_fu_213_p3;
    sc_signal< sc_lv<32> > temp_cache_entry_log_addr_1_fu_221_p3;
    sc_signal< sc_lv<32> > temp_cache_entry_state_addr_1_fu_229_p3;
    sc_signal< sc_lv<4> > hb_cache_AppID_address0;
    sc_signal< sc_logic > hb_cache_AppID_ce0;
    sc_signal< sc_lv<32> > hb_cache_AppID_q0;
    sc_signal< sc_lv<4> > hb_cache_state_addr_address0;
    sc_signal< sc_logic > hb_cache_state_addr_ce0;
    sc_signal< sc_lv<32> > hb_cache_state_addr_q0;
    sc_signal< sc_lv<4> > hb_cache_log_addr_address0;
    sc_signal< sc_logic > hb_cache_log_addr_ce0;
    sc_signal< sc_lv<32> > hb_cache_log_addr_q0;
    sc_signal< sc_lv<4> > hb_cache_prev_sensor_id_address0;
    sc_signal< sc_logic > hb_cache_prev_sensor_id_ce0;
    sc_signal< sc_lv<32> > hb_cache_prev_sensor_id_q0;
    sc_signal< sc_lv<32> > temp_res_prev_sensor_id_reg_137;
    sc_signal< sc_lv<32> > temp_res_log_addr_reg_150;
    sc_signal< sc_lv<32> > temp_res_state_addr_reg_163;
    sc_signal< sc_lv<5> > i_i_reg_176;
    sc_signal< sc_lv<64> > tmp_i_fu_200_p1;
    sc_signal< sc_lv<1> > tmp_1_i_fu_208_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_st1_fsm_0;
    static const sc_lv<2> ap_ST_st2_fsm_1;
    static const sc_lv<2> ap_ST_st3_fsm_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_address();
    void thread_a_dataout();
    void thread_a_req_din();
    void thread_a_req_write();
    void thread_a_rsp_read();
    void thread_a_size();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond_i_fu_188_p2();
    void thread_hb_cache_AppID_address0();
    void thread_hb_cache_AppID_ce0();
    void thread_hb_cache_log_addr_address0();
    void thread_hb_cache_log_addr_ce0();
    void thread_hb_cache_prev_sensor_id_address0();
    void thread_hb_cache_prev_sensor_id_ce0();
    void thread_hb_cache_state_addr_address0();
    void thread_hb_cache_state_addr_ce0();
    void thread_i_fu_194_p2();
    void thread_out_log_addr();
    void thread_out_log_addr_ap_vld();
    void thread_out_state_addr();
    void thread_out_state_addr_ap_vld();
    void thread_sensor_value();
    void thread_sensor_value_ap_vld();
    void thread_temp_cache_entry_log_addr_1_fu_221_p3();
    void thread_temp_cache_entry_prev_sensor_id_1_fu_213_p3();
    void thread_temp_cache_entry_state_addr_1_fu_229_p3();
    void thread_tmp_1_i_fu_208_p2();
    void thread_tmp_i_fu_200_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
