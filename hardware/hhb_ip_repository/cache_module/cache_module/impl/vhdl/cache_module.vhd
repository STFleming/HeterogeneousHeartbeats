-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cache_module is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_req_din : OUT STD_LOGIC;
    a_req_full_n : IN STD_LOGIC;
    a_req_write : OUT STD_LOGIC;
    a_rsp_empty_n : IN STD_LOGIC;
    a_rsp_read : OUT STD_LOGIC;
    a_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    a_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    AppID : IN STD_LOGIC_VECTOR (31 downto 0);
    sensorID : IN STD_LOGIC_VECTOR (31 downto 0);
    sensor_value : OUT STD_LOGIC_VECTOR (31 downto 0);
    sensor_value_ap_vld : OUT STD_LOGIC;
    out_log_addr : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_log_addr_ap_vld : OUT STD_LOGIC;
    out_state_addr : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_state_addr_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cache_module is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cache_module,hls_ip_2013_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.278000,HLS_SYN_LAT=33,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal i_fu_194_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_245 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_i_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_cache_entry_prev_sensor_id_1_fu_213_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_cache_entry_log_addr_1_fu_221_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_cache_entry_state_addr_1_fu_229_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal hb_cache_AppID_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal hb_cache_AppID_ce0 : STD_LOGIC;
    signal hb_cache_AppID_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hb_cache_state_addr_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal hb_cache_state_addr_ce0 : STD_LOGIC;
    signal hb_cache_state_addr_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hb_cache_log_addr_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal hb_cache_log_addr_ce0 : STD_LOGIC;
    signal hb_cache_log_addr_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hb_cache_prev_sensor_id_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal hb_cache_prev_sensor_id_ce0 : STD_LOGIC;
    signal hb_cache_prev_sensor_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_res_prev_sensor_id_reg_137 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_res_log_addr_reg_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_res_state_addr_reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_176 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component cache_module_hb_cache_AppID IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    hb_cache_AppID_U : component cache_module_hb_cache_AppID
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hb_cache_AppID_address0,
        ce0 => hb_cache_AppID_ce0,
        q0 => hb_cache_AppID_q0);

    hb_cache_state_addr_U : component cache_module_hb_cache_AppID
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hb_cache_state_addr_address0,
        ce0 => hb_cache_state_addr_ce0,
        q0 => hb_cache_state_addr_q0);

    hb_cache_log_addr_U : component cache_module_hb_cache_AppID
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hb_cache_log_addr_address0,
        ce0 => hb_cache_log_addr_ce0,
        q0 => hb_cache_log_addr_q0);

    hb_cache_prev_sensor_id_U : component cache_module_hb_cache_AppID
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hb_cache_prev_sensor_id_address0,
        ce0 => hb_cache_prev_sensor_id_ce0,
        q0 => hb_cache_prev_sensor_id_q0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_i_reg_176 assign process. --
    i_i_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                i_i_reg_176 <= i_reg_245;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                i_i_reg_176 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                i_reg_245 <= i_fu_194_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
                temp_res_log_addr_reg_150 <= temp_cache_entry_log_addr_1_fu_221_p3;
                temp_res_prev_sensor_id_reg_137 <= temp_cache_entry_prev_sensor_id_1_fu_213_p3;
                temp_res_state_addr_reg_163 <= temp_cache_entry_state_addr_1_fu_229_p3;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , exitcond_i_fu_188_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_i_fu_188_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    a_address <= ap_const_lv32_0;
    a_dataout <= ap_const_lv32_0;
    a_req_din <= ap_const_logic_0;
    a_req_write <= ap_const_logic_0;
    a_rsp_read <= ap_const_logic_0;
    a_size <= ap_const_lv32_0;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, exitcond_i_fu_188_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond_i_fu_188_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond_i_fu_188_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond_i_fu_188_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_188_p2 <= "1" when (i_i_reg_176 = ap_const_lv5_10) else "0";
    hb_cache_AppID_address0 <= tmp_i_fu_200_p1(4 - 1 downto 0);

    -- hb_cache_AppID_ce0 assign process. --
    hb_cache_AppID_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            hb_cache_AppID_ce0 <= ap_const_logic_1;
        else 
            hb_cache_AppID_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hb_cache_log_addr_address0 <= tmp_i_fu_200_p1(4 - 1 downto 0);

    -- hb_cache_log_addr_ce0 assign process. --
    hb_cache_log_addr_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            hb_cache_log_addr_ce0 <= ap_const_logic_1;
        else 
            hb_cache_log_addr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hb_cache_prev_sensor_id_address0 <= tmp_i_fu_200_p1(4 - 1 downto 0);

    -- hb_cache_prev_sensor_id_ce0 assign process. --
    hb_cache_prev_sensor_id_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            hb_cache_prev_sensor_id_ce0 <= ap_const_logic_1;
        else 
            hb_cache_prev_sensor_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hb_cache_state_addr_address0 <= tmp_i_fu_200_p1(4 - 1 downto 0);

    -- hb_cache_state_addr_ce0 assign process. --
    hb_cache_state_addr_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            hb_cache_state_addr_ce0 <= ap_const_logic_1;
        else 
            hb_cache_state_addr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_194_p2 <= std_logic_vector(unsigned(i_i_reg_176) + unsigned(ap_const_lv5_1));
    out_log_addr <= temp_res_log_addr_reg_150;

    -- out_log_addr_ap_vld assign process. --
    out_log_addr_ap_vld_assign_proc : process(ap_CS_fsm, exitcond_i_fu_188_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond_i_fu_188_p2 = ap_const_lv1_0)))) then 
            out_log_addr_ap_vld <= ap_const_logic_1;
        else 
            out_log_addr_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_state_addr <= temp_res_state_addr_reg_163;

    -- out_state_addr_ap_vld assign process. --
    out_state_addr_ap_vld_assign_proc : process(ap_CS_fsm, exitcond_i_fu_188_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond_i_fu_188_p2 = ap_const_lv1_0)))) then 
            out_state_addr_ap_vld <= ap_const_logic_1;
        else 
            out_state_addr_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sensor_value <= temp_res_prev_sensor_id_reg_137;

    -- sensor_value_ap_vld assign process. --
    sensor_value_ap_vld_assign_proc : process(ap_CS_fsm, exitcond_i_fu_188_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond_i_fu_188_p2 = ap_const_lv1_0)))) then 
            sensor_value_ap_vld <= ap_const_logic_1;
        else 
            sensor_value_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_cache_entry_log_addr_1_fu_221_p3 <= 
        hb_cache_log_addr_q0 when (tmp_1_i_fu_208_p2(0) = '1') else 
        temp_res_log_addr_reg_150;
    temp_cache_entry_prev_sensor_id_1_fu_213_p3 <= 
        hb_cache_prev_sensor_id_q0 when (tmp_1_i_fu_208_p2(0) = '1') else 
        temp_res_prev_sensor_id_reg_137;
    temp_cache_entry_state_addr_1_fu_229_p3 <= 
        hb_cache_state_addr_q0 when (tmp_1_i_fu_208_p2(0) = '1') else 
        temp_res_state_addr_reg_163;
    tmp_1_i_fu_208_p2 <= "1" when (hb_cache_AppID_q0 = AppID) else "0";
    tmp_i_fu_200_p1 <= std_logic_vector(resize(unsigned(i_i_reg_176),64));
end behav;
