// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef XCACHE_MODULE_H
#define XCACHE_MODULE_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xcache_module_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Bus_a_BaseAddress;
} XCache_module_Config;
#endif

typedef struct {
    u32 Bus_a_BaseAddress;
    u32 IsReady;
} XCache_module;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XCache_module_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XCache_module_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XCache_module_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XCache_module_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XCache_module_Initialize(XCache_module *InstancePtr, u16 DeviceId);
XCache_module_Config* XCache_module_LookupConfig(u16 DeviceId);
int XCache_module_CfgInitialize(XCache_module *InstancePtr, XCache_module_Config *ConfigPtr);
#else
int XCache_module_Initialize(XCache_module *InstancePtr, const char* InstanceName);
int XCache_module_Release(XCache_module *InstancePtr);
#endif

void XCache_module_Start(XCache_module *InstancePtr);
u32 XCache_module_IsDone(XCache_module *InstancePtr);
u32 XCache_module_IsIdle(XCache_module *InstancePtr);
u32 XCache_module_IsReady(XCache_module *InstancePtr);
void XCache_module_EnableAutoRestart(XCache_module *InstancePtr);
void XCache_module_DisableAutoRestart(XCache_module *InstancePtr);

void XCache_module_SetApplist_base_addr(XCache_module *InstancePtr, u32 Data);
u32 XCache_module_GetApplist_base_addr(XCache_module *InstancePtr);
u32 XCache_module_GetOutappid(XCache_module *InstancePtr);
u32 XCache_module_GetOuthwsw(XCache_module *InstancePtr);
u32 XCache_module_GetOutstateaddr(XCache_module *InstancePtr);
u32 XCache_module_GetOutlogaddr(XCache_module *InstancePtr);
u32 XCache_module_GetOutreadindex(XCache_module *InstancePtr);
void XCache_module_SetInappid(XCache_module *InstancePtr, u32 Data);
u32 XCache_module_GetInappid(XCache_module *InstancePtr);

void XCache_module_InterruptGlobalEnable(XCache_module *InstancePtr);
void XCache_module_InterruptGlobalDisable(XCache_module *InstancePtr);
void XCache_module_InterruptEnable(XCache_module *InstancePtr, u32 Mask);
void XCache_module_InterruptDisable(XCache_module *InstancePtr, u32 Mask);
void XCache_module_InterruptClear(XCache_module *InstancePtr, u32 Mask);
u32 XCache_module_InterruptGetEnabled(XCache_module *InstancePtr);
u32 XCache_module_InterruptGetStatus(XCache_module *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
