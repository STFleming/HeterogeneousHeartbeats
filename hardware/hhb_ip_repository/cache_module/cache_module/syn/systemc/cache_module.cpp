// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "cache_module.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic cache_module::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic cache_module::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> cache_module::ap_ST_st1_fsm_0 = "00";
const sc_lv<2> cache_module::ap_ST_st2_fsm_1 = "1";
const sc_lv<2> cache_module::ap_ST_st3_fsm_2 = "10";
const sc_lv<1> cache_module::ap_const_lv1_0 = "0";
const sc_lv<5> cache_module::ap_const_lv5_0 = "00000";
const sc_lv<5> cache_module::ap_const_lv5_10 = "10000";
const sc_lv<5> cache_module::ap_const_lv5_1 = "1";
const sc_lv<32> cache_module::ap_const_lv32_0 = "00000000000000000000000000000000";

cache_module::cache_module(sc_module_name name) : sc_module(name), mVcdFile(0) {
    hb_cache_AppID_U = new cache_module_hb_cache_AppID("hb_cache_AppID_U");
    hb_cache_AppID_U->clk(ap_clk);
    hb_cache_AppID_U->reset(ap_rst);
    hb_cache_AppID_U->address0(hb_cache_AppID_address0);
    hb_cache_AppID_U->ce0(hb_cache_AppID_ce0);
    hb_cache_AppID_U->q0(hb_cache_AppID_q0);
    hb_cache_state_addr_U = new cache_module_hb_cache_AppID("hb_cache_state_addr_U");
    hb_cache_state_addr_U->clk(ap_clk);
    hb_cache_state_addr_U->reset(ap_rst);
    hb_cache_state_addr_U->address0(hb_cache_state_addr_address0);
    hb_cache_state_addr_U->ce0(hb_cache_state_addr_ce0);
    hb_cache_state_addr_U->q0(hb_cache_state_addr_q0);
    hb_cache_log_addr_U = new cache_module_hb_cache_AppID("hb_cache_log_addr_U");
    hb_cache_log_addr_U->clk(ap_clk);
    hb_cache_log_addr_U->reset(ap_rst);
    hb_cache_log_addr_U->address0(hb_cache_log_addr_address0);
    hb_cache_log_addr_U->ce0(hb_cache_log_addr_ce0);
    hb_cache_log_addr_U->q0(hb_cache_log_addr_q0);
    hb_cache_prev_sensor_id_U = new cache_module_hb_cache_AppID("hb_cache_prev_sensor_id_U");
    hb_cache_prev_sensor_id_U->clk(ap_clk);
    hb_cache_prev_sensor_id_U->reset(ap_rst);
    hb_cache_prev_sensor_id_U->address0(hb_cache_prev_sensor_id_address0);
    hb_cache_prev_sensor_id_U->ce0(hb_cache_prev_sensor_id_ce0);
    hb_cache_prev_sensor_id_U->q0(hb_cache_prev_sensor_id_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address);

    SC_METHOD(thread_a_dataout);

    SC_METHOD(thread_a_req_din);

    SC_METHOD(thread_a_req_write);

    SC_METHOD(thread_a_rsp_read);

    SC_METHOD(thread_a_size);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_i_fu_188_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_i_fu_188_p2 );

    SC_METHOD(thread_exitcond_i_fu_188_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( i_i_reg_176 );

    SC_METHOD(thread_hb_cache_AppID_address0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_i_fu_200_p1 );

    SC_METHOD(thread_hb_cache_AppID_ce0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_hb_cache_log_addr_address0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_i_fu_200_p1 );

    SC_METHOD(thread_hb_cache_log_addr_ce0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_hb_cache_prev_sensor_id_address0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_i_fu_200_p1 );

    SC_METHOD(thread_hb_cache_prev_sensor_id_ce0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_hb_cache_state_addr_address0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_i_fu_200_p1 );

    SC_METHOD(thread_hb_cache_state_addr_ce0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_i_fu_194_p2);
    sensitive << ( i_i_reg_176 );

    SC_METHOD(thread_out_log_addr);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_i_fu_188_p2 );
    sensitive << ( temp_res_log_addr_reg_150 );

    SC_METHOD(thread_out_log_addr_ap_vld);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_i_fu_188_p2 );

    SC_METHOD(thread_out_state_addr);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_i_fu_188_p2 );
    sensitive << ( temp_res_state_addr_reg_163 );

    SC_METHOD(thread_out_state_addr_ap_vld);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_i_fu_188_p2 );

    SC_METHOD(thread_sensor_value);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_i_fu_188_p2 );
    sensitive << ( temp_res_prev_sensor_id_reg_137 );

    SC_METHOD(thread_sensor_value_ap_vld);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_i_fu_188_p2 );

    SC_METHOD(thread_temp_cache_entry_log_addr_1_fu_221_p3);
    sensitive << ( hb_cache_log_addr_q0 );
    sensitive << ( temp_res_log_addr_reg_150 );
    sensitive << ( tmp_1_i_fu_208_p2 );

    SC_METHOD(thread_temp_cache_entry_prev_sensor_id_1_fu_213_p3);
    sensitive << ( hb_cache_prev_sensor_id_q0 );
    sensitive << ( temp_res_prev_sensor_id_reg_137 );
    sensitive << ( tmp_1_i_fu_208_p2 );

    SC_METHOD(thread_temp_cache_entry_state_addr_1_fu_229_p3);
    sensitive << ( hb_cache_state_addr_q0 );
    sensitive << ( temp_res_state_addr_reg_163 );
    sensitive << ( tmp_1_i_fu_208_p2 );

    SC_METHOD(thread_tmp_1_i_fu_208_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( AppID );
    sensitive << ( hb_cache_AppID_q0 );

    SC_METHOD(thread_tmp_i_fu_200_p1);
    sensitive << ( i_i_reg_176 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_i_fu_188_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "cache_module_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_req_din, "(port)a_req_din");
    sc_trace(mVcdFile, a_req_full_n, "(port)a_req_full_n");
    sc_trace(mVcdFile, a_req_write, "(port)a_req_write");
    sc_trace(mVcdFile, a_rsp_empty_n, "(port)a_rsp_empty_n");
    sc_trace(mVcdFile, a_rsp_read, "(port)a_rsp_read");
    sc_trace(mVcdFile, a_address, "(port)a_address");
    sc_trace(mVcdFile, a_datain, "(port)a_datain");
    sc_trace(mVcdFile, a_dataout, "(port)a_dataout");
    sc_trace(mVcdFile, a_size, "(port)a_size");
    sc_trace(mVcdFile, AppID, "(port)AppID");
    sc_trace(mVcdFile, sensorID, "(port)sensorID");
    sc_trace(mVcdFile, sensor_value, "(port)sensor_value");
    sc_trace(mVcdFile, sensor_value_ap_vld, "(port)sensor_value_ap_vld");
    sc_trace(mVcdFile, out_log_addr, "(port)out_log_addr");
    sc_trace(mVcdFile, out_log_addr_ap_vld, "(port)out_log_addr_ap_vld");
    sc_trace(mVcdFile, out_state_addr, "(port)out_state_addr");
    sc_trace(mVcdFile, out_state_addr_ap_vld, "(port)out_state_addr_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, i_fu_194_p2, "i_fu_194_p2");
    sc_trace(mVcdFile, i_reg_245, "i_reg_245");
    sc_trace(mVcdFile, exitcond_i_fu_188_p2, "exitcond_i_fu_188_p2");
    sc_trace(mVcdFile, temp_cache_entry_prev_sensor_id_1_fu_213_p3, "temp_cache_entry_prev_sensor_id_1_fu_213_p3");
    sc_trace(mVcdFile, temp_cache_entry_log_addr_1_fu_221_p3, "temp_cache_entry_log_addr_1_fu_221_p3");
    sc_trace(mVcdFile, temp_cache_entry_state_addr_1_fu_229_p3, "temp_cache_entry_state_addr_1_fu_229_p3");
    sc_trace(mVcdFile, hb_cache_AppID_address0, "hb_cache_AppID_address0");
    sc_trace(mVcdFile, hb_cache_AppID_ce0, "hb_cache_AppID_ce0");
    sc_trace(mVcdFile, hb_cache_AppID_q0, "hb_cache_AppID_q0");
    sc_trace(mVcdFile, hb_cache_state_addr_address0, "hb_cache_state_addr_address0");
    sc_trace(mVcdFile, hb_cache_state_addr_ce0, "hb_cache_state_addr_ce0");
    sc_trace(mVcdFile, hb_cache_state_addr_q0, "hb_cache_state_addr_q0");
    sc_trace(mVcdFile, hb_cache_log_addr_address0, "hb_cache_log_addr_address0");
    sc_trace(mVcdFile, hb_cache_log_addr_ce0, "hb_cache_log_addr_ce0");
    sc_trace(mVcdFile, hb_cache_log_addr_q0, "hb_cache_log_addr_q0");
    sc_trace(mVcdFile, hb_cache_prev_sensor_id_address0, "hb_cache_prev_sensor_id_address0");
    sc_trace(mVcdFile, hb_cache_prev_sensor_id_ce0, "hb_cache_prev_sensor_id_ce0");
    sc_trace(mVcdFile, hb_cache_prev_sensor_id_q0, "hb_cache_prev_sensor_id_q0");
    sc_trace(mVcdFile, temp_res_prev_sensor_id_reg_137, "temp_res_prev_sensor_id_reg_137");
    sc_trace(mVcdFile, temp_res_log_addr_reg_150, "temp_res_log_addr_reg_150");
    sc_trace(mVcdFile, temp_res_state_addr_reg_163, "temp_res_state_addr_reg_163");
    sc_trace(mVcdFile, i_i_reg_176, "i_i_reg_176");
    sc_trace(mVcdFile, tmp_i_fu_200_p1, "tmp_i_fu_200_p1");
    sc_trace(mVcdFile, tmp_1_i_fu_208_p2, "tmp_1_i_fu_208_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("cache_module.hdltvin.dat");
    mHdltvoutHandle.open("cache_module.hdltvout.dat");
}

cache_module::~cache_module() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete hb_cache_AppID_U;
    delete hb_cache_state_addr_U;
    delete hb_cache_log_addr_U;
    delete hb_cache_prev_sensor_id_U;
}

void cache_module::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
        i_i_reg_176 = i_reg_245.read();
    } else if ((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_i_reg_176 = ap_const_lv5_0;
    }
    if (esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read())) {
        i_reg_245 = i_fu_194_p2.read();
    }
    if (esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
        temp_res_log_addr_reg_150 = temp_cache_entry_log_addr_1_fu_221_p3.read();
        temp_res_prev_sensor_id_reg_137 = temp_cache_entry_prev_sensor_id_1_fu_213_p3.read();
        temp_res_state_addr_reg_163 = temp_cache_entry_state_addr_1_fu_229_p3.read();
    }
}

void cache_module::thread_a_address() {
    a_address = ap_const_lv32_0;
}

void cache_module::thread_a_dataout() {
    a_dataout = ap_const_lv32_0;
}

void cache_module::thread_a_req_din() {
    a_req_din = ap_const_logic_0;
}

void cache_module::thread_a_req_write() {
    a_req_write = ap_const_logic_0;
}

void cache_module::thread_a_rsp_read() {
    a_rsp_read = ap_const_logic_0;
}

void cache_module::thread_a_size() {
    a_size = ap_const_lv32_0;
}

void cache_module::thread_ap_done() {
    if ((esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void cache_module::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void cache_module::thread_ap_ready() {
    if ((esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void cache_module::thread_exitcond_i_fu_188_p2() {
    exitcond_i_fu_188_p2 = (!i_i_reg_176.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_i_reg_176.read() == ap_const_lv5_10);
}

void cache_module::thread_hb_cache_AppID_address0() {
    hb_cache_AppID_address0 =  (sc_lv<4>) (tmp_i_fu_200_p1.read());
}

void cache_module::thread_hb_cache_AppID_ce0() {
    if (esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read())) {
        hb_cache_AppID_ce0 = ap_const_logic_1;
    } else {
        hb_cache_AppID_ce0 = ap_const_logic_0;
    }
}

void cache_module::thread_hb_cache_log_addr_address0() {
    hb_cache_log_addr_address0 =  (sc_lv<4>) (tmp_i_fu_200_p1.read());
}

void cache_module::thread_hb_cache_log_addr_ce0() {
    if (esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read())) {
        hb_cache_log_addr_ce0 = ap_const_logic_1;
    } else {
        hb_cache_log_addr_ce0 = ap_const_logic_0;
    }
}

void cache_module::thread_hb_cache_prev_sensor_id_address0() {
    hb_cache_prev_sensor_id_address0 =  (sc_lv<4>) (tmp_i_fu_200_p1.read());
}

void cache_module::thread_hb_cache_prev_sensor_id_ce0() {
    if (esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read())) {
        hb_cache_prev_sensor_id_ce0 = ap_const_logic_1;
    } else {
        hb_cache_prev_sensor_id_ce0 = ap_const_logic_0;
    }
}

void cache_module::thread_hb_cache_state_addr_address0() {
    hb_cache_state_addr_address0 =  (sc_lv<4>) (tmp_i_fu_200_p1.read());
}

void cache_module::thread_hb_cache_state_addr_ce0() {
    if (esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read())) {
        hb_cache_state_addr_ce0 = ap_const_logic_1;
    } else {
        hb_cache_state_addr_ce0 = ap_const_logic_0;
    }
}

void cache_module::thread_i_fu_194_p2() {
    i_fu_194_p2 = (!i_i_reg_176.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_bigint<5>(i_i_reg_176.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void cache_module::thread_out_log_addr() {
    out_log_addr = temp_res_log_addr_reg_150.read();
}

void cache_module::thread_out_log_addr_ap_vld() {
    if ((esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_0))) {
        out_log_addr_ap_vld = ap_const_logic_1;
    } else {
        out_log_addr_ap_vld = ap_const_logic_0;
    }
}

void cache_module::thread_out_state_addr() {
    out_state_addr = temp_res_state_addr_reg_163.read();
}

void cache_module::thread_out_state_addr_ap_vld() {
    if ((esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_0))) {
        out_state_addr_ap_vld = ap_const_logic_1;
    } else {
        out_state_addr_ap_vld = ap_const_logic_0;
    }
}

void cache_module::thread_sensor_value() {
    sensor_value = temp_res_prev_sensor_id_reg_137.read();
}

void cache_module::thread_sensor_value_ap_vld() {
    if ((esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_0))) {
        sensor_value_ap_vld = ap_const_logic_1;
    } else {
        sensor_value_ap_vld = ap_const_logic_0;
    }
}

void cache_module::thread_temp_cache_entry_log_addr_1_fu_221_p3() {
    temp_cache_entry_log_addr_1_fu_221_p3 = (!tmp_1_i_fu_208_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_1_i_fu_208_p2.read()[0].to_bool())? hb_cache_log_addr_q0.read(): temp_res_log_addr_reg_150.read());
}

void cache_module::thread_temp_cache_entry_prev_sensor_id_1_fu_213_p3() {
    temp_cache_entry_prev_sensor_id_1_fu_213_p3 = (!tmp_1_i_fu_208_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_1_i_fu_208_p2.read()[0].to_bool())? hb_cache_prev_sensor_id_q0.read(): temp_res_prev_sensor_id_reg_137.read());
}

void cache_module::thread_temp_cache_entry_state_addr_1_fu_229_p3() {
    temp_cache_entry_state_addr_1_fu_229_p3 = (!tmp_1_i_fu_208_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_1_i_fu_208_p2.read()[0].to_bool())? hb_cache_state_addr_q0.read(): temp_res_state_addr_reg_163.read());
}

void cache_module::thread_tmp_1_i_fu_208_p2() {
    tmp_1_i_fu_208_p2 = (!hb_cache_AppID_q0.read().is_01() || !AppID.read().is_01())? sc_lv<1>(): sc_lv<1>(hb_cache_AppID_q0.read() == AppID.read());
}

void cache_module::thread_tmp_i_fu_200_p1() {
    tmp_i_fu_200_p1 = esl_zext<64,5>(i_i_reg_176.read());
}

void cache_module::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 0 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            if (!esl_seteq<1,1,1>(exitcond_i_fu_188_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}
void cache_module::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_req_din\" :  \"" << a_req_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_req_full_n\" :  \"" << a_req_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_req_write\" :  \"" << a_req_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_rsp_empty_n\" :  \"" << a_rsp_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_rsp_read\" :  \"" << a_rsp_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_address\" :  \"" << a_address.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_datain\" :  \"" << a_datain.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_dataout\" :  \"" << a_dataout.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_size\" :  \"" << a_size.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"AppID\" :  \"" << AppID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sensorID\" :  \"" << sensorID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sensor_value\" :  \"" << sensor_value.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sensor_value_ap_vld\" :  \"" << sensor_value_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_log_addr\" :  \"" << out_log_addr.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_log_addr_ap_vld\" :  \"" << out_log_addr_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_state_addr\" :  \"" << out_state_addr.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_state_addr_ap_vld\" :  \"" << out_state_addr_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

