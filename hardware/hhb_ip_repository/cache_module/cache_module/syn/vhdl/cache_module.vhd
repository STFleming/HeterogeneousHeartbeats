-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cache_module is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_req_din : OUT STD_LOGIC;
    a_req_full_n : IN STD_LOGIC;
    a_req_write : OUT STD_LOGIC;
    a_rsp_empty_n : IN STD_LOGIC;
    a_rsp_read : OUT STD_LOGIC;
    a_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    a_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    applist_base_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    outAppID : OUT STD_LOGIC_VECTOR (31 downto 0);
    outHWSW : OUT STD_LOGIC_VECTOR (31 downto 0);
    outStateAddr : OUT STD_LOGIC_VECTOR (31 downto 0);
    outLogAddr : OUT STD_LOGIC_VECTOR (31 downto 0);
    outReadIndex : OUT STD_LOGIC_VECTOR (31 downto 0);
    inAppID : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cache_module is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cache_module,hls_ip_2013_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.190000,HLS_SYN_LAT=276,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_ST_pp0_stg0_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st13_fsm_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_ST_st14_fsm_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_ST_st15_fsm_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_ST_st16_fsm_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_pp1_stg0_fsm_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_ST_st24_fsm_10 : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_ST_pp2_stg0_fsm_11 : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_ST_st32_fsm_12 : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_ST_pp3_stg0_fsm_13 : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_ST_pp3_stg1_fsm_14 : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_ST_pp3_stg2_fsm_15 : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_ST_pp3_stg3_fsm_16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_ST_pp3_stg4_fsm_17 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_ST_pp3_stg5_fsm_18 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_ST_pp3_stg6_fsm_19 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_ST_st46_fsm_20 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_ST_st47_fsm_21 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_34 : STD_LOGIC_VECTOR (5 downto 0) := "110100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal applist_base_addr0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal applist_base_addr0vld_reg : STD_LOGIC := '0';
    signal applist_base_addr0ack_out : STD_LOGIC;
    signal outAppID1data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal outAppID1vld_reg : STD_LOGIC := '0';
    signal outAppID1vld_in : STD_LOGIC;
    signal outAppID1ack_in : STD_LOGIC;
    signal outHWSW1data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal outHWSW1vld_reg : STD_LOGIC := '0';
    signal outHWSW1vld_in : STD_LOGIC;
    signal outHWSW1ack_in : STD_LOGIC;
    signal outStateAddr1data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal outStateAddr1vld_reg : STD_LOGIC := '0';
    signal outStateAddr1vld_in : STD_LOGIC;
    signal outStateAddr1ack_in : STD_LOGIC;
    signal outLogAddr1data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal outLogAddr1vld_reg : STD_LOGIC := '0';
    signal outLogAddr1vld_in : STD_LOGIC;
    signal outLogAddr1ack_in : STD_LOGIC;
    signal outReadIndex1data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal outReadIndex1vld_reg : STD_LOGIC := '0';
    signal outReadIndex1vld_in : STD_LOGIC;
    signal outReadIndex1ack_in : STD_LOGIC;
    signal inAppID0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal inAppID0vld_reg : STD_LOGIC := '0';
    signal inAppID0ack_out : STD_LOGIC;
    signal indvar_reg_277 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_indvar_reg_277_pp0_it1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal exitcond2_reg_799 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond2_reg_799_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_253 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppstg_indvar_reg_277_pp0_it2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_indvar_reg_277_pp0_it3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_indvar_reg_277_pp0_it4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_indvar_reg_277_pp0_it5 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_indvar_reg_277_pp0_it6 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar9_reg_289 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_indvar9_reg_289_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it5 : STD_LOGIC := '0';
    signal ap_reg_ppstg_indvar9_reg_289_pp1_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_285 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it6 : STD_LOGIC := '0';
    signal ap_reg_ppstg_indvar9_reg_289_pp1_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_indvar9_reg_289_pp1_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_indvar9_reg_289_pp1_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_index_load4_reg_302 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar1_reg_326 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_indvar1_reg_326_pp2_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp2_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it5 : STD_LOGIC := '0';
    signal ap_reg_ppstg_indvar1_reg_326_pp2_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_315 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it6 : STD_LOGIC := '0';
    signal ap_reg_ppstg_indvar1_reg_326_pp2_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_indvar1_reg_326_pp2_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_indvar1_reg_326_pp2_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal hb_cache_0_prev_sensor_value2_reg_339 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_446 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_462 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_763 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_483_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal buff_addr_gep_fu_210_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal buff_addr_reg_775 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_475_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_cast_fu_494_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_9_cast_reg_780 : STD_LOGIC_VECTOR (32 downto 0);
    signal i_2_fu_504_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_788 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_addr_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond2_reg_799_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond2_reg_799_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond2_reg_799_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond2_reg_799_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond2_reg_799_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_571_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_next_reg_803 : STD_LOGIC_VECTOR (2 downto 0);
    signal isIter0_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isIter0_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hb_cache_0_state_addr_reg_820 : STD_LOGIC_VECTOR (31 downto 0);
    signal hb_cache_0_log_addr_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal buff_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_outReadIndex_reg_846 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_addr_1_reg_855 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_addr_2_reg_864 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_876 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_880 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_addr_3_reg_884 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_890 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp3_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_890_pp3_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_697_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_reg_894 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar9_phi_fu_293_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar1_phi_fu_330_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_464 : BOOLEAN;
    signal buff_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal buff_ce0 : STD_LOGIC;
    signal buff_we0 : STD_LOGIC;
    signal buff_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buff_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal buff_ce1 : STD_LOGIC;
    signal cacheHitLoc_reg_255 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_266 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_phi_fu_281_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal read_index_load_reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_outAppID_1_reg_351 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_outStateAddr_1_reg_368 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_outLogAddr_1_reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_outHWSW_1_reg_406 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_outReadIndex_1_reg_427 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_phi_fu_450_p8 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_cast_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_681_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_739_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_bdd_584 : BOOLEAN;
    signal refresher_read_index_1_fu_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_489_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_510_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_fu_522_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_530_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp1_fu_534_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_shl_cast_fu_518_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_1_fu_539_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_2_fu_545_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_fu_598_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_11_fu_622_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp2_fu_626_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_634_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_639_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_17_fu_671_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_19_fu_711_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp3_fu_715_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_723_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_729_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_sig_bdd_757 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component cache_module_buff IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    buff_U : component cache_module_buff
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buff_address0,
        ce0 => buff_ce0,
        we0 => buff_we0,
        d0 => buff_d0,
        q0 => buff_q0,
        address1 => buff_address1,
        ce1 => buff_ce1,
        q1 => buff_q1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and not((ap_const_lv1_0 = exitcond2_fu_565_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_7_fu_498_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and (ap_const_lv1_0 = exitcond2_fu_565_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_7_fu_498_p2))) or ((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and not((ap_const_lv1_0 = exitcond2_fu_565_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_7_fu_498_p2)))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_9 = ap_CS_fsm) and not((ap_sig_bdd_285 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and not((ap_const_lv1_0 = indvar9_phi_fu_293_p4)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st16_fsm_8 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_6_fu_593_p2))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_9 = ap_CS_fsm) and not((ap_sig_bdd_285 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_reg_ppiten_pp1_it0;
                elsif (((ap_ST_st16_fsm_8 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_6_fu_593_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_9 = ap_CS_fsm) and not((ap_sig_bdd_285 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it3 assign process. --
    ap_reg_ppiten_pp1_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it3 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_9 = ap_CS_fsm) and not((ap_sig_bdd_285 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then 
                    ap_reg_ppiten_pp1_it3 <= ap_reg_ppiten_pp1_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it4 assign process. --
    ap_reg_ppiten_pp1_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it4 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_9 = ap_CS_fsm) and not((ap_sig_bdd_285 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then 
                    ap_reg_ppiten_pp1_it4 <= ap_reg_ppiten_pp1_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it5 assign process. --
    ap_reg_ppiten_pp1_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it5 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_9 = ap_CS_fsm) and not((ap_sig_bdd_285 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then 
                    ap_reg_ppiten_pp1_it5 <= ap_reg_ppiten_pp1_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it6 assign process. --
    ap_reg_ppiten_pp1_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it6 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_9 = ap_CS_fsm) and not((ap_sig_bdd_285 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then 
                    ap_reg_ppiten_pp1_it6 <= ap_reg_ppiten_pp1_it5;
                elsif (((ap_ST_st16_fsm_8 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_6_fu_593_p2))) then 
                    ap_reg_ppiten_pp1_it6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it0 assign process. --
    ap_reg_ppiten_pp2_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_lv1_0 = indvar1_phi_fu_330_p4)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st24_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_10_fu_617_p2))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it1 assign process. --
    ap_reg_ppiten_pp2_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_reg_ppiten_pp2_it0;
                elsif (((ap_ST_st24_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_10_fu_617_p2))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it2 assign process. --
    ap_reg_ppiten_pp2_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then 
                    ap_reg_ppiten_pp2_it2 <= ap_reg_ppiten_pp2_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it3 assign process. --
    ap_reg_ppiten_pp2_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it3 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then 
                    ap_reg_ppiten_pp2_it3 <= ap_reg_ppiten_pp2_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it4 assign process. --
    ap_reg_ppiten_pp2_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it4 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then 
                    ap_reg_ppiten_pp2_it4 <= ap_reg_ppiten_pp2_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it5 assign process. --
    ap_reg_ppiten_pp2_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it5 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then 
                    ap_reg_ppiten_pp2_it5 <= ap_reg_ppiten_pp2_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it6 assign process. --
    ap_reg_ppiten_pp2_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it6 <= ap_const_logic_0;
            else
                if (((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then 
                    ap_reg_ppiten_pp2_it6 <= ap_reg_ppiten_pp2_it5;
                elsif (((ap_ST_st24_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_10_fu_617_p2))) then 
                    ap_reg_ppiten_pp2_it6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it0 assign process. --
    ap_reg_ppiten_pp3_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp3_stg0_fsm_13 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_691_p2)))) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
                elsif ((ap_ST_st32_fsm_12 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it1 assign process. --
    ap_reg_ppiten_pp3_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond_reg_890) and (ap_ST_pp3_stg6_fsm_19 = ap_CS_fsm) and not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and ap_sig_bdd_464)))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_1;
                elsif (((ap_ST_st32_fsm_12 = ap_CS_fsm) or ((ap_ST_pp3_stg6_fsm_19 = ap_CS_fsm) and not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and ap_sig_bdd_464)) and not((ap_const_lv1_0 = exitcond_reg_890))))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- applist_base_addr0data_reg assign process. --
    applist_base_addr0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                applist_base_addr0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = applist_base_addr0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = applist_base_addr0vld_reg) and (ap_const_logic_1 = applist_base_addr0ack_out)))) then 
                    applist_base_addr0data_reg <= applist_base_addr;
                end if; 
            end if;
        end if;
    end process;


    -- applist_base_addr0vld_reg assign process. --
    applist_base_addr0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- inAppID0data_reg assign process. --
    inAppID0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                inAppID0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = inAppID0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = inAppID0vld_reg) and (ap_const_logic_1 = inAppID0ack_out)))) then 
                    inAppID0data_reg <= inAppID;
                end if; 
            end if;
        end if;
    end process;


    -- inAppID0vld_reg assign process. --
    inAppID0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- outAppID1data_reg assign process. --
    outAppID1data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                outAppID1data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = outAppID1vld_in) and (ap_const_logic_0 = outAppID1vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = outAppID1vld_in) and (ap_const_logic_1 = outAppID1vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
                    outAppID1data_reg <= temp_outAppID_1_reg_351;
                end if; 
            end if;
        end if;
    end process;


    -- outAppID1vld_reg assign process. --
    outAppID1vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- outHWSW1data_reg assign process. --
    outHWSW1data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                outHWSW1data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = outHWSW1vld_in) and (ap_const_logic_0 = outHWSW1vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = outHWSW1vld_in) and (ap_const_logic_1 = outHWSW1vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
                    outHWSW1data_reg <= temp_outHWSW_1_reg_406;
                end if; 
            end if;
        end if;
    end process;


    -- outHWSW1vld_reg assign process. --
    outHWSW1vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- outLogAddr1data_reg assign process. --
    outLogAddr1data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                outLogAddr1data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = outLogAddr1vld_in) and (ap_const_logic_0 = outLogAddr1vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = outLogAddr1vld_in) and (ap_const_logic_1 = outLogAddr1vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
                    outLogAddr1data_reg <= temp_outLogAddr_1_reg_387;
                end if; 
            end if;
        end if;
    end process;


    -- outLogAddr1vld_reg assign process. --
    outLogAddr1vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- outReadIndex1data_reg assign process. --
    outReadIndex1data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                outReadIndex1data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = outReadIndex1vld_in) and (ap_const_logic_0 = outReadIndex1vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = outReadIndex1vld_in) and (ap_const_logic_1 = outReadIndex1vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
                    outReadIndex1data_reg <= temp_outReadIndex_1_reg_427;
                end if; 
            end if;
        end if;
    end process;


    -- outReadIndex1vld_reg assign process. --
    outReadIndex1vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- outStateAddr1data_reg assign process. --
    outStateAddr1data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                outStateAddr1data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = outStateAddr1vld_in) and (ap_const_logic_0 = outStateAddr1vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = outStateAddr1vld_in) and (ap_const_logic_1 = outStateAddr1vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
                    outStateAddr1data_reg <= temp_outStateAddr_1_reg_368;
                end if; 
            end if;
        end if;
    end process;


    -- outStateAddr1vld_reg assign process. --
    outStateAddr1vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- cacheHitLoc_reg_255 assign process. --
    cacheHitLoc_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_fu_475_p3) and not((ap_const_lv1_0 = tmp_3_reg_763)))) then 
                cacheHitLoc_reg_255 <= i_fu_483_p2;
            elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
                cacheHitLoc_reg_255 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- i_1_reg_266 assign process. --
    i_1_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st14_fsm_6 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_5_fu_588_p2))) then 
                i_1_reg_266 <= i_2_reg_788;
            elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_fu_475_p3)))) then 
                i_1_reg_266 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- i_3_reg_446 assign process. --
    i_3_reg_446_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_pp3_stg0_fsm_13 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = tmp_3_reg_763) and (ap_const_lv1_0 = exitcond_reg_890) and (ap_const_lv1_0 = tmp_16_reg_880)) or ((ap_ST_pp3_stg0_fsm_13 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = tmp_3_reg_763) and (ap_const_lv1_0 = exitcond_reg_890) and not((ap_const_lv1_0 = tmp_16_reg_880))) or ((ap_ST_pp3_stg0_fsm_13 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = exitcond_reg_890) and not((ap_const_lv1_0 = tmp_3_reg_763))))) then 
                i_3_reg_446 <= i_4_reg_894;
            elsif ((ap_ST_st32_fsm_12 = ap_CS_fsm)) then 
                i_3_reg_446 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- indvar1_reg_326 assign process. --
    indvar1_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st24_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_10_fu_617_p2))) then 
                indvar1_reg_326 <= ap_const_lv1_0;
            elsif (((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and (ap_const_lv1_0 = indvar1_reg_326))) then 
                indvar1_reg_326 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- indvar9_reg_289 assign process. --
    indvar9_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st16_fsm_8 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_6_fu_593_p2))) then 
                indvar9_reg_289 <= ap_const_lv1_0;
            elsif (((ap_ST_pp1_stg0_fsm_9 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_285 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and (ap_const_lv1_0 = indvar9_reg_289))) then 
                indvar9_reg_289 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- indvar_reg_277 assign process. --
    indvar_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_7_fu_498_p2)))) then 
                indvar_reg_277 <= ap_const_lv3_0;
            elsif (((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and (exitcond2_reg_799 = ap_const_lv1_0))) then 
                indvar_reg_277 <= indvar_next_reg_803;
            end if; 
        end if;
    end process;

    -- temp_outAppID_1_reg_351 assign process. --
    temp_outAppID_1_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_7_fu_498_p2))) then 
                temp_outAppID_1_reg_351 <= ap_const_lv32_0;
            elsif ((((ap_ST_st24_fsm_10 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_10_fu_617_p2))) or ((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_lv1_0 = ap_reg_ppstg_indvar1_reg_326_pp2_it5))) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_fu_475_p3) and (ap_const_lv1_0 = tmp_3_reg_763)))) then 
                temp_outAppID_1_reg_351 <= inAppID0data_reg;
            end if; 
        end if;
    end process;

    -- temp_outHWSW_1_reg_406 assign process. --
    temp_outHWSW_1_reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_7_fu_498_p2))) then 
                temp_outHWSW_1_reg_406 <= ap_const_lv32_0;
            elsif (((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_lv1_0 = ap_reg_ppstg_indvar1_reg_326_pp2_it5)))) then 
                temp_outHWSW_1_reg_406 <= hb_cache_0_prev_sensor_value2_reg_339;
            end if; 
        end if;
    end process;

    -- temp_outLogAddr_1_reg_387 assign process. --
    temp_outLogAddr_1_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_7_fu_498_p2))) then 
                temp_outLogAddr_1_reg_387 <= ap_const_lv32_0;
            elsif ((((ap_ST_st24_fsm_10 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_10_fu_617_p2))) or ((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_lv1_0 = ap_reg_ppstg_indvar1_reg_326_pp2_it5))))) then 
                temp_outLogAddr_1_reg_387 <= hb_cache_0_log_addr_reg_838;
            end if; 
        end if;
    end process;

    -- temp_outReadIndex_1_reg_427 assign process. --
    temp_outReadIndex_1_reg_427_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_7_fu_498_p2))) then 
                temp_outReadIndex_1_reg_427 <= ap_const_lv32_0;
            elsif ((((ap_ST_st24_fsm_10 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_10_fu_617_p2))) or ((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_lv1_0 = ap_reg_ppstg_indvar1_reg_326_pp2_it5))))) then 
                temp_outReadIndex_1_reg_427 <= temp_outReadIndex_reg_846;
            end if; 
        end if;
    end process;

    -- temp_outStateAddr_1_reg_368 assign process. --
    temp_outStateAddr_1_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_7_fu_498_p2))) then 
                temp_outStateAddr_1_reg_368 <= ap_const_lv32_0;
            elsif ((((ap_ST_st24_fsm_10 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_10_fu_617_p2))) or ((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_lv1_0 = ap_reg_ppstg_indvar1_reg_326_pp2_it5))))) then 
                temp_outStateAddr_1_reg_368 <= hb_cache_0_state_addr_reg_820;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st16_fsm_8 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_6_fu_593_p2))) then
                a_addr_1_reg_855(0) <= tmp_9_fu_607_p1(32 - 1 downto 0)(0);
    a_addr_1_reg_855(1) <= tmp_9_fu_607_p1(32 - 1 downto 0)(1);
    a_addr_1_reg_855(2) <= tmp_9_fu_607_p1(32 - 1 downto 0)(2);
    a_addr_1_reg_855(3) <= tmp_9_fu_607_p1(32 - 1 downto 0)(3);
    a_addr_1_reg_855(4) <= tmp_9_fu_607_p1(32 - 1 downto 0)(4);
    a_addr_1_reg_855(5) <= tmp_9_fu_607_p1(32 - 1 downto 0)(5);
    a_addr_1_reg_855(6) <= tmp_9_fu_607_p1(32 - 1 downto 0)(6);
    a_addr_1_reg_855(7) <= tmp_9_fu_607_p1(32 - 1 downto 0)(7);
    a_addr_1_reg_855(8) <= tmp_9_fu_607_p1(32 - 1 downto 0)(8);
    a_addr_1_reg_855(9) <= tmp_9_fu_607_p1(32 - 1 downto 0)(9);
    a_addr_1_reg_855(10) <= tmp_9_fu_607_p1(32 - 1 downto 0)(10);
    a_addr_1_reg_855(11) <= tmp_9_fu_607_p1(32 - 1 downto 0)(11);
    a_addr_1_reg_855(12) <= tmp_9_fu_607_p1(32 - 1 downto 0)(12);
    a_addr_1_reg_855(13) <= tmp_9_fu_607_p1(32 - 1 downto 0)(13);
    a_addr_1_reg_855(14) <= tmp_9_fu_607_p1(32 - 1 downto 0)(14);
    a_addr_1_reg_855(15) <= tmp_9_fu_607_p1(32 - 1 downto 0)(15);
    a_addr_1_reg_855(16) <= tmp_9_fu_607_p1(32 - 1 downto 0)(16);
    a_addr_1_reg_855(17) <= tmp_9_fu_607_p1(32 - 1 downto 0)(17);
    a_addr_1_reg_855(18) <= tmp_9_fu_607_p1(32 - 1 downto 0)(18);
    a_addr_1_reg_855(19) <= tmp_9_fu_607_p1(32 - 1 downto 0)(19);
    a_addr_1_reg_855(20) <= tmp_9_fu_607_p1(32 - 1 downto 0)(20);
    a_addr_1_reg_855(21) <= tmp_9_fu_607_p1(32 - 1 downto 0)(21);
    a_addr_1_reg_855(22) <= tmp_9_fu_607_p1(32 - 1 downto 0)(22);
    a_addr_1_reg_855(23) <= tmp_9_fu_607_p1(32 - 1 downto 0)(23);
    a_addr_1_reg_855(24) <= tmp_9_fu_607_p1(32 - 1 downto 0)(24);
    a_addr_1_reg_855(25) <= tmp_9_fu_607_p1(32 - 1 downto 0)(25);
    a_addr_1_reg_855(26) <= tmp_9_fu_607_p1(32 - 1 downto 0)(26);
    a_addr_1_reg_855(27) <= tmp_9_fu_607_p1(32 - 1 downto 0)(27);
    a_addr_1_reg_855(28) <= tmp_9_fu_607_p1(32 - 1 downto 0)(28);
    a_addr_1_reg_855(29) <= tmp_9_fu_607_p1(32 - 1 downto 0)(29);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st24_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_10_fu_617_p2))) then
                a_addr_2_reg_864(0) <= tmp_14_fu_649_p1(32 - 1 downto 0)(0);
    a_addr_2_reg_864(1) <= tmp_14_fu_649_p1(32 - 1 downto 0)(1);
    a_addr_2_reg_864(2) <= tmp_14_fu_649_p1(32 - 1 downto 0)(2);
    a_addr_2_reg_864(3) <= tmp_14_fu_649_p1(32 - 1 downto 0)(3);
    a_addr_2_reg_864(4) <= tmp_14_fu_649_p1(32 - 1 downto 0)(4);
    a_addr_2_reg_864(5) <= tmp_14_fu_649_p1(32 - 1 downto 0)(5);
    a_addr_2_reg_864(6) <= tmp_14_fu_649_p1(32 - 1 downto 0)(6);
    a_addr_2_reg_864(7) <= tmp_14_fu_649_p1(32 - 1 downto 0)(7);
    a_addr_2_reg_864(8) <= tmp_14_fu_649_p1(32 - 1 downto 0)(8);
    a_addr_2_reg_864(9) <= tmp_14_fu_649_p1(32 - 1 downto 0)(9);
    a_addr_2_reg_864(10) <= tmp_14_fu_649_p1(32 - 1 downto 0)(10);
    a_addr_2_reg_864(11) <= tmp_14_fu_649_p1(32 - 1 downto 0)(11);
    a_addr_2_reg_864(12) <= tmp_14_fu_649_p1(32 - 1 downto 0)(12);
    a_addr_2_reg_864(13) <= tmp_14_fu_649_p1(32 - 1 downto 0)(13);
    a_addr_2_reg_864(14) <= tmp_14_fu_649_p1(32 - 1 downto 0)(14);
    a_addr_2_reg_864(15) <= tmp_14_fu_649_p1(32 - 1 downto 0)(15);
    a_addr_2_reg_864(16) <= tmp_14_fu_649_p1(32 - 1 downto 0)(16);
    a_addr_2_reg_864(17) <= tmp_14_fu_649_p1(32 - 1 downto 0)(17);
    a_addr_2_reg_864(18) <= tmp_14_fu_649_p1(32 - 1 downto 0)(18);
    a_addr_2_reg_864(19) <= tmp_14_fu_649_p1(32 - 1 downto 0)(19);
    a_addr_2_reg_864(20) <= tmp_14_fu_649_p1(32 - 1 downto 0)(20);
    a_addr_2_reg_864(21) <= tmp_14_fu_649_p1(32 - 1 downto 0)(21);
    a_addr_2_reg_864(22) <= tmp_14_fu_649_p1(32 - 1 downto 0)(22);
    a_addr_2_reg_864(23) <= tmp_14_fu_649_p1(32 - 1 downto 0)(23);
    a_addr_2_reg_864(24) <= tmp_14_fu_649_p1(32 - 1 downto 0)(24);
    a_addr_2_reg_864(25) <= tmp_14_fu_649_p1(32 - 1 downto 0)(25);
    a_addr_2_reg_864(26) <= tmp_14_fu_649_p1(32 - 1 downto 0)(26);
    a_addr_2_reg_864(27) <= tmp_14_fu_649_p1(32 - 1 downto 0)(27);
    a_addr_2_reg_864(28) <= tmp_14_fu_649_p1(32 - 1 downto 0)(28);
    a_addr_2_reg_864(29) <= tmp_14_fu_649_p1(32 - 1 downto 0)(29);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st32_fsm_12 = ap_CS_fsm)) then
                a_addr_3_reg_884(0) <= tmp_18_fu_681_p1(32 - 1 downto 0)(0);
    a_addr_3_reg_884(1) <= tmp_18_fu_681_p1(32 - 1 downto 0)(1);
    a_addr_3_reg_884(2) <= tmp_18_fu_681_p1(32 - 1 downto 0)(2);
    a_addr_3_reg_884(3) <= tmp_18_fu_681_p1(32 - 1 downto 0)(3);
    a_addr_3_reg_884(4) <= tmp_18_fu_681_p1(32 - 1 downto 0)(4);
    a_addr_3_reg_884(5) <= tmp_18_fu_681_p1(32 - 1 downto 0)(5);
    a_addr_3_reg_884(6) <= tmp_18_fu_681_p1(32 - 1 downto 0)(6);
    a_addr_3_reg_884(7) <= tmp_18_fu_681_p1(32 - 1 downto 0)(7);
    a_addr_3_reg_884(8) <= tmp_18_fu_681_p1(32 - 1 downto 0)(8);
    a_addr_3_reg_884(9) <= tmp_18_fu_681_p1(32 - 1 downto 0)(9);
    a_addr_3_reg_884(10) <= tmp_18_fu_681_p1(32 - 1 downto 0)(10);
    a_addr_3_reg_884(11) <= tmp_18_fu_681_p1(32 - 1 downto 0)(11);
    a_addr_3_reg_884(12) <= tmp_18_fu_681_p1(32 - 1 downto 0)(12);
    a_addr_3_reg_884(13) <= tmp_18_fu_681_p1(32 - 1 downto 0)(13);
    a_addr_3_reg_884(14) <= tmp_18_fu_681_p1(32 - 1 downto 0)(14);
    a_addr_3_reg_884(15) <= tmp_18_fu_681_p1(32 - 1 downto 0)(15);
    a_addr_3_reg_884(16) <= tmp_18_fu_681_p1(32 - 1 downto 0)(16);
    a_addr_3_reg_884(17) <= tmp_18_fu_681_p1(32 - 1 downto 0)(17);
    a_addr_3_reg_884(18) <= tmp_18_fu_681_p1(32 - 1 downto 0)(18);
    a_addr_3_reg_884(19) <= tmp_18_fu_681_p1(32 - 1 downto 0)(19);
    a_addr_3_reg_884(20) <= tmp_18_fu_681_p1(32 - 1 downto 0)(20);
    a_addr_3_reg_884(21) <= tmp_18_fu_681_p1(32 - 1 downto 0)(21);
    a_addr_3_reg_884(22) <= tmp_18_fu_681_p1(32 - 1 downto 0)(22);
    a_addr_3_reg_884(23) <= tmp_18_fu_681_p1(32 - 1 downto 0)(23);
    a_addr_3_reg_884(24) <= tmp_18_fu_681_p1(32 - 1 downto 0)(24);
    a_addr_3_reg_884(25) <= tmp_18_fu_681_p1(32 - 1 downto 0)(25);
    a_addr_3_reg_884(26) <= tmp_18_fu_681_p1(32 - 1 downto 0)(26);
    a_addr_3_reg_884(27) <= tmp_18_fu_681_p1(32 - 1 downto 0)(27);
    a_addr_3_reg_884(28) <= tmp_18_fu_681_p1(32 - 1 downto 0)(28);
    a_addr_3_reg_884(29) <= tmp_18_fu_681_p1(32 - 1 downto 0)(29);
                tmp_15_reg_876 <= tmp_15_fu_659_p2;
                tmp_16_reg_880 <= tmp_16_fu_665_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_7_fu_498_p2)))) then
                a_addr_reg_793(0) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(0);
    a_addr_reg_793(1) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(1);
    a_addr_reg_793(2) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(2);
    a_addr_reg_793(3) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(3);
    a_addr_reg_793(4) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(4);
    a_addr_reg_793(5) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(5);
    a_addr_reg_793(6) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(6);
    a_addr_reg_793(7) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(7);
    a_addr_reg_793(8) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(8);
    a_addr_reg_793(9) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(9);
    a_addr_reg_793(10) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(10);
    a_addr_reg_793(11) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(11);
    a_addr_reg_793(12) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(12);
    a_addr_reg_793(13) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(13);
    a_addr_reg_793(14) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(14);
    a_addr_reg_793(15) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(15);
    a_addr_reg_793(16) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(16);
    a_addr_reg_793(17) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(17);
    a_addr_reg_793(18) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(18);
    a_addr_reg_793(19) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(19);
    a_addr_reg_793(20) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(20);
    a_addr_reg_793(21) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(21);
    a_addr_reg_793(22) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(22);
    a_addr_reg_793(23) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(23);
    a_addr_reg_793(24) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(24);
    a_addr_reg_793(25) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(25);
    a_addr_reg_793(26) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(26);
    a_addr_reg_793(27) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(27);
    a_addr_reg_793(28) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(28);
    a_addr_reg_793(29) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(29);
    a_addr_reg_793(30) <= tmp_2_cast_fu_555_p1(32 - 1 downto 0)(30);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then
                ap_reg_ppstg_exitcond2_reg_799_pp0_it1 <= exitcond2_reg_799;
                ap_reg_ppstg_exitcond2_reg_799_pp0_it2 <= ap_reg_ppstg_exitcond2_reg_799_pp0_it1;
                ap_reg_ppstg_exitcond2_reg_799_pp0_it3 <= ap_reg_ppstg_exitcond2_reg_799_pp0_it2;
                ap_reg_ppstg_exitcond2_reg_799_pp0_it4 <= ap_reg_ppstg_exitcond2_reg_799_pp0_it3;
                ap_reg_ppstg_exitcond2_reg_799_pp0_it5 <= ap_reg_ppstg_exitcond2_reg_799_pp0_it4;
                ap_reg_ppstg_exitcond2_reg_799_pp0_it6 <= ap_reg_ppstg_exitcond2_reg_799_pp0_it5;
                ap_reg_ppstg_indvar_reg_277_pp0_it1 <= indvar_reg_277;
                ap_reg_ppstg_indvar_reg_277_pp0_it2 <= ap_reg_ppstg_indvar_reg_277_pp0_it1;
                ap_reg_ppstg_indvar_reg_277_pp0_it3 <= ap_reg_ppstg_indvar_reg_277_pp0_it2;
                ap_reg_ppstg_indvar_reg_277_pp0_it4 <= ap_reg_ppstg_indvar_reg_277_pp0_it3;
                ap_reg_ppstg_indvar_reg_277_pp0_it5 <= ap_reg_ppstg_indvar_reg_277_pp0_it4;
                ap_reg_ppstg_indvar_reg_277_pp0_it6 <= ap_reg_ppstg_indvar_reg_277_pp0_it5;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_pp3_stg0_fsm_13 = ap_CS_fsm)) then
                ap_reg_ppstg_exitcond_reg_890_pp3_it1 <= exitcond_reg_890;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then
                ap_reg_ppstg_indvar1_reg_326_pp2_it1 <= indvar1_reg_326;
                ap_reg_ppstg_indvar1_reg_326_pp2_it2 <= ap_reg_ppstg_indvar1_reg_326_pp2_it1;
                ap_reg_ppstg_indvar1_reg_326_pp2_it3 <= ap_reg_ppstg_indvar1_reg_326_pp2_it2;
                ap_reg_ppstg_indvar1_reg_326_pp2_it4 <= ap_reg_ppstg_indvar1_reg_326_pp2_it3;
                ap_reg_ppstg_indvar1_reg_326_pp2_it5 <= ap_reg_ppstg_indvar1_reg_326_pp2_it4;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_9 = ap_CS_fsm) and not((ap_sig_bdd_285 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then
                ap_reg_ppstg_indvar9_reg_289_pp1_it1 <= indvar9_reg_289;
                ap_reg_ppstg_indvar9_reg_289_pp1_it2 <= ap_reg_ppstg_indvar9_reg_289_pp1_it1;
                ap_reg_ppstg_indvar9_reg_289_pp1_it3 <= ap_reg_ppstg_indvar9_reg_289_pp1_it2;
                ap_reg_ppstg_indvar9_reg_289_pp1_it4 <= ap_reg_ppstg_indvar9_reg_289_pp1_it3;
                ap_reg_ppstg_indvar9_reg_289_pp1_it5 <= ap_reg_ppstg_indvar9_reg_289_pp1_it4;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then
                exitcond2_reg_799 <= exitcond2_fu_565_p2;
                indvar_next_reg_803 <= indvar_next_fu_571_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp3_stg0_fsm_13 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0))) then
                exitcond_reg_890 <= exitcond_fu_691_p2;
                i_4_reg_894 <= i_4_fu_697_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st16_fsm_8 = ap_CS_fsm)) then
                hb_cache_0_log_addr_reg_838 <= buff_q0;
                temp_outReadIndex_reg_846 <= buff_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_indvar1_reg_326_pp2_it5) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))))) then
                hb_cache_0_prev_sensor_value2_reg_339 <= a_datain;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st15_fsm_7 = ap_CS_fsm)) then
                hb_cache_0_state_addr_reg_820 <= buff_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then
                i_2_reg_788 <= i_2_fu_504_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and (ap_const_lv1_0 = exitcond2_fu_565_p2))) then
                isIter0_reg_808 <= isIter0_fu_577_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_9 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_indvar9_reg_289_pp1_it5) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6) and not((ap_sig_bdd_285 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))))) then
                read_index_load4_reg_302 <= a_datain;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_9 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6) and not((ap_sig_bdd_285 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and not((ap_const_lv1_0 = ap_reg_ppstg_indvar9_reg_289_pp1_it5)))) then
                read_index_load_reg_314 <= read_index_load4_reg_302;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_lv1_0 = tmp_3_reg_763) and (ap_const_lv1_0 = exitcond_reg_890) and (ap_ST_pp3_stg6_fsm_19 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_15_reg_876) and not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and ap_sig_bdd_464)))) then
                refresher_read_index_1_fu_146 <= a_datain;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and (ap_reg_ppstg_exitcond2_reg_799_pp0_it5 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) or ((ap_ST_pp1_stg0_fsm_9 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_indvar9_reg_289_pp1_it5) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6) and not((ap_sig_bdd_285 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6)))) or ((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_indvar1_reg_326_pp2_it5) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6)))))) then
                reg_462 <= a_datain;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                tmp_3_reg_763 <= tmp_3_fu_469_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_fu_475_p3)))) then
                tmp_9_cast_reg_780(0) <= tmp_9_cast_fu_494_p1(0);
    tmp_9_cast_reg_780(1) <= tmp_9_cast_fu_494_p1(1);
    tmp_9_cast_reg_780(2) <= tmp_9_cast_fu_494_p1(2);
    tmp_9_cast_reg_780(3) <= tmp_9_cast_fu_494_p1(3);
    tmp_9_cast_reg_780(4) <= tmp_9_cast_fu_494_p1(4);
    tmp_9_cast_reg_780(5) <= tmp_9_cast_fu_494_p1(5);
    tmp_9_cast_reg_780(6) <= tmp_9_cast_fu_494_p1(6);
    tmp_9_cast_reg_780(7) <= tmp_9_cast_fu_494_p1(7);
    tmp_9_cast_reg_780(8) <= tmp_9_cast_fu_494_p1(8);
    tmp_9_cast_reg_780(9) <= tmp_9_cast_fu_494_p1(9);
    tmp_9_cast_reg_780(10) <= tmp_9_cast_fu_494_p1(10);
    tmp_9_cast_reg_780(11) <= tmp_9_cast_fu_494_p1(11);
    tmp_9_cast_reg_780(12) <= tmp_9_cast_fu_494_p1(12);
    tmp_9_cast_reg_780(13) <= tmp_9_cast_fu_494_p1(13);
    tmp_9_cast_reg_780(14) <= tmp_9_cast_fu_494_p1(14);
    tmp_9_cast_reg_780(15) <= tmp_9_cast_fu_494_p1(15);
    tmp_9_cast_reg_780(16) <= tmp_9_cast_fu_494_p1(16);
    tmp_9_cast_reg_780(17) <= tmp_9_cast_fu_494_p1(17);
    tmp_9_cast_reg_780(18) <= tmp_9_cast_fu_494_p1(18);
    tmp_9_cast_reg_780(19) <= tmp_9_cast_fu_494_p1(19);
    tmp_9_cast_reg_780(20) <= tmp_9_cast_fu_494_p1(20);
    tmp_9_cast_reg_780(21) <= tmp_9_cast_fu_494_p1(21);
    tmp_9_cast_reg_780(22) <= tmp_9_cast_fu_494_p1(22);
    tmp_9_cast_reg_780(23) <= tmp_9_cast_fu_494_p1(23);
    tmp_9_cast_reg_780(24) <= tmp_9_cast_fu_494_p1(24);
    tmp_9_cast_reg_780(25) <= tmp_9_cast_fu_494_p1(25);
    tmp_9_cast_reg_780(26) <= tmp_9_cast_fu_494_p1(26);
    tmp_9_cast_reg_780(27) <= tmp_9_cast_fu_494_p1(27);
    tmp_9_cast_reg_780(28) <= tmp_9_cast_fu_494_p1(28);
    tmp_9_cast_reg_780(29) <= tmp_9_cast_fu_494_p1(29);
    tmp_9_cast_reg_780(30) <= tmp_9_cast_fu_494_p1(30);
    tmp_9_cast_reg_780(31) <= tmp_9_cast_fu_494_p1(31);
            end if;
        end if;
    end process;
    applist_base_addr0vld_reg <= '0';
    outAppID1vld_reg <= '0';
    outHWSW1vld_reg <= '0';
    outStateAddr1vld_reg <= '0';
    outLogAddr1vld_reg <= '0';
    outReadIndex1vld_reg <= '0';
    inAppID0vld_reg <= '0';
    buff_addr_reg_775(2 downto 0) <= "000";
    tmp_9_cast_reg_780(32) <= '0';
    a_addr_reg_793(31) <= '0';
    a_addr_1_reg_855(31 downto 30) <= "00";
    a_addr_2_reg_864(31 downto 30) <= "00";
    a_addr_3_reg_884(31 downto 30) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , ap_reg_ppiten_pp0_it0 , ap_reg_ppiten_pp0_it1 , ap_sig_bdd_253 , ap_reg_ppiten_pp0_it6 , ap_reg_ppiten_pp0_it7 , ap_reg_ppiten_pp1_it5 , ap_sig_bdd_285 , ap_reg_ppiten_pp1_it6 , ap_reg_ppiten_pp2_it5 , ap_sig_bdd_315 , ap_reg_ppiten_pp2_it6 , tmp_3_reg_763 , tmp_fu_475_p3 , tmp_7_fu_498_p2 , exitcond2_fu_565_p2 , tmp_5_fu_588_p2 , tmp_6_fu_593_p2 , tmp_10_fu_617_p2 , exitcond_fu_691_p2 , ap_reg_ppiten_pp3_it0 , ap_reg_ppiten_pp3_it1 , ap_sig_bdd_464 , ap_sig_bdd_584 , ap_sig_bdd_757)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = tmp_fu_475_p3))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                elsif (((ap_const_lv1_0 = tmp_fu_475_p3) and (ap_const_lv1_0 = tmp_3_reg_763))) then
                    ap_NS_fsm <= ap_ST_st32_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = tmp_7_fu_498_p2))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st32_fsm_12;
                end if;
            when ap_ST_pp0_stg0_fsm_4 => 
                if ((not(((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and not((ap_const_lv1_0 = exitcond2_fu_565_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_4;
                elsif ((((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and not((ap_const_lv1_0 = exitcond2_fu_565_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_4;
                end if;
            when ap_ST_st13_fsm_5 => 
                ap_NS_fsm <= ap_ST_st14_fsm_6;
            when ap_ST_st14_fsm_6 => 
                if (not((ap_const_lv1_0 = tmp_5_fu_588_p2))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st15_fsm_7 => 
                ap_NS_fsm <= ap_ST_st16_fsm_8;
            when ap_ST_st16_fsm_8 => 
                if ((ap_const_lv1_0 = tmp_6_fu_593_p2)) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st24_fsm_10;
                end if;
            when ap_ST_pp1_stg0_fsm_9 => 
                if (not(((ap_ST_pp1_stg0_fsm_9 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6) and not((ap_sig_bdd_285 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it5))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_9;
                elsif (((ap_ST_pp1_stg0_fsm_9 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6) and not((ap_sig_bdd_285 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it5)))) then
                    ap_NS_fsm <= ap_ST_st24_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_9;
                end if;
            when ap_ST_st24_fsm_10 => 
                if ((ap_const_lv1_0 = tmp_10_fu_617_p2)) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st32_fsm_12;
                end if;
            when ap_ST_pp2_stg0_fsm_11 => 
                if (not(((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it5))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_11;
                elsif (((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it5)))) then
                    ap_NS_fsm <= ap_ST_st32_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_11;
                end if;
            when ap_ST_st32_fsm_12 => 
                ap_NS_fsm <= ap_ST_pp3_stg0_fsm_13;
            when ap_ST_pp3_stg0_fsm_13 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not((ap_const_lv1_0 = exitcond_fu_691_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1))))) then
                    ap_NS_fsm <= ap_ST_pp3_stg1_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st46_fsm_20;
                end if;
            when ap_ST_pp3_stg1_fsm_14 => 
                ap_NS_fsm <= ap_ST_pp3_stg2_fsm_15;
            when ap_ST_pp3_stg2_fsm_15 => 
                ap_NS_fsm <= ap_ST_pp3_stg3_fsm_16;
            when ap_ST_pp3_stg3_fsm_16 => 
                ap_NS_fsm <= ap_ST_pp3_stg4_fsm_17;
            when ap_ST_pp3_stg4_fsm_17 => 
                ap_NS_fsm <= ap_ST_pp3_stg5_fsm_18;
            when ap_ST_pp3_stg5_fsm_18 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and ap_sig_bdd_584)) and not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_ST_pp3_stg5_fsm_18 = ap_CS_fsm) and not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and ap_sig_bdd_584)) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it0)))))) then
                    ap_NS_fsm <= ap_ST_pp3_stg6_fsm_19;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_ST_pp3_stg5_fsm_18 = ap_CS_fsm) and not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and ap_sig_bdd_584)) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it0)))) then
                    ap_NS_fsm <= ap_ST_st46_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_pp3_stg5_fsm_18;
                end if;
            when ap_ST_pp3_stg6_fsm_19 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and ap_sig_bdd_464))) then
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_pp3_stg6_fsm_19;
                end if;
            when ap_ST_st46_fsm_20 => 
                ap_NS_fsm <= ap_ST_st47_fsm_21;
            when ap_ST_st47_fsm_21 => 
                if (not(ap_sig_bdd_757)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st47_fsm_21;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- a_address assign process. --
    a_address_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it1, exitcond2_reg_799, ap_sig_bdd_253, ap_reg_ppiten_pp0_it6, indvar9_reg_289, ap_reg_ppiten_pp1_it1, ap_sig_bdd_285, ap_reg_ppiten_pp1_it6, indvar1_reg_326, ap_reg_ppiten_pp2_it1, ap_sig_bdd_315, ap_reg_ppiten_pp2_it6, tmp_3_reg_763, a_addr_reg_793, isIter0_reg_808, a_addr_1_reg_855, a_addr_2_reg_864, tmp_15_reg_876, tmp_16_reg_880, a_addr_3_reg_884, exitcond_reg_890, ap_reg_ppiten_pp3_it0, ap_reg_ppiten_pp3_it1, tmp_22_fu_739_p1)
    begin
        if (((ap_ST_pp3_stg0_fsm_13 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = tmp_3_reg_763) and (ap_const_lv1_0 = exitcond_reg_890) and (ap_const_lv1_0 = tmp_16_reg_880))) then 
            a_address <= tmp_22_fu_739_p1(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_lv1_0 = tmp_3_reg_763) and (ap_const_lv1_0 = exitcond_reg_890) and (ap_const_lv1_0 = tmp_15_reg_876) and (ap_ST_pp3_stg1_fsm_14 = ap_CS_fsm))) then 
            a_address <= a_addr_3_reg_884;
        elsif (((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and (ap_const_lv1_0 = indvar1_reg_326))) then 
            a_address <= a_addr_2_reg_864;
        elsif (((ap_ST_pp1_stg0_fsm_9 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_285 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and (ap_const_lv1_0 = indvar9_reg_289))) then 
            a_address <= a_addr_1_reg_855;
        elsif (((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and (exitcond2_reg_799 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_808)))) then 
            a_address <= a_addr_reg_793;
        else 
            a_address <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_dataout <= ap_const_lv32_0;
    a_req_din <= ap_const_logic_0;

    -- a_req_write assign process. --
    a_req_write_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it1, exitcond2_reg_799, ap_sig_bdd_253, ap_reg_ppiten_pp0_it6, indvar9_reg_289, ap_reg_ppiten_pp1_it1, ap_sig_bdd_285, ap_reg_ppiten_pp1_it6, indvar1_reg_326, ap_reg_ppiten_pp2_it1, ap_sig_bdd_315, ap_reg_ppiten_pp2_it6, tmp_3_reg_763, isIter0_reg_808, tmp_15_reg_876, tmp_16_reg_880, exitcond_reg_890, ap_reg_ppiten_pp3_it0, ap_reg_ppiten_pp3_it1)
    begin
        if ((((ap_ST_pp3_stg0_fsm_13 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = tmp_3_reg_763) and (ap_const_lv1_0 = exitcond_reg_890) and (ap_const_lv1_0 = tmp_16_reg_880)) or ((ap_ST_pp1_stg0_fsm_9 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_285 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and (ap_const_lv1_0 = indvar9_reg_289)) or ((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and (ap_const_lv1_0 = indvar1_reg_326)) or ((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and (exitcond2_reg_799 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_808))) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_lv1_0 = tmp_3_reg_763) and (ap_const_lv1_0 = exitcond_reg_890) and (ap_const_lv1_0 = tmp_15_reg_876) and (ap_ST_pp3_stg1_fsm_14 = ap_CS_fsm)))) then 
            a_req_write <= ap_const_logic_1;
        else 
            a_req_write <= ap_const_logic_0;
        end if; 
    end process;


    -- a_rsp_read assign process. --
    a_rsp_read_assign_proc : process(ap_CS_fsm, ap_reg_ppstg_exitcond2_reg_799_pp0_it5, ap_sig_bdd_253, ap_reg_ppiten_pp0_it6, ap_reg_ppstg_indvar9_reg_289_pp1_it5, ap_sig_bdd_285, ap_reg_ppiten_pp1_it6, ap_reg_ppstg_indvar1_reg_326_pp2_it5, ap_sig_bdd_315, ap_reg_ppiten_pp2_it6, tmp_3_reg_763, tmp_15_reg_876, tmp_16_reg_880, exitcond_reg_890, ap_reg_ppiten_pp3_it0, ap_reg_ppiten_pp3_it1, ap_reg_ppstg_exitcond_reg_890_pp3_it1, ap_sig_bdd_464, ap_sig_bdd_584)
    begin
        if ((((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and (ap_reg_ppstg_exitcond2_reg_799_pp0_it5 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) or ((ap_ST_pp1_stg0_fsm_9 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_indvar9_reg_289_pp1_it5) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6) and not((ap_sig_bdd_285 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6)))) or ((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_indvar1_reg_326_pp2_it5) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_lv1_0 = tmp_3_reg_763) and (ap_const_lv1_0 = exitcond_reg_890) and (ap_ST_pp3_stg6_fsm_19 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_15_reg_876) and not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and ap_sig_bdd_464))) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = tmp_3_reg_763) and (ap_const_lv1_0 = tmp_16_reg_880) and (ap_ST_pp3_stg5_fsm_18 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_890_pp3_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and ap_sig_bdd_584))))) then 
            a_rsp_read <= ap_const_logic_1;
        else 
            a_rsp_read <= ap_const_logic_0;
        end if; 
    end process;


    -- a_size assign process. --
    a_size_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it1, exitcond2_reg_799, ap_sig_bdd_253, ap_reg_ppiten_pp0_it6, indvar9_reg_289, ap_reg_ppiten_pp1_it1, ap_sig_bdd_285, ap_reg_ppiten_pp1_it6, indvar1_reg_326, ap_reg_ppiten_pp2_it1, ap_sig_bdd_315, ap_reg_ppiten_pp2_it6, tmp_3_reg_763, isIter0_reg_808, tmp_15_reg_876, tmp_16_reg_880, exitcond_reg_890, ap_reg_ppiten_pp3_it0, ap_reg_ppiten_pp3_it1)
    begin
        if ((((ap_ST_pp3_stg0_fsm_13 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = tmp_3_reg_763) and (ap_const_lv1_0 = exitcond_reg_890) and (ap_const_lv1_0 = tmp_16_reg_880)) or ((ap_ST_pp1_stg0_fsm_9 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_285 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) and (ap_const_lv1_0 = indvar9_reg_289)) or ((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_315 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it6))) and (ap_const_lv1_0 = indvar1_reg_326)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_lv1_0 = tmp_3_reg_763) and (ap_const_lv1_0 = exitcond_reg_890) and (ap_const_lv1_0 = tmp_15_reg_876) and (ap_ST_pp3_stg1_fsm_14 = ap_CS_fsm)))) then 
            a_size <= ap_const_lv32_1;
        elsif (((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and (exitcond2_reg_799 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_808)))) then 
            a_size <= ap_const_lv32_5;
        else 
            a_size <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, ap_sig_bdd_757)
    begin
        if (((ap_ST_st47_fsm_21 = ap_CS_fsm) and not(ap_sig_bdd_757))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, ap_sig_bdd_757)
    begin
        if (((ap_ST_st47_fsm_21 = ap_CS_fsm) and not(ap_sig_bdd_757))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_253 assign process. --
    ap_sig_bdd_253_assign_proc : process(a_rsp_empty_n, ap_reg_ppstg_exitcond2_reg_799_pp0_it5)
    begin
                ap_sig_bdd_253 <= ((a_rsp_empty_n = ap_const_logic_0) and (ap_reg_ppstg_exitcond2_reg_799_pp0_it5 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_285 assign process. --
    ap_sig_bdd_285_assign_proc : process(a_rsp_empty_n, ap_reg_ppstg_indvar9_reg_289_pp1_it5)
    begin
                ap_sig_bdd_285 <= ((a_rsp_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_indvar9_reg_289_pp1_it5));
    end process;


    -- ap_sig_bdd_315 assign process. --
    ap_sig_bdd_315_assign_proc : process(a_rsp_empty_n, ap_reg_ppstg_indvar1_reg_326_pp2_it5)
    begin
                ap_sig_bdd_315 <= ((a_rsp_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_indvar1_reg_326_pp2_it5));
    end process;


    -- ap_sig_bdd_464 assign process. --
    ap_sig_bdd_464_assign_proc : process(a_rsp_empty_n, tmp_3_reg_763, tmp_15_reg_876, exitcond_reg_890)
    begin
                ap_sig_bdd_464 <= ((a_rsp_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = tmp_3_reg_763) and (ap_const_lv1_0 = exitcond_reg_890) and (ap_const_lv1_0 = tmp_15_reg_876));
    end process;


    -- ap_sig_bdd_584 assign process. --
    ap_sig_bdd_584_assign_proc : process(a_rsp_empty_n, tmp_3_reg_763, tmp_16_reg_880, ap_reg_ppstg_exitcond_reg_890_pp3_it1)
    begin
                ap_sig_bdd_584 <= ((a_rsp_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = tmp_3_reg_763) and (ap_const_lv1_0 = tmp_16_reg_880) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_890_pp3_it1));
    end process;


    -- ap_sig_bdd_757 assign process. --
    ap_sig_bdd_757_assign_proc : process(outAppID1ack_in, outHWSW1ack_in, outStateAddr1ack_in, outLogAddr1ack_in, outReadIndex1ack_in)
    begin
                ap_sig_bdd_757 <= ((outAppID1ack_in = ap_const_logic_0) or (outHWSW1ack_in = ap_const_logic_0) or (outStateAddr1ack_in = ap_const_logic_0) or (outLogAddr1ack_in = ap_const_logic_0) or (outReadIndex1ack_in = ap_const_logic_0));
    end process;


    -- applist_base_addr0ack_out assign process. --
    applist_base_addr0ack_out_assign_proc : process(ap_CS_fsm, ap_sig_bdd_757)
    begin
        if (((ap_ST_st47_fsm_21 = ap_CS_fsm) and not(ap_sig_bdd_757))) then 
            applist_base_addr0ack_out <= ap_const_logic_1;
        else 
            applist_base_addr0ack_out <= ap_const_logic_0;
        end if; 
    end process;

    buff_addr_gep_fu_210_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- buff_address0 assign process. --
    buff_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it7, buff_addr_reg_775, tmp_s_fu_583_p1)
    begin
        if (((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7))) then 
            buff_address0 <= tmp_s_fu_583_p1(3 - 1 downto 0);
        elsif ((ap_ST_st15_fsm_7 = ap_CS_fsm)) then 
            buff_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_ST_st14_fsm_6 = ap_CS_fsm)) then 
            buff_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_ST_st13_fsm_5 = ap_CS_fsm)) then 
            buff_address0 <= buff_addr_reg_775;
        else 
            buff_address0 <= "XXX";
        end if; 
    end process;

    buff_address1 <= ap_const_lv64_4(3 - 1 downto 0);

    -- buff_ce0 assign process. --
    buff_ce0_assign_proc : process(ap_CS_fsm, ap_sig_bdd_253, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it7)
    begin
        if (((ap_ST_st14_fsm_6 = ap_CS_fsm) or (ap_ST_st15_fsm_7 = ap_CS_fsm) or ((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) or (ap_ST_st13_fsm_5 = ap_CS_fsm))) then 
            buff_ce0 <= ap_const_logic_1;
        else 
            buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buff_ce1 assign process. --
    buff_ce1_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st15_fsm_7 = ap_CS_fsm)) then 
            buff_ce1 <= ap_const_logic_1;
        else 
            buff_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_d0 <= reg_462;

    -- buff_we0 assign process. --
    buff_we0_assign_proc : process(ap_CS_fsm, ap_sig_bdd_253, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it7, ap_reg_ppstg_exitcond2_reg_799_pp0_it6)
    begin
        if ((((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and not((ap_sig_bdd_253 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_799_pp0_it6)))) then 
            buff_we0 <= ap_const_logic_1;
        else 
            buff_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_565_p2 <= "1" when (indvar_phi_fu_281_p4 = ap_const_lv3_5) else "0";
    exitcond_fu_691_p2 <= "1" when (i_3_phi_fu_450_p8 = ap_const_lv3_4) else "0";
    i_2_fu_504_p2 <= std_logic_vector(unsigned(i_1_reg_266) + unsigned(ap_const_lv5_1));

    -- i_3_phi_fu_450_p8 assign process. --
    i_3_phi_fu_450_p8_assign_proc : process(ap_CS_fsm, i_3_reg_446, tmp_3_reg_763, tmp_16_reg_880, exitcond_reg_890, ap_reg_ppiten_pp3_it1, i_4_reg_894)
    begin
        if ((((ap_ST_pp3_stg0_fsm_13 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = tmp_3_reg_763) and (ap_const_lv1_0 = exitcond_reg_890) and (ap_const_lv1_0 = tmp_16_reg_880)) or ((ap_ST_pp3_stg0_fsm_13 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = tmp_3_reg_763) and (ap_const_lv1_0 = exitcond_reg_890) and not((ap_const_lv1_0 = tmp_16_reg_880))) or ((ap_ST_pp3_stg0_fsm_13 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = exitcond_reg_890) and not((ap_const_lv1_0 = tmp_3_reg_763))))) then 
            i_3_phi_fu_450_p8 <= i_4_reg_894;
        else 
            i_3_phi_fu_450_p8 <= i_3_reg_446;
        end if; 
    end process;

    i_4_fu_697_p2 <= std_logic_vector(unsigned(i_3_phi_fu_450_p8) + unsigned(ap_const_lv3_1));
    i_fu_483_p2 <= std_logic_vector(unsigned(cacheHitLoc_reg_255) + unsigned(ap_const_lv3_1));

    -- inAppID0ack_out assign process. --
    inAppID0ack_out_assign_proc : process(ap_CS_fsm, ap_sig_bdd_757)
    begin
        if (((ap_ST_st47_fsm_21 = ap_CS_fsm) and not(ap_sig_bdd_757))) then 
            inAppID0ack_out <= ap_const_logic_1;
        else 
            inAppID0ack_out <= ap_const_logic_0;
        end if; 
    end process;


    -- indvar1_phi_fu_330_p4 assign process. --
    indvar1_phi_fu_330_p4_assign_proc : process(ap_CS_fsm, indvar1_reg_326, ap_reg_ppiten_pp2_it1)
    begin
        if (((ap_ST_pp2_stg0_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = indvar1_reg_326))) then 
            indvar1_phi_fu_330_p4 <= ap_const_lv1_1;
        else 
            indvar1_phi_fu_330_p4 <= indvar1_reg_326;
        end if; 
    end process;


    -- indvar9_phi_fu_293_p4 assign process. --
    indvar9_phi_fu_293_p4_assign_proc : process(ap_CS_fsm, indvar9_reg_289, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_ST_pp1_stg0_fsm_9 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = indvar9_reg_289))) then 
            indvar9_phi_fu_293_p4 <= ap_const_lv1_1;
        else 
            indvar9_phi_fu_293_p4 <= indvar9_reg_289;
        end if; 
    end process;

    indvar_next_fu_571_p2 <= std_logic_vector(unsigned(indvar_phi_fu_281_p4) + unsigned(ap_const_lv3_1));

    -- indvar_phi_fu_281_p4 assign process. --
    indvar_phi_fu_281_p4_assign_proc : process(ap_CS_fsm, indvar_reg_277, ap_reg_ppiten_pp0_it1, exitcond2_reg_799, indvar_next_reg_803)
    begin
        if (((ap_ST_pp0_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond2_reg_799 = ap_const_lv1_0))) then 
            indvar_phi_fu_281_p4 <= indvar_next_reg_803;
        else 
            indvar_phi_fu_281_p4 <= indvar_reg_277;
        end if; 
    end process;

    isIter0_fu_577_p2 <= "1" when (indvar_phi_fu_281_p4 = ap_const_lv3_0) else "0";
    outAppID <= outAppID1data_reg;

    -- outAppID1ack_in assign process. --
    outAppID1ack_in_assign_proc : process(outAppID1vld_reg)
    begin
        if (((ap_const_logic_0 = outAppID1vld_reg) or ((ap_const_logic_1 = outAppID1vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            outAppID1ack_in <= ap_const_logic_1;
        else 
            outAppID1ack_in <= ap_const_logic_0;
        end if; 
    end process;


    -- outAppID1vld_in assign process. --
    outAppID1vld_in_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st46_fsm_20 = ap_CS_fsm)) then 
            outAppID1vld_in <= ap_const_logic_1;
        else 
            outAppID1vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outHWSW <= outHWSW1data_reg;

    -- outHWSW1ack_in assign process. --
    outHWSW1ack_in_assign_proc : process(outHWSW1vld_reg)
    begin
        if (((ap_const_logic_0 = outHWSW1vld_reg) or ((ap_const_logic_1 = outHWSW1vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            outHWSW1ack_in <= ap_const_logic_1;
        else 
            outHWSW1ack_in <= ap_const_logic_0;
        end if; 
    end process;


    -- outHWSW1vld_in assign process. --
    outHWSW1vld_in_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st46_fsm_20 = ap_CS_fsm)) then 
            outHWSW1vld_in <= ap_const_logic_1;
        else 
            outHWSW1vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outLogAddr <= outLogAddr1data_reg;

    -- outLogAddr1ack_in assign process. --
    outLogAddr1ack_in_assign_proc : process(outLogAddr1vld_reg)
    begin
        if (((ap_const_logic_0 = outLogAddr1vld_reg) or ((ap_const_logic_1 = outLogAddr1vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            outLogAddr1ack_in <= ap_const_logic_1;
        else 
            outLogAddr1ack_in <= ap_const_logic_0;
        end if; 
    end process;


    -- outLogAddr1vld_in assign process. --
    outLogAddr1vld_in_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st46_fsm_20 = ap_CS_fsm)) then 
            outLogAddr1vld_in <= ap_const_logic_1;
        else 
            outLogAddr1vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outReadIndex <= outReadIndex1data_reg;

    -- outReadIndex1ack_in assign process. --
    outReadIndex1ack_in_assign_proc : process(outReadIndex1vld_reg)
    begin
        if (((ap_const_logic_0 = outReadIndex1vld_reg) or ((ap_const_logic_1 = outReadIndex1vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            outReadIndex1ack_in <= ap_const_logic_1;
        else 
            outReadIndex1ack_in <= ap_const_logic_0;
        end if; 
    end process;


    -- outReadIndex1vld_in assign process. --
    outReadIndex1vld_in_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st46_fsm_20 = ap_CS_fsm)) then 
            outReadIndex1vld_in <= ap_const_logic_1;
        else 
            outReadIndex1vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStateAddr <= outStateAddr1data_reg;

    -- outStateAddr1ack_in assign process. --
    outStateAddr1ack_in_assign_proc : process(outStateAddr1vld_reg)
    begin
        if (((ap_const_logic_0 = outStateAddr1vld_reg) or ((ap_const_logic_1 = outStateAddr1vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            outStateAddr1ack_in <= ap_const_logic_1;
        else 
            outStateAddr1ack_in <= ap_const_logic_0;
        end if; 
    end process;


    -- outStateAddr1vld_in assign process. --
    outStateAddr1vld_in_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st46_fsm_20 = ap_CS_fsm)) then 
            outStateAddr1vld_in <= ap_const_logic_1;
        else 
            outStateAddr1vld_in <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_530_p1 <= std_logic_vector(resize(unsigned(p_shl1_fu_522_p3),33));
    p_shl1_fu_522_p3 <= (i_1_reg_266 & ap_const_lv2_0);
    p_shl_cast_fu_518_p1 <= std_logic_vector(resize(unsigned(p_shl_fu_510_p3),33));
    p_shl_fu_510_p3 <= (i_1_reg_266 & ap_const_lv4_0);
    tmp1_fu_534_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_530_p1) + unsigned(tmp_9_cast_reg_780));
    tmp2_fu_626_p3 <= (tmp_11_fu_622_p1 & ap_const_lv6_34);
    tmp3_fu_715_p3 <= (tmp_19_fu_711_p1 & ap_const_lv6_34);
    tmp_10_fu_617_p2 <= "1" when (hb_cache_0_log_addr_reg_838 = ap_const_lv32_0) else "0";
    tmp_11_fu_622_p1 <= read_index_load_reg_314(26 - 1 downto 0);
    tmp_12_fu_634_p2 <= std_logic_vector(unsigned(tmp2_fu_626_p3) + unsigned(hb_cache_0_log_addr_reg_838));
    tmp_13_fu_639_p4 <= tmp_12_fu_634_p2(31 downto 2);
    tmp_14_fu_649_p1 <= std_logic_vector(resize(unsigned(tmp_13_fu_639_p4),64));
    tmp_15_fu_659_p2 <= "1" when (temp_outStateAddr_1_reg_368 = ap_const_lv32_0) else "0";
    tmp_16_fu_665_p2 <= "1" when (temp_outLogAddr_1_reg_387 = ap_const_lv32_0) else "0";
    tmp_17_fu_671_p4 <= temp_outStateAddr_1_reg_368(31 downto 2);
    tmp_18_fu_681_p1 <= std_logic_vector(resize(unsigned(tmp_17_fu_671_p4),64));
    tmp_19_fu_711_p1 <= refresher_read_index_1_fu_146(26 - 1 downto 0);
    tmp_1_fu_539_p2 <= std_logic_vector(unsigned(tmp1_fu_534_p2) + unsigned(p_shl_cast_fu_518_p1));
    tmp_20_fu_723_p2 <= std_logic_vector(unsigned(tmp3_fu_715_p3) + unsigned(temp_outLogAddr_1_reg_387));
    tmp_21_fu_729_p4 <= tmp_20_fu_723_p2(31 downto 2);
    tmp_22_fu_739_p1 <= std_logic_vector(resize(unsigned(tmp_21_fu_729_p4),64));
    tmp_2_cast_fu_555_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_545_p4),64));
    tmp_2_fu_545_p4 <= tmp_1_fu_539_p2(32 downto 2);
    tmp_3_fu_469_p2 <= "1" when (inAppID0data_reg = ap_const_lv32_0) else "0";
    tmp_4_fu_598_p4 <= hb_cache_0_state_addr_reg_820(31 downto 2);
    tmp_5_fu_588_p2 <= "1" when (buff_q0 = inAppID0data_reg) else "0";
    tmp_6_fu_593_p2 <= "1" when (hb_cache_0_state_addr_reg_820 = ap_const_lv32_0) else "0";
    tmp_7_fu_498_p2 <= "1" when (unsigned(i_1_reg_266) < unsigned(ap_const_lv5_14)) else "0";
    tmp_8_fu_489_p2 <= std_logic_vector(unsigned(applist_base_addr0data_reg) + unsigned(ap_const_lv32_8));
    tmp_9_cast_fu_494_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_489_p2),33));
    tmp_9_fu_607_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_598_p4),64));
    tmp_fu_475_p3 <= cacheHitLoc_reg_255(2 downto 2);
    tmp_s_fu_583_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar_reg_277_pp0_it6),64));
end behav;
