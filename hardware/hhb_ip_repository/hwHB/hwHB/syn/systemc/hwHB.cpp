// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "hwHB.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic hwHB::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic hwHB::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> hwHB::ap_ST_st1_fsm_0 = "00000";
const sc_lv<5> hwHB::ap_ST_st2_fsm_1 = "1";
const sc_lv<5> hwHB::ap_ST_st3_fsm_2 = "10";
const sc_lv<5> hwHB::ap_ST_st4_fsm_3 = "11";
const sc_lv<5> hwHB::ap_ST_st5_fsm_4 = "100";
const sc_lv<5> hwHB::ap_ST_st6_fsm_5 = "101";
const sc_lv<5> hwHB::ap_ST_st7_fsm_6 = "110";
const sc_lv<5> hwHB::ap_ST_st8_fsm_7 = "111";
const sc_lv<5> hwHB::ap_ST_st9_fsm_8 = "1000";
const sc_lv<5> hwHB::ap_ST_st10_fsm_9 = "1001";
const sc_lv<5> hwHB::ap_ST_st11_fsm_10 = "1010";
const sc_lv<5> hwHB::ap_ST_st12_fsm_11 = "1011";
const sc_lv<5> hwHB::ap_ST_st13_fsm_12 = "1100";
const sc_lv<5> hwHB::ap_ST_st14_fsm_13 = "1101";
const sc_lv<5> hwHB::ap_ST_st15_fsm_14 = "1110";
const sc_lv<5> hwHB::ap_ST_st16_fsm_15 = "1111";
const sc_lv<5> hwHB::ap_ST_st17_fsm_16 = "10000";
const sc_lv<5> hwHB::ap_ST_st18_fsm_17 = "10001";
const sc_lv<5> hwHB::ap_ST_st19_fsm_18 = "10010";
const sc_lv<5> hwHB::ap_ST_st20_fsm_19 = "10011";
const sc_lv<5> hwHB::ap_ST_st21_fsm_20 = "10100";
const sc_lv<5> hwHB::ap_ST_st22_fsm_21 = "10101";
const sc_lv<5> hwHB::ap_ST_st23_fsm_22 = "10110";
const sc_lv<32> hwHB::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> hwHB::ap_const_lv1_0 = "0";
const sc_lv<5> hwHB::ap_const_lv5_0 = "00000";
const sc_lv<3> hwHB::ap_const_lv3_0 = "000";
const sc_lv<1> hwHB::ap_const_lv1_1 = "1";
const sc_lv<32> hwHB::ap_const_lv32_4D2 = "10011010010";
const sc_lv<32> hwHB::ap_const_lv32_3E7 = "1111100111";
const sc_lv<64> hwHB::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> hwHB::ap_const_lv64_2 = "10";
const sc_lv<64> hwHB::ap_const_lv64_3 = "11";
const sc_lv<32> hwHB::ap_const_lv32_5 = "101";
const sc_lv<32> hwHB::ap_const_lv32_1 = "1";
const sc_lv<32> hwHB::ap_const_lv32_2 = "10";
const sc_lv<32> hwHB::ap_const_lv32_1F = "11111";
const sc_lv<32> hwHB::ap_const_lv32_8 = "1000";
const sc_lv<5> hwHB::ap_const_lv5_14 = "10100";
const sc_lv<5> hwHB::ap_const_lv5_1 = "1";
const sc_lv<4> hwHB::ap_const_lv4_0 = "0000";
const sc_lv<2> hwHB::ap_const_lv2_0 = "00";
const sc_lv<32> hwHB::ap_const_lv32_20 = "100000";
const sc_lv<3> hwHB::ap_const_lv3_5 = "101";
const sc_lv<3> hwHB::ap_const_lv3_1 = "1";
const sc_lv<32> hwHB::ap_const_lv32_A = "1010";
const sc_lv<6> hwHB::ap_const_lv6_10 = "10000";

hwHB::hwHB(sc_module_name name) : sc_module(name), mVcdFile(0) {
    buff_U = new hwHB_buff("buff_U");
    buff_U->clk(ap_clk);
    buff_U->reset(ap_rst);
    buff_U->address0(buff_address0);
    buff_U->ce0(buff_ce0);
    buff_U->we0(buff_we0);
    buff_U->d0(buff_d0);
    buff_U->q0(buff_q0);
    buff_U->address1(buff_address1);
    buff_U->ce1(buff_ce1);
    buff_U->q1(buff_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address);
    sensitive << ( ap_CS_fsm );
    sensitive << ( a_req_full_n );
    sensitive << ( a_addr_reg_546 );
    sensitive << ( tmp_1_reg_587 );
    sensitive << ( a_addr_1_reg_591 );
    sensitive << ( indvar8_phi_fu_259_p4 );
    sensitive << ( tmp_11_fu_464_p1 );
    sensitive << ( tmp_16_fu_505_p1 );
    sensitive << ( exitcond_fu_400_p2 );
    sensitive << ( isIter0_fu_412_p2 );

    SC_METHOD(thread_a_dataout);
    sensitive << ( ap_CS_fsm );
    sensitive << ( a_req_full_n );
    sensitive << ( time_r );
    sensitive << ( read_index_3_reg_602 );

    SC_METHOD(thread_a_req_din);
    sensitive << ( ap_CS_fsm );
    sensitive << ( a_req_full_n );
    sensitive << ( tmp_1_reg_587 );
    sensitive << ( indvar8_phi_fu_259_p4 );
    sensitive << ( exitcond_fu_400_p2 );
    sensitive << ( isIter0_fu_412_p2 );

    SC_METHOD(thread_a_req_write);
    sensitive << ( ap_CS_fsm );
    sensitive << ( a_req_full_n );
    sensitive << ( tmp_1_reg_587 );
    sensitive << ( indvar8_phi_fu_259_p4 );
    sensitive << ( exitcond_fu_400_p2 );
    sensitive << ( isIter0_fu_412_p2 );

    SC_METHOD(thread_a_rsp_read);
    sensitive << ( ap_CS_fsm );
    sensitive << ( a_rsp_empty_n );

    SC_METHOD(thread_a_size);
    sensitive << ( ap_CS_fsm );
    sensitive << ( a_req_full_n );
    sensitive << ( tmp_1_reg_587 );
    sensitive << ( indvar8_phi_fu_259_p4 );
    sensitive << ( exitcond_fu_400_p2 );
    sensitive << ( isIter0_fu_412_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm );
    sensitive << ( debug11ack_in );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );
    sensitive << ( debug11ack_in );

    SC_METHOD(thread_app_list_addr0ack_out);
    sensitive << ( ap_CS_fsm );
    sensitive << ( debug11ack_in );

    SC_METHOD(thread_buff_addr_gep_fu_182_p3);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_fu_317_p2 );

    SC_METHOD(thread_buff_address0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( buff_addr_reg_528 );
    sensitive << ( tmp_9_fu_418_p1 );

    SC_METHOD(thread_buff_address1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_buff_ce0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_buff_ce1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_buff_d0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( reg_311 );

    SC_METHOD(thread_buff_we0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_debug1);
    sensitive << ( debug11data_reg );

    SC_METHOD(thread_debug11ack_in);
    sensitive << ( debug11vld_reg );

    SC_METHOD(thread_debug11vld_in);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_exitcond_fu_400_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( indvar_reg_230 );

    SC_METHOD(thread_grp_fu_301_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( buff_q0 );
    sensitive << ( appStateAddr_reg_576 );

    SC_METHOD(thread_grp_fu_301_p4);
    sensitive << ( grp_fu_301_p1 );

    SC_METHOD(thread_i_1_fu_339_p2);
    sensitive << ( i_reg_219 );

    SC_METHOD(thread_inAppID0ack_out);
    sensitive << ( ap_CS_fsm );
    sensitive << ( debug11ack_in );

    SC_METHOD(thread_indvar8_phi_fu_259_p4);
    sensitive << ( indvar8_reg_254 );

    SC_METHOD(thread_indvar_next_fu_406_p2);
    sensitive << ( indvar_reg_230 );

    SC_METHOD(thread_isIter0_fu_412_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( indvar_reg_230 );
    sensitive << ( exitcond_fu_400_p2 );

    SC_METHOD(thread_p_shl1_cast_fu_365_p1);
    sensitive << ( p_shl1_fu_357_p3 );

    SC_METHOD(thread_p_shl1_fu_357_p3);
    sensitive << ( i_reg_219 );

    SC_METHOD(thread_p_shl_cast_fu_353_p1);
    sensitive << ( p_shl_fu_345_p3 );

    SC_METHOD(thread_p_shl_fu_345_p3);
    sensitive << ( i_reg_219 );

    SC_METHOD(thread_read_index_1_fu_450_p2);
    sensitive << ( read_index_load_reg_267 );

    SC_METHOD(thread_read_index_3_fu_456_p3);
    sensitive << ( tmp_6_fu_444_p2 );
    sensitive << ( read_index_1_fu_450_p2 );

    SC_METHOD(thread_tmp1_fu_369_p2);
    sensitive << ( tmp_4_cast_reg_533 );
    sensitive << ( p_shl1_cast_fu_365_p1 );

    SC_METHOD(thread_tmp2_fu_482_p3);
    sensitive << ( tmp_13_fu_479_p1 );

    SC_METHOD(thread_tmp_11_fu_464_p1);
    sensitive << ( tmp_10_reg_597 );

    SC_METHOD(thread_tmp_12_fu_474_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( a_req_full_n );
    sensitive << ( appLogAddr_reg_581 );

    SC_METHOD(thread_tmp_13_fu_479_p1);
    sensitive << ( read_index_3_reg_602 );

    SC_METHOD(thread_tmp_14_fu_490_p2);
    sensitive << ( appLogAddr_reg_581 );
    sensitive << ( tmp2_fu_482_p3 );

    SC_METHOD(thread_tmp_16_fu_505_p1);
    sensitive << ( tmp_15_reg_612 );

    SC_METHOD(thread_tmp_1_fu_428_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( buff_q0 );

    SC_METHOD(thread_tmp_2_fu_333_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( i_reg_219 );

    SC_METHOD(thread_tmp_3_fu_323_p2);
    sensitive << ( app_list_addr0data_reg );

    SC_METHOD(thread_tmp_4_cast_fu_329_p1);
    sensitive << ( tmp_3_fu_323_p2 );

    SC_METHOD(thread_tmp_5_fu_434_p1);
    sensitive << ( grp_fu_301_p4 );

    SC_METHOD(thread_tmp_6_fu_444_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( read_index_load_reg_267 );

    SC_METHOD(thread_tmp_7_fu_374_p2);
    sensitive << ( tmp1_fu_369_p2 );
    sensitive << ( p_shl_cast_fu_353_p1 );

    SC_METHOD(thread_tmp_8_cast_fu_390_p1);
    sensitive << ( tmp_8_fu_380_p4 );

    SC_METHOD(thread_tmp_8_fu_380_p4);
    sensitive << ( tmp_7_fu_374_p2 );

    SC_METHOD(thread_tmp_9_fu_418_p1);
    sensitive << ( indvar_reg_230 );

    SC_METHOD(thread_tmp_fu_317_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( inAppID0data_reg );

    SC_METHOD(thread_tmp_s_fu_423_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( inAppID0data_reg );
    sensitive << ( buff_q0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( a_req_full_n );
    sensitive << ( a_rsp_empty_n );
    sensitive << ( debug11ack_in );
    sensitive << ( tmp_fu_317_p2 );
    sensitive << ( tmp_2_fu_333_p2 );
    sensitive << ( tmp_s_fu_423_p2 );
    sensitive << ( tmp_1_reg_587 );
    sensitive << ( indvar8_phi_fu_259_p4 );
    sensitive << ( tmp_12_fu_474_p2 );
    sensitive << ( exitcond_fu_400_p2 );
    sensitive << ( isIter0_fu_412_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000";
    inAppID0data_reg = "00000000000000000000000000000000";
    inAppID0vld_reg = SC_LOGIC_0;
    app_list_addr0data_reg = "00000000000000000000000000000000";
    app_list_addr0vld_reg = SC_LOGIC_0;
    debug11data_reg = "00000000000000000000000000000000";
    debug11vld_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "hwHB_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_req_din, "(port)a_req_din");
    sc_trace(mVcdFile, a_req_full_n, "(port)a_req_full_n");
    sc_trace(mVcdFile, a_req_write, "(port)a_req_write");
    sc_trace(mVcdFile, a_rsp_empty_n, "(port)a_rsp_empty_n");
    sc_trace(mVcdFile, a_rsp_read, "(port)a_rsp_read");
    sc_trace(mVcdFile, a_address, "(port)a_address");
    sc_trace(mVcdFile, a_datain, "(port)a_datain");
    sc_trace(mVcdFile, a_dataout, "(port)a_dataout");
    sc_trace(mVcdFile, a_size, "(port)a_size");
    sc_trace(mVcdFile, inAppID, "(port)inAppID");
    sc_trace(mVcdFile, time_r, "(port)time_r");
    sc_trace(mVcdFile, app_list_addr, "(port)app_list_addr");
    sc_trace(mVcdFile, debug1, "(port)debug1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, inAppID0data_reg, "inAppID0data_reg");
    sc_trace(mVcdFile, inAppID0vld_reg, "inAppID0vld_reg");
    sc_trace(mVcdFile, inAppID0ack_out, "inAppID0ack_out");
    sc_trace(mVcdFile, app_list_addr0data_reg, "app_list_addr0data_reg");
    sc_trace(mVcdFile, app_list_addr0vld_reg, "app_list_addr0vld_reg");
    sc_trace(mVcdFile, app_list_addr0ack_out, "app_list_addr0ack_out");
    sc_trace(mVcdFile, debug11data_reg, "debug11data_reg");
    sc_trace(mVcdFile, debug11vld_reg, "debug11vld_reg");
    sc_trace(mVcdFile, debug11vld_in, "debug11vld_in");
    sc_trace(mVcdFile, debug11ack_in, "debug11ack_in");
    sc_trace(mVcdFile, reg_311, "reg_311");
    sc_trace(mVcdFile, buff_addr_gep_fu_182_p3, "buff_addr_gep_fu_182_p3");
    sc_trace(mVcdFile, buff_addr_reg_528, "buff_addr_reg_528");
    sc_trace(mVcdFile, tmp_fu_317_p2, "tmp_fu_317_p2");
    sc_trace(mVcdFile, tmp_4_cast_fu_329_p1, "tmp_4_cast_fu_329_p1");
    sc_trace(mVcdFile, tmp_4_cast_reg_533, "tmp_4_cast_reg_533");
    sc_trace(mVcdFile, i_1_fu_339_p2, "i_1_fu_339_p2");
    sc_trace(mVcdFile, i_1_reg_541, "i_1_reg_541");
    sc_trace(mVcdFile, a_addr_reg_546, "a_addr_reg_546");
    sc_trace(mVcdFile, tmp_2_fu_333_p2, "tmp_2_fu_333_p2");
    sc_trace(mVcdFile, indvar_next_fu_406_p2, "indvar_next_fu_406_p2");
    sc_trace(mVcdFile, indvar_next_reg_555, "indvar_next_reg_555");
    sc_trace(mVcdFile, tmp_s_fu_423_p2, "tmp_s_fu_423_p2");
    sc_trace(mVcdFile, buff_q0, "buff_q0");
    sc_trace(mVcdFile, appStateAddr_reg_576, "appStateAddr_reg_576");
    sc_trace(mVcdFile, buff_q1, "buff_q1");
    sc_trace(mVcdFile, appLogAddr_reg_581, "appLogAddr_reg_581");
    sc_trace(mVcdFile, tmp_1_fu_428_p2, "tmp_1_fu_428_p2");
    sc_trace(mVcdFile, tmp_1_reg_587, "tmp_1_reg_587");
    sc_trace(mVcdFile, a_addr_1_reg_591, "a_addr_1_reg_591");
    sc_trace(mVcdFile, grp_fu_301_p4, "grp_fu_301_p4");
    sc_trace(mVcdFile, tmp_10_reg_597, "tmp_10_reg_597");
    sc_trace(mVcdFile, indvar8_phi_fu_259_p4, "indvar8_phi_fu_259_p4");
    sc_trace(mVcdFile, read_index_3_fu_456_p3, "read_index_3_fu_456_p3");
    sc_trace(mVcdFile, read_index_3_reg_602, "read_index_3_reg_602");
    sc_trace(mVcdFile, tmp_15_reg_612, "tmp_15_reg_612");
    sc_trace(mVcdFile, tmp_12_fu_474_p2, "tmp_12_fu_474_p2");
    sc_trace(mVcdFile, buff_address0, "buff_address0");
    sc_trace(mVcdFile, buff_ce0, "buff_ce0");
    sc_trace(mVcdFile, buff_we0, "buff_we0");
    sc_trace(mVcdFile, buff_d0, "buff_d0");
    sc_trace(mVcdFile, buff_address1, "buff_address1");
    sc_trace(mVcdFile, buff_ce1, "buff_ce1");
    sc_trace(mVcdFile, i_reg_219, "i_reg_219");
    sc_trace(mVcdFile, indvar_reg_230, "indvar_reg_230");
    sc_trace(mVcdFile, read_index_load2_reg_242, "read_index_load2_reg_242");
    sc_trace(mVcdFile, indvar8_reg_254, "indvar8_reg_254");
    sc_trace(mVcdFile, read_index_load_reg_267, "read_index_load_reg_267");
    sc_trace(mVcdFile, debug_temp_2_reg_279, "debug_temp_2_reg_279");
    sc_trace(mVcdFile, tmp_9_fu_418_p1, "tmp_9_fu_418_p1");
    sc_trace(mVcdFile, tmp_8_cast_fu_390_p1, "tmp_8_cast_fu_390_p1");
    sc_trace(mVcdFile, tmp_5_fu_434_p1, "tmp_5_fu_434_p1");
    sc_trace(mVcdFile, tmp_11_fu_464_p1, "tmp_11_fu_464_p1");
    sc_trace(mVcdFile, tmp_16_fu_505_p1, "tmp_16_fu_505_p1");
    sc_trace(mVcdFile, exitcond_fu_400_p2, "exitcond_fu_400_p2");
    sc_trace(mVcdFile, isIter0_fu_412_p2, "isIter0_fu_412_p2");
    sc_trace(mVcdFile, grp_fu_301_p1, "grp_fu_301_p1");
    sc_trace(mVcdFile, tmp_3_fu_323_p2, "tmp_3_fu_323_p2");
    sc_trace(mVcdFile, p_shl_fu_345_p3, "p_shl_fu_345_p3");
    sc_trace(mVcdFile, p_shl1_fu_357_p3, "p_shl1_fu_357_p3");
    sc_trace(mVcdFile, p_shl1_cast_fu_365_p1, "p_shl1_cast_fu_365_p1");
    sc_trace(mVcdFile, tmp1_fu_369_p2, "tmp1_fu_369_p2");
    sc_trace(mVcdFile, p_shl_cast_fu_353_p1, "p_shl_cast_fu_353_p1");
    sc_trace(mVcdFile, tmp_7_fu_374_p2, "tmp_7_fu_374_p2");
    sc_trace(mVcdFile, tmp_8_fu_380_p4, "tmp_8_fu_380_p4");
    sc_trace(mVcdFile, tmp_6_fu_444_p2, "tmp_6_fu_444_p2");
    sc_trace(mVcdFile, read_index_1_fu_450_p2, "read_index_1_fu_450_p2");
    sc_trace(mVcdFile, tmp_13_fu_479_p1, "tmp_13_fu_479_p1");
    sc_trace(mVcdFile, tmp2_fu_482_p3, "tmp2_fu_482_p3");
    sc_trace(mVcdFile, tmp_14_fu_490_p2, "tmp_14_fu_490_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("hwHB.hdltvin.dat");
    mHdltvoutHandle.open("hwHB.hdltvout.dat");
}

hwHB::~hwHB() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete buff_U;
}

void hwHB::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        app_list_addr0data_reg = ap_const_lv32_0;
    } else {
        if (((!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,5,5>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_0, app_list_addr0vld_reg.read())) || 
             (!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,5,5>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_1, app_list_addr0vld_reg.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, app_list_addr0ack_out.read())))) {
            app_list_addr0data_reg = app_list_addr.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        app_list_addr0vld_reg = ap_const_logic_0;
    } else {
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        debug11data_reg = ap_const_lv32_0;
    } else {
        if (((!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,5,5>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, debug11vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, debug11vld_reg.read())) || 
             (!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,5,5>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, debug11vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, debug11vld_reg.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1)))) {
            debug11data_reg = debug_temp_2_reg_279.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        debug11vld_reg = ap_const_logic_0;
    } else {
    }
    if ((!esl_seteq<1,1,1>(a_req_full_n.read(), ap_const_logic_0) && 
         esl_seteq<1,5,5>(ap_ST_st21_fsm_20, ap_CS_fsm.read()))) {
        debug_temp_2_reg_279 = read_index_3_reg_602.read();
    } else if (((esl_seteq<1,5,5>(ap_ST_st20_fsm_19, ap_CS_fsm.read()) && 
                 !esl_seteq<1,1,1>(a_req_full_n.read(), ap_const_logic_0) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_fu_474_p2.read())) || 
                (esl_seteq<1,5,5>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_333_p2.read())))) {
        debug_temp_2_reg_279 = ap_const_lv32_3E7;
    } else if ((esl_seteq<1,5,5>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(tmp_fu_317_p2.read(), ap_const_lv1_0))) {
        debug_temp_2_reg_279 = ap_const_lv32_4D2;
    }
    if ((esl_seteq<1,5,5>(ap_ST_st11_fsm_10, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_423_p2.read()))) {
        i_reg_219 = i_1_reg_541.read();
    } else if ((esl_seteq<1,5,5>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                esl_seteq<1,1,1>(tmp_fu_317_p2.read(), ap_const_lv1_0))) {
        i_reg_219 = ap_const_lv5_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        inAppID0data_reg = ap_const_lv32_0;
    } else {
        if (((!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,5,5>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_0, inAppID0vld_reg.read())) || 
             (!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,5,5>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inAppID0vld_reg.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inAppID0ack_out.read())))) {
            inAppID0data_reg = inAppID.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        inAppID0vld_reg = ap_const_logic_0;
    } else {
    }
    if ((esl_seteq<1,5,5>(ap_ST_st12_fsm_11, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_428_p2.read()))) {
        indvar8_reg_254 = ap_const_lv1_0;
    } else if ((!esl_seteq<1,1,1>(a_rsp_empty_n.read(), ap_const_logic_0) && 
                esl_seteq<1,5,5>(ap_ST_st18_fsm_17, ap_CS_fsm.read()))) {
        indvar8_reg_254 = ap_const_lv1_1;
    }
    if ((esl_seteq<1,5,5>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_333_p2.read()))) {
        indvar_reg_230 = ap_const_lv3_0;
    } else if (esl_seteq<1,5,5>(ap_ST_st10_fsm_9, ap_CS_fsm.read())) {
        indvar_reg_230 = indvar_next_reg_555.read();
    }
    if ((esl_seteq<1,5,5>(ap_ST_st12_fsm_11, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_428_p2.read()))) {
        a_addr_1_reg_591 =  (sc_lv<32>) (tmp_5_fu_434_p1.read());
    }
    if ((esl_seteq<1,5,5>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_333_p2.read()))) {
        a_addr_reg_546 =  (sc_lv<32>) (tmp_8_cast_fu_390_p1.read());
    }
    if (esl_seteq<1,5,5>(ap_ST_st12_fsm_11, ap_CS_fsm.read())) {
        appLogAddr_reg_581 = buff_q1.read();
        appStateAddr_reg_576 = buff_q0.read();
        tmp_1_reg_587 = tmp_1_fu_428_p2.read();
    }
    if ((esl_seteq<1,5,5>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && esl_seteq<1,1,1>(tmp_fu_317_p2.read(), ap_const_lv1_0))) {
        buff_addr_reg_528 = buff_addr_gep_fu_182_p3.read();
        tmp_4_cast_reg_533 = tmp_4_cast_fu_329_p1.read();
    }
    if (esl_seteq<1,5,5>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
        i_1_reg_541 = i_1_fu_339_p2.read();
    }
    if (esl_seteq<1,5,5>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
        indvar_next_reg_555 = indvar_next_fu_406_p2.read();
    }
    if (esl_seteq<1,5,5>(ap_ST_st19_fsm_18, ap_CS_fsm.read())) {
        read_index_3_reg_602 = read_index_3_fu_456_p3.read();
    }
    if ((!esl_seteq<1,1,1>(a_rsp_empty_n.read(), ap_const_logic_0) && esl_seteq<1,5,5>(ap_ST_st18_fsm_17, ap_CS_fsm.read()))) {
        read_index_load2_reg_242 = a_datain.read();
    }
    if ((esl_seteq<1,5,5>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_587.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, indvar8_phi_fu_259_p4.read()))) {
        read_index_load_reg_267 = read_index_load2_reg_242.read();
    }
    if (((esl_seteq<1,5,5>(ap_ST_st9_fsm_8, ap_CS_fsm.read()) && 
  !esl_seteq<1,1,1>(a_rsp_empty_n.read(), ap_const_logic_0)) || (!esl_seteq<1,1,1>(a_rsp_empty_n.read(), ap_const_logic_0) && 
  esl_seteq<1,5,5>(ap_ST_st18_fsm_17, ap_CS_fsm.read())))) {
        reg_311 = a_datain.read();
    }
    if ((esl_seteq<1,5,5>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_587.read()) || 
  !esl_seteq<1,1,1>(ap_const_lv1_0, indvar8_phi_fu_259_p4.read())))) {
        tmp_10_reg_597 = grp_fu_301_p1.read().range(31, 2);
    }
    if ((esl_seteq<1,5,5>(ap_ST_st20_fsm_19, ap_CS_fsm.read()) && !esl_seteq<1,1,1>(a_req_full_n.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_fu_474_p2.read()))) {
        tmp_15_reg_612 = tmp_14_fu_490_p2.read().range(31, 2);
    }
}

void hwHB::thread_a_address() {
    if ((!esl_seteq<1,1,1>(a_req_full_n.read(), ap_const_logic_0) && 
         esl_seteq<1,5,5>(ap_ST_st21_fsm_20, ap_CS_fsm.read()))) {
        a_address =  (sc_lv<32>) (tmp_16_fu_505_p1.read());
    } else if ((esl_seteq<1,5,5>(ap_ST_st20_fsm_19, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(a_req_full_n.read(), ap_const_logic_0))) {
        a_address =  (sc_lv<32>) (tmp_11_fu_464_p1.read());
    } else if ((esl_seteq<1,5,5>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_587.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, indvar8_phi_fu_259_p4.read()))) {
        a_address = a_addr_1_reg_591.read();
    } else if ((esl_seteq<1,5,5>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_400_p2.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, isIter0_fu_412_p2.read()))) {
        a_address = a_addr_reg_546.read();
    } else {
        a_address = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void hwHB::thread_a_dataout() {
    if (!esl_seteq<1,1,1>(a_req_full_n.read(), ap_const_logic_0)) {
        if (esl_seteq<1,5,5>(ap_ST_st21_fsm_20, ap_CS_fsm.read())) {
            a_dataout = time_r.read();
        } else if (esl_seteq<1,5,5>(ap_ST_st20_fsm_19, ap_CS_fsm.read())) {
            a_dataout = read_index_3_reg_602.read();
        } else {
            a_dataout = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        a_dataout = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void hwHB::thread_a_req_din() {
    if (((esl_seteq<1,5,5>(ap_ST_st20_fsm_19, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(a_req_full_n.read(), ap_const_logic_0)) || 
         (!esl_seteq<1,1,1>(a_req_full_n.read(), ap_const_logic_0) && 
          esl_seteq<1,5,5>(ap_ST_st21_fsm_20, ap_CS_fsm.read())))) {
        a_req_din = ap_const_logic_1;
    } else if (((esl_seteq<1,5,5>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_400_p2.read()) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, isIter0_fu_412_p2.read())) || 
                (esl_seteq<1,5,5>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_587.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, indvar8_phi_fu_259_p4.read())))) {
        a_req_din = ap_const_logic_0;
    } else {
        a_req_din = ap_const_logic_0;
    }
}

void hwHB::thread_a_req_write() {
    if (((esl_seteq<1,5,5>(ap_ST_st20_fsm_19, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(a_req_full_n.read(), ap_const_logic_0)) || 
         (!esl_seteq<1,1,1>(a_req_full_n.read(), ap_const_logic_0) && 
          esl_seteq<1,5,5>(ap_ST_st21_fsm_20, ap_CS_fsm.read())) || 
         (esl_seteq<1,5,5>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_400_p2.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, isIter0_fu_412_p2.read())) || 
         (esl_seteq<1,5,5>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_587.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, indvar8_phi_fu_259_p4.read())))) {
        a_req_write = ap_const_logic_1;
    } else {
        a_req_write = ap_const_logic_0;
    }
}

void hwHB::thread_a_rsp_read() {
    if (((esl_seteq<1,5,5>(ap_ST_st9_fsm_8, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(a_rsp_empty_n.read(), ap_const_logic_0)) || 
         (!esl_seteq<1,1,1>(a_rsp_empty_n.read(), ap_const_logic_0) && 
          esl_seteq<1,5,5>(ap_ST_st18_fsm_17, ap_CS_fsm.read())))) {
        a_rsp_read = ap_const_logic_1;
    } else {
        a_rsp_read = ap_const_logic_0;
    }
}

void hwHB::thread_a_size() {
    if (((esl_seteq<1,5,5>(ap_ST_st20_fsm_19, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(a_req_full_n.read(), ap_const_logic_0)) || 
         (!esl_seteq<1,1,1>(a_req_full_n.read(), ap_const_logic_0) && 
          esl_seteq<1,5,5>(ap_ST_st21_fsm_20, ap_CS_fsm.read())) || 
         (esl_seteq<1,5,5>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_587.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, indvar8_phi_fu_259_p4.read())))) {
        a_size = ap_const_lv32_1;
    } else if ((esl_seteq<1,5,5>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_400_p2.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, isIter0_fu_412_p2.read()))) {
        a_size = ap_const_lv32_5;
    } else {
        a_size = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void hwHB::thread_ap_done() {
    if ((esl_seteq<1,5,5>(ap_ST_st23_fsm_22, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(debug11ack_in.read(), ap_const_logic_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void hwHB::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,5,5>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void hwHB::thread_ap_ready() {
    if ((esl_seteq<1,5,5>(ap_ST_st23_fsm_22, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(debug11ack_in.read(), ap_const_logic_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void hwHB::thread_app_list_addr0ack_out() {
    if ((esl_seteq<1,5,5>(ap_ST_st23_fsm_22, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(debug11ack_in.read(), ap_const_logic_0))) {
        app_list_addr0ack_out = ap_const_logic_1;
    } else {
        app_list_addr0ack_out = ap_const_logic_0;
    }
}

void hwHB::thread_buff_addr_gep_fu_182_p3() {
    buff_addr_gep_fu_182_p3 =  (sc_lv<3>) (ap_const_lv64_0);
}

void hwHB::thread_buff_address0() {
    if (esl_seteq<1,5,5>(ap_ST_st10_fsm_9, ap_CS_fsm.read())) {
        buff_address0 =  (sc_lv<3>) (tmp_9_fu_418_p1.read());
    } else if (esl_seteq<1,5,5>(ap_ST_st11_fsm_10, ap_CS_fsm.read())) {
        buff_address0 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,5,5>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
        buff_address0 = buff_addr_reg_528.read();
    } else {
        buff_address0 =  (sc_lv<3>) ("XXX");
    }
}

void hwHB::thread_buff_address1() {
    buff_address1 =  (sc_lv<3>) (ap_const_lv64_3);
}

void hwHB::thread_buff_ce0() {
    if ((esl_seteq<1,5,5>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) || 
         esl_seteq<1,5,5>(ap_ST_st11_fsm_10, ap_CS_fsm.read()) || 
         esl_seteq<1,5,5>(ap_ST_st10_fsm_9, ap_CS_fsm.read()))) {
        buff_ce0 = ap_const_logic_1;
    } else {
        buff_ce0 = ap_const_logic_0;
    }
}

void hwHB::thread_buff_ce1() {
    if (esl_seteq<1,5,5>(ap_ST_st11_fsm_10, ap_CS_fsm.read())) {
        buff_ce1 = ap_const_logic_1;
    } else {
        buff_ce1 = ap_const_logic_0;
    }
}

void hwHB::thread_buff_d0() {
    buff_d0 = reg_311.read();
}

void hwHB::thread_buff_we0() {
    if ((esl_seteq<1,5,5>(ap_ST_st10_fsm_9, ap_CS_fsm.read()))) {
        buff_we0 = ap_const_logic_1;
    } else {
        buff_we0 = ap_const_logic_0;
    }
}

void hwHB::thread_debug1() {
    debug1 = debug11data_reg.read();
}

void hwHB::thread_debug11ack_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, debug11vld_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, debug11vld_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1)))) {
        debug11ack_in = ap_const_logic_1;
    } else {
        debug11ack_in = ap_const_logic_0;
    }
}

void hwHB::thread_debug11vld_in() {
    if (esl_seteq<1,5,5>(ap_ST_st22_fsm_21, ap_CS_fsm.read())) {
        debug11vld_in = ap_const_logic_1;
    } else {
        debug11vld_in = ap_const_logic_0;
    }
}

void hwHB::thread_exitcond_fu_400_p2() {
    exitcond_fu_400_p2 = (!indvar_reg_230.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(indvar_reg_230.read() == ap_const_lv3_5);
}

void hwHB::thread_grp_fu_301_p1() {
    if (esl_seteq<1,5,5>(ap_ST_st13_fsm_12, ap_CS_fsm.read())) {
        grp_fu_301_p1 = appStateAddr_reg_576.read();
    } else if (esl_seteq<1,5,5>(ap_ST_st12_fsm_11, ap_CS_fsm.read())) {
        grp_fu_301_p1 = buff_q0.read();
    } else {
        grp_fu_301_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void hwHB::thread_grp_fu_301_p4() {
    grp_fu_301_p4 = grp_fu_301_p1.read().range(31, 2);
}

void hwHB::thread_i_1_fu_339_p2() {
    i_1_fu_339_p2 = (!i_reg_219.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_bigint<5>(i_reg_219.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void hwHB::thread_inAppID0ack_out() {
    if ((esl_seteq<1,5,5>(ap_ST_st23_fsm_22, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(debug11ack_in.read(), ap_const_logic_0))) {
        inAppID0ack_out = ap_const_logic_1;
    } else {
        inAppID0ack_out = ap_const_logic_0;
    }
}

void hwHB::thread_indvar8_phi_fu_259_p4() {
    indvar8_phi_fu_259_p4 = indvar8_reg_254.read();
}

void hwHB::thread_indvar_next_fu_406_p2() {
    indvar_next_fu_406_p2 = (!indvar_reg_230.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_bigint<3>(indvar_reg_230.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void hwHB::thread_isIter0_fu_412_p2() {
    isIter0_fu_412_p2 = (!indvar_reg_230.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): sc_lv<1>(indvar_reg_230.read() == ap_const_lv3_0);
}

void hwHB::thread_p_shl1_cast_fu_365_p1() {
    p_shl1_cast_fu_365_p1 = esl_zext<33,7>(p_shl1_fu_357_p3.read());
}

void hwHB::thread_p_shl1_fu_357_p3() {
    p_shl1_fu_357_p3 = esl_concat<5,2>(i_reg_219.read(), ap_const_lv2_0);
}

void hwHB::thread_p_shl_cast_fu_353_p1() {
    p_shl_cast_fu_353_p1 = esl_zext<33,9>(p_shl_fu_345_p3.read());
}

void hwHB::thread_p_shl_fu_345_p3() {
    p_shl_fu_345_p3 = esl_concat<5,4>(i_reg_219.read(), ap_const_lv4_0);
}

void hwHB::thread_read_index_1_fu_450_p2() {
    read_index_1_fu_450_p2 = (!read_index_load_reg_267.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(read_index_load_reg_267.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void hwHB::thread_read_index_3_fu_456_p3() {
    read_index_3_fu_456_p3 = (!tmp_6_fu_444_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_6_fu_444_p2.read()[0].to_bool())? read_index_1_fu_450_p2.read(): ap_const_lv32_0);
}

void hwHB::thread_tmp1_fu_369_p2() {
    tmp1_fu_369_p2 = (!p_shl1_cast_fu_365_p1.read().is_01() || !tmp_4_cast_reg_533.read().is_01())? sc_lv<33>(): (sc_bigint<33>(p_shl1_cast_fu_365_p1.read()) + sc_biguint<33>(tmp_4_cast_reg_533.read()));
}

void hwHB::thread_tmp2_fu_482_p3() {
    tmp2_fu_482_p3 = esl_concat<26,6>(tmp_13_fu_479_p1.read(), ap_const_lv6_10);
}

void hwHB::thread_tmp_11_fu_464_p1() {
    tmp_11_fu_464_p1 = esl_zext<64,30>(tmp_10_reg_597.read());
}

void hwHB::thread_tmp_12_fu_474_p2() {
    tmp_12_fu_474_p2 = (!appLogAddr_reg_581.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(appLogAddr_reg_581.read() == ap_const_lv32_0);
}

void hwHB::thread_tmp_13_fu_479_p1() {
    tmp_13_fu_479_p1 = read_index_3_reg_602.read().range(26-1, 0);
}

void hwHB::thread_tmp_14_fu_490_p2() {
    tmp_14_fu_490_p2 = (!tmp2_fu_482_p3.read().is_01() || !appLogAddr_reg_581.read().is_01())? sc_lv<32>(): (sc_bigint<32>(tmp2_fu_482_p3.read()) + sc_biguint<32>(appLogAddr_reg_581.read()));
}

void hwHB::thread_tmp_16_fu_505_p1() {
    tmp_16_fu_505_p1 = esl_zext<64,30>(tmp_15_reg_612.read());
}

void hwHB::thread_tmp_1_fu_428_p2() {
    tmp_1_fu_428_p2 = (!buff_q0.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(buff_q0.read() == ap_const_lv32_0);
}

void hwHB::thread_tmp_2_fu_333_p2() {
    tmp_2_fu_333_p2 = (!i_reg_219.read().is_01() || !ap_const_lv5_14.is_01())? sc_lv<1>(): (sc_biguint<5>(i_reg_219.read()) < sc_biguint<5>(ap_const_lv5_14));
}

void hwHB::thread_tmp_3_fu_323_p2() {
    tmp_3_fu_323_p2 = (!app_list_addr0data_reg.read().is_01() || !ap_const_lv32_8.is_01())? sc_lv<32>(): (sc_bigint<32>(app_list_addr0data_reg.read()) + sc_biguint<32>(ap_const_lv32_8));
}

void hwHB::thread_tmp_4_cast_fu_329_p1() {
    tmp_4_cast_fu_329_p1 = esl_zext<33,32>(tmp_3_fu_323_p2.read());
}

void hwHB::thread_tmp_5_fu_434_p1() {
    tmp_5_fu_434_p1 = esl_zext<64,30>(grp_fu_301_p4.read());
}

void hwHB::thread_tmp_6_fu_444_p2() {
    tmp_6_fu_444_p2 = (!read_index_load_reg_267.read().is_01() || !ap_const_lv32_A.is_01())? sc_lv<1>(): (sc_bigint<32>(read_index_load_reg_267.read()) < sc_bigint<32>(ap_const_lv32_A));
}

void hwHB::thread_tmp_7_fu_374_p2() {
    tmp_7_fu_374_p2 = (!tmp1_fu_369_p2.read().is_01() || !p_shl_cast_fu_353_p1.read().is_01())? sc_lv<33>(): (sc_bigint<33>(tmp1_fu_369_p2.read()) + sc_biguint<33>(p_shl_cast_fu_353_p1.read()));
}

void hwHB::thread_tmp_8_cast_fu_390_p1() {
    tmp_8_cast_fu_390_p1 = esl_zext<64,31>(tmp_8_fu_380_p4.read());
}

void hwHB::thread_tmp_8_fu_380_p4() {
    tmp_8_fu_380_p4 = tmp_7_fu_374_p2.read().range(32, 2);
}

void hwHB::thread_tmp_9_fu_418_p1() {
    tmp_9_fu_418_p1 = esl_zext<64,3>(indvar_reg_230.read());
}

void hwHB::thread_tmp_fu_317_p2() {
    tmp_fu_317_p2 = (!inAppID0data_reg.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(inAppID0data_reg.read() == ap_const_lv32_0);
}

void hwHB::thread_tmp_s_fu_423_p2() {
    tmp_s_fu_423_p2 = (!buff_q0.read().is_01() || !inAppID0data_reg.read().is_01())? sc_lv<1>(): sc_lv<1>(buff_q0.read() == inAppID0data_reg.read());
}

void hwHB::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 0 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            if (esl_seteq<1,1,1>(tmp_fu_317_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st22_fsm_21;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_333_p2.read())) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st22_fsm_21;
            }
            break;
        case 3 : 
            if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_400_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, isIter0_fu_412_p2.read()))) {
                ap_NS_fsm = ap_ST_st9_fsm_8;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_400_p2.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, isIter0_fu_412_p2.read()))) {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            } else {
                ap_NS_fsm = ap_ST_st11_fsm_10;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 5 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 6 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
            break;
        case 7 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 8 : 
            if (!esl_seteq<1,1,1>(a_rsp_empty_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st10_fsm_9;
            } else {
                ap_NS_fsm = ap_ST_st9_fsm_8;
            }
            break;
        case 9 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 10 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_423_p2.read())) {
                ap_NS_fsm = ap_ST_st12_fsm_11;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 11 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
            break;
        case 12 : 
            if ((!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_587.read()) || !esl_seteq<1,1,1>(ap_const_lv1_0, indvar8_phi_fu_259_p4.read()))) {
                ap_NS_fsm = ap_ST_st19_fsm_18;
            } else {
                ap_NS_fsm = ap_ST_st14_fsm_13;
            }
            break;
        case 13 : 
            ap_NS_fsm = ap_ST_st15_fsm_14;
            break;
        case 14 : 
            ap_NS_fsm = ap_ST_st16_fsm_15;
            break;
        case 15 : 
            ap_NS_fsm = ap_ST_st17_fsm_16;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st18_fsm_17;
            break;
        case 17 : 
            if (!esl_seteq<1,1,1>(a_rsp_empty_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st13_fsm_12;
            } else {
                ap_NS_fsm = ap_ST_st18_fsm_17;
            }
            break;
        case 18 : 
            ap_NS_fsm = ap_ST_st20_fsm_19;
            break;
        case 19 : 
            if ((!esl_seteq<1,1,1>(a_req_full_n.read(), ap_const_logic_0) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_fu_474_p2.read()))) {
                ap_NS_fsm = ap_ST_st22_fsm_21;
            } else if ((!esl_seteq<1,1,1>(a_req_full_n.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_fu_474_p2.read()))) {
                ap_NS_fsm = ap_ST_st21_fsm_20;
            } else {
                ap_NS_fsm = ap_ST_st20_fsm_19;
            }
            break;
        case 20 : 
            if (!esl_seteq<1,1,1>(a_req_full_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st22_fsm_21;
            } else {
                ap_NS_fsm = ap_ST_st21_fsm_20;
            }
            break;
        case 21 : 
            ap_NS_fsm = ap_ST_st23_fsm_22;
            break;
        case 22 : 
            if (!esl_seteq<1,1,1>(debug11ack_in.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st23_fsm_22;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}
void hwHB::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_req_din\" :  \"" << a_req_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_req_full_n\" :  \"" << a_req_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_req_write\" :  \"" << a_req_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_rsp_empty_n\" :  \"" << a_rsp_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_rsp_read\" :  \"" << a_rsp_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_address\" :  \"" << a_address.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_datain\" :  \"" << a_datain.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_dataout\" :  \"" << a_dataout.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_size\" :  \"" << a_size.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inAppID\" :  \"" << inAppID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"time_r\" :  \"" << time_r.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"app_list_addr\" :  \"" << app_list_addr.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"debug1\" :  \"" << debug1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

