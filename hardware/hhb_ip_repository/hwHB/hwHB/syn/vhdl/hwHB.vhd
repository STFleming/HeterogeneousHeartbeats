-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hwHB is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_req_din : OUT STD_LOGIC;
    a_req_full_n : IN STD_LOGIC;
    a_req_write : OUT STD_LOGIC;
    a_rsp_empty_n : IN STD_LOGIC;
    a_rsp_read : OUT STD_LOGIC;
    a_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    a_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    inAppID : IN STD_LOGIC_VECTOR (31 downto 0);
    time_r : IN STD_LOGIC_VECTOR (31 downto 0);
    app_list_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    debug1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of hwHB is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hwHB,hls_ip_2013_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=428,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4D2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010011010010";
    constant ap_const_lv32_3E7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111100111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal inAppID0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal inAppID0vld_reg : STD_LOGIC := '0';
    signal inAppID0ack_out : STD_LOGIC;
    signal app_list_addr0data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal app_list_addr0vld_reg : STD_LOGIC := '0';
    signal app_list_addr0ack_out : STD_LOGIC;
    signal debug11data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal debug11vld_reg : STD_LOGIC := '0';
    signal debug11vld_in : STD_LOGIC;
    signal debug11ack_in : STD_LOGIC;
    signal reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal buff_addr_gep_fu_182_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal buff_addr_reg_528 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_cast_fu_329_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_4_cast_reg_533 : STD_LOGIC_VECTOR (32 downto 0);
    signal i_1_fu_339_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_541 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_addr_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_406_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_next_reg_555 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal appStateAddr_reg_576 : STD_LOGIC_VECTOR (31 downto 0);
    signal buff_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal appLogAddr_reg_581 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_587 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_addr_1_reg_591 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_301_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_10_reg_597 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar8_phi_fu_259_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_index_3_fu_456_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_index_3_reg_602 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_612 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_12_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buff_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal buff_ce0 : STD_LOGIC;
    signal buff_we0 : STD_LOGIC;
    signal buff_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buff_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal buff_ce1 : STD_LOGIC;
    signal i_reg_219 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_reg_230 : STD_LOGIC_VECTOR (2 downto 0);
    signal read_index_load2_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar8_reg_254 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_index_load_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal debug_temp_2_reg_279 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_cast_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isIter0_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_345_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_fu_357_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_365_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp1_fu_369_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_shl_cast_fu_353_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_7_fu_374_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_8_fu_380_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_index_1_fu_450_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_479_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp2_fu_482_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_490_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component hwHB_buff IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    buff_U : component hwHB_buff
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buff_address0,
        ce0 => buff_ce0,
        we0 => buff_we0,
        d0 => buff_d0,
        q0 => buff_q0,
        address1 => buff_address1,
        ce1 => buff_ce1,
        q1 => buff_q1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- app_list_addr0data_reg assign process. --
    app_list_addr0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                app_list_addr0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = app_list_addr0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = app_list_addr0vld_reg) and (ap_const_logic_1 = app_list_addr0ack_out)))) then 
                    app_list_addr0data_reg <= app_list_addr;
                end if; 
            end if;
        end if;
    end process;


    -- app_list_addr0vld_reg assign process. --
    app_list_addr0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- debug11data_reg assign process. --
    debug11data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                debug11data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = debug11vld_in) and (ap_const_logic_0 = debug11vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = debug11vld_in) and (ap_const_logic_1 = debug11vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
                    debug11data_reg <= debug_temp_2_reg_279;
                end if; 
            end if;
        end if;
    end process;


    -- debug11vld_reg assign process. --
    debug11vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- inAppID0data_reg assign process. --
    inAppID0data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                inAppID0data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = inAppID0vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = inAppID0vld_reg) and (ap_const_logic_1 = inAppID0ack_out)))) then 
                    inAppID0data_reg <= inAppID;
                end if; 
            end if;
        end if;
    end process;


    -- inAppID0vld_reg assign process. --
    inAppID0vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- debug_temp_2_reg_279 assign process. --
    debug_temp_2_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((a_req_full_n = ap_const_logic_0)) and (ap_ST_st21_fsm_20 = ap_CS_fsm))) then 
                debug_temp_2_reg_279 <= read_index_3_reg_602;
            elsif ((((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((a_req_full_n = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_12_fu_474_p2))) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_2_fu_333_p2)))) then 
                debug_temp_2_reg_279 <= ap_const_lv32_3E7;
            elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((tmp_fu_317_p2 = ap_const_lv1_0)))) then 
                debug_temp_2_reg_279 <= ap_const_lv32_4D2;
            end if; 
        end if;
    end process;

    -- i_reg_219 assign process. --
    i_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st11_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_s_fu_423_p2))) then 
                i_reg_219 <= i_1_reg_541;
            elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (tmp_fu_317_p2 = ap_const_lv1_0))) then 
                i_reg_219 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- indvar8_reg_254 assign process. --
    indvar8_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_1_fu_428_p2))) then 
                indvar8_reg_254 <= ap_const_lv1_0;
            elsif ((not((a_rsp_empty_n = ap_const_logic_0)) and (ap_ST_st18_fsm_17 = ap_CS_fsm))) then 
                indvar8_reg_254 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- indvar_reg_230 assign process. --
    indvar_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_2_fu_333_p2)))) then 
                indvar_reg_230 <= ap_const_lv3_0;
            elsif ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then 
                indvar_reg_230 <= indvar_next_reg_555;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_1_fu_428_p2))) then
                a_addr_1_reg_591(0) <= tmp_5_fu_434_p1(32 - 1 downto 0)(0);
    a_addr_1_reg_591(1) <= tmp_5_fu_434_p1(32 - 1 downto 0)(1);
    a_addr_1_reg_591(2) <= tmp_5_fu_434_p1(32 - 1 downto 0)(2);
    a_addr_1_reg_591(3) <= tmp_5_fu_434_p1(32 - 1 downto 0)(3);
    a_addr_1_reg_591(4) <= tmp_5_fu_434_p1(32 - 1 downto 0)(4);
    a_addr_1_reg_591(5) <= tmp_5_fu_434_p1(32 - 1 downto 0)(5);
    a_addr_1_reg_591(6) <= tmp_5_fu_434_p1(32 - 1 downto 0)(6);
    a_addr_1_reg_591(7) <= tmp_5_fu_434_p1(32 - 1 downto 0)(7);
    a_addr_1_reg_591(8) <= tmp_5_fu_434_p1(32 - 1 downto 0)(8);
    a_addr_1_reg_591(9) <= tmp_5_fu_434_p1(32 - 1 downto 0)(9);
    a_addr_1_reg_591(10) <= tmp_5_fu_434_p1(32 - 1 downto 0)(10);
    a_addr_1_reg_591(11) <= tmp_5_fu_434_p1(32 - 1 downto 0)(11);
    a_addr_1_reg_591(12) <= tmp_5_fu_434_p1(32 - 1 downto 0)(12);
    a_addr_1_reg_591(13) <= tmp_5_fu_434_p1(32 - 1 downto 0)(13);
    a_addr_1_reg_591(14) <= tmp_5_fu_434_p1(32 - 1 downto 0)(14);
    a_addr_1_reg_591(15) <= tmp_5_fu_434_p1(32 - 1 downto 0)(15);
    a_addr_1_reg_591(16) <= tmp_5_fu_434_p1(32 - 1 downto 0)(16);
    a_addr_1_reg_591(17) <= tmp_5_fu_434_p1(32 - 1 downto 0)(17);
    a_addr_1_reg_591(18) <= tmp_5_fu_434_p1(32 - 1 downto 0)(18);
    a_addr_1_reg_591(19) <= tmp_5_fu_434_p1(32 - 1 downto 0)(19);
    a_addr_1_reg_591(20) <= tmp_5_fu_434_p1(32 - 1 downto 0)(20);
    a_addr_1_reg_591(21) <= tmp_5_fu_434_p1(32 - 1 downto 0)(21);
    a_addr_1_reg_591(22) <= tmp_5_fu_434_p1(32 - 1 downto 0)(22);
    a_addr_1_reg_591(23) <= tmp_5_fu_434_p1(32 - 1 downto 0)(23);
    a_addr_1_reg_591(24) <= tmp_5_fu_434_p1(32 - 1 downto 0)(24);
    a_addr_1_reg_591(25) <= tmp_5_fu_434_p1(32 - 1 downto 0)(25);
    a_addr_1_reg_591(26) <= tmp_5_fu_434_p1(32 - 1 downto 0)(26);
    a_addr_1_reg_591(27) <= tmp_5_fu_434_p1(32 - 1 downto 0)(27);
    a_addr_1_reg_591(28) <= tmp_5_fu_434_p1(32 - 1 downto 0)(28);
    a_addr_1_reg_591(29) <= tmp_5_fu_434_p1(32 - 1 downto 0)(29);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_2_fu_333_p2)))) then
                a_addr_reg_546(0) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(0);
    a_addr_reg_546(1) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(1);
    a_addr_reg_546(2) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(2);
    a_addr_reg_546(3) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(3);
    a_addr_reg_546(4) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(4);
    a_addr_reg_546(5) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(5);
    a_addr_reg_546(6) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(6);
    a_addr_reg_546(7) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(7);
    a_addr_reg_546(8) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(8);
    a_addr_reg_546(9) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(9);
    a_addr_reg_546(10) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(10);
    a_addr_reg_546(11) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(11);
    a_addr_reg_546(12) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(12);
    a_addr_reg_546(13) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(13);
    a_addr_reg_546(14) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(14);
    a_addr_reg_546(15) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(15);
    a_addr_reg_546(16) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(16);
    a_addr_reg_546(17) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(17);
    a_addr_reg_546(18) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(18);
    a_addr_reg_546(19) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(19);
    a_addr_reg_546(20) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(20);
    a_addr_reg_546(21) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(21);
    a_addr_reg_546(22) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(22);
    a_addr_reg_546(23) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(23);
    a_addr_reg_546(24) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(24);
    a_addr_reg_546(25) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(25);
    a_addr_reg_546(26) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(26);
    a_addr_reg_546(27) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(27);
    a_addr_reg_546(28) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(28);
    a_addr_reg_546(29) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(29);
    a_addr_reg_546(30) <= tmp_8_cast_fu_390_p1(32 - 1 downto 0)(30);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then
                appLogAddr_reg_581 <= buff_q1;
                appStateAddr_reg_576 <= buff_q0;
                tmp_1_reg_587 <= tmp_1_fu_428_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
                i_1_reg_541 <= i_1_fu_339_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then
                indvar_next_reg_555 <= indvar_next_fu_406_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st19_fsm_18 = ap_CS_fsm)) then
                read_index_3_reg_602 <= read_index_3_fu_456_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((a_rsp_empty_n = ap_const_logic_0)) and (ap_ST_st18_fsm_17 = ap_CS_fsm))) then
                read_index_load2_reg_242 <= a_datain;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_1_reg_587) and not((ap_const_lv1_0 = indvar8_phi_fu_259_p4)))) then
                read_index_load_reg_267 <= read_index_load2_reg_242;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_st9_fsm_8 = ap_CS_fsm) and not((a_rsp_empty_n = ap_const_logic_0))) or (not((a_rsp_empty_n = ap_const_logic_0)) and (ap_ST_st18_fsm_17 = ap_CS_fsm)))) then
                reg_311 <= a_datain;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st13_fsm_12 = ap_CS_fsm) and (not((ap_const_lv1_0 = tmp_1_reg_587)) or not((ap_const_lv1_0 = indvar8_phi_fu_259_p4))))) then
                tmp_10_reg_597 <= grp_fu_301_p1(31 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((a_req_full_n = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_12_fu_474_p2))) then
                tmp_15_reg_612 <= tmp_14_fu_490_p2(31 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (tmp_fu_317_p2 = ap_const_lv1_0))) then
                tmp_4_cast_reg_533(0) <= tmp_4_cast_fu_329_p1(0);
    tmp_4_cast_reg_533(1) <= tmp_4_cast_fu_329_p1(1);
    tmp_4_cast_reg_533(2) <= tmp_4_cast_fu_329_p1(2);
    tmp_4_cast_reg_533(3) <= tmp_4_cast_fu_329_p1(3);
    tmp_4_cast_reg_533(4) <= tmp_4_cast_fu_329_p1(4);
    tmp_4_cast_reg_533(5) <= tmp_4_cast_fu_329_p1(5);
    tmp_4_cast_reg_533(6) <= tmp_4_cast_fu_329_p1(6);
    tmp_4_cast_reg_533(7) <= tmp_4_cast_fu_329_p1(7);
    tmp_4_cast_reg_533(8) <= tmp_4_cast_fu_329_p1(8);
    tmp_4_cast_reg_533(9) <= tmp_4_cast_fu_329_p1(9);
    tmp_4_cast_reg_533(10) <= tmp_4_cast_fu_329_p1(10);
    tmp_4_cast_reg_533(11) <= tmp_4_cast_fu_329_p1(11);
    tmp_4_cast_reg_533(12) <= tmp_4_cast_fu_329_p1(12);
    tmp_4_cast_reg_533(13) <= tmp_4_cast_fu_329_p1(13);
    tmp_4_cast_reg_533(14) <= tmp_4_cast_fu_329_p1(14);
    tmp_4_cast_reg_533(15) <= tmp_4_cast_fu_329_p1(15);
    tmp_4_cast_reg_533(16) <= tmp_4_cast_fu_329_p1(16);
    tmp_4_cast_reg_533(17) <= tmp_4_cast_fu_329_p1(17);
    tmp_4_cast_reg_533(18) <= tmp_4_cast_fu_329_p1(18);
    tmp_4_cast_reg_533(19) <= tmp_4_cast_fu_329_p1(19);
    tmp_4_cast_reg_533(20) <= tmp_4_cast_fu_329_p1(20);
    tmp_4_cast_reg_533(21) <= tmp_4_cast_fu_329_p1(21);
    tmp_4_cast_reg_533(22) <= tmp_4_cast_fu_329_p1(22);
    tmp_4_cast_reg_533(23) <= tmp_4_cast_fu_329_p1(23);
    tmp_4_cast_reg_533(24) <= tmp_4_cast_fu_329_p1(24);
    tmp_4_cast_reg_533(25) <= tmp_4_cast_fu_329_p1(25);
    tmp_4_cast_reg_533(26) <= tmp_4_cast_fu_329_p1(26);
    tmp_4_cast_reg_533(27) <= tmp_4_cast_fu_329_p1(27);
    tmp_4_cast_reg_533(28) <= tmp_4_cast_fu_329_p1(28);
    tmp_4_cast_reg_533(29) <= tmp_4_cast_fu_329_p1(29);
    tmp_4_cast_reg_533(30) <= tmp_4_cast_fu_329_p1(30);
    tmp_4_cast_reg_533(31) <= tmp_4_cast_fu_329_p1(31);
            end if;
        end if;
    end process;
    inAppID0vld_reg <= '0';
    app_list_addr0vld_reg <= '0';
    debug11vld_reg <= '0';
    buff_addr_reg_528(2 downto 0) <= "000";
    tmp_4_cast_reg_533(32) <= '0';
    a_addr_reg_546(31) <= '0';
    a_addr_1_reg_591(31 downto 30) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , a_req_full_n , a_rsp_empty_n , debug11ack_in , tmp_fu_317_p2 , tmp_2_fu_333_p2 , tmp_s_fu_423_p2 , tmp_1_reg_587 , indvar8_phi_fu_259_p4 , tmp_12_fu_474_p2 , exitcond_fu_400_p2 , isIter0_fu_412_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((tmp_fu_317_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = tmp_2_fu_333_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (((ap_const_lv1_0 = exitcond_fu_400_p2) and (ap_const_lv1_0 = isIter0_fu_412_p2))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                elsif (((ap_const_lv1_0 = exitcond_fu_400_p2) and not((ap_const_lv1_0 = isIter0_fu_412_p2)))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                if (not((a_rsp_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st11_fsm_10 => 
                if (not((ap_const_lv1_0 = tmp_s_fu_423_p2))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                if ((not((ap_const_lv1_0 = tmp_1_reg_587)) or not((ap_const_lv1_0 = indvar8_phi_fu_259_p4)))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                if (not((a_rsp_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                end if;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                if ((not((a_req_full_n = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_12_fu_474_p2)))) then
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                elsif ((not((a_req_full_n = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_12_fu_474_p2))) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st21_fsm_20 => 
                if (not((a_req_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                end if;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                if (not((debug11ack_in = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- a_address assign process. --
    a_address_assign_proc : process(ap_CS_fsm, a_req_full_n, a_addr_reg_546, tmp_1_reg_587, a_addr_1_reg_591, indvar8_phi_fu_259_p4, tmp_11_fu_464_p1, tmp_16_fu_505_p1, exitcond_fu_400_p2, isIter0_fu_412_p2)
    begin
        if ((not((a_req_full_n = ap_const_logic_0)) and (ap_ST_st21_fsm_20 = ap_CS_fsm))) then 
            a_address <= tmp_16_fu_505_p1(32 - 1 downto 0);
        elsif (((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((a_req_full_n = ap_const_logic_0)))) then 
            a_address <= tmp_11_fu_464_p1(32 - 1 downto 0);
        elsif (((ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_1_reg_587) and (ap_const_lv1_0 = indvar8_phi_fu_259_p4))) then 
            a_address <= a_addr_1_reg_591;
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_400_p2) and not((ap_const_lv1_0 = isIter0_fu_412_p2)))) then 
            a_address <= a_addr_reg_546;
        else 
            a_address <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- a_dataout assign process. --
    a_dataout_assign_proc : process(ap_CS_fsm, a_req_full_n, time_r, read_index_3_reg_602)
    begin
        if (not((a_req_full_n = ap_const_logic_0))) then
            if ((ap_ST_st21_fsm_20 = ap_CS_fsm)) then 
                a_dataout <= time_r;
            elsif ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
                a_dataout <= read_index_3_reg_602;
            else 
                a_dataout <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_dataout <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- a_req_din assign process. --
    a_req_din_assign_proc : process(ap_CS_fsm, a_req_full_n, tmp_1_reg_587, indvar8_phi_fu_259_p4, exitcond_fu_400_p2, isIter0_fu_412_p2)
    begin
        if ((((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((a_req_full_n = ap_const_logic_0))) or (not((a_req_full_n = ap_const_logic_0)) and (ap_ST_st21_fsm_20 = ap_CS_fsm)))) then 
            a_req_din <= ap_const_logic_1;
        elsif ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_400_p2) and not((ap_const_lv1_0 = isIter0_fu_412_p2))) or ((ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_1_reg_587) and (ap_const_lv1_0 = indvar8_phi_fu_259_p4)))) then 
            a_req_din <= ap_const_logic_0;
        else 
            a_req_din <= ap_const_logic_0;
        end if; 
    end process;


    -- a_req_write assign process. --
    a_req_write_assign_proc : process(ap_CS_fsm, a_req_full_n, tmp_1_reg_587, indvar8_phi_fu_259_p4, exitcond_fu_400_p2, isIter0_fu_412_p2)
    begin
        if ((((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((a_req_full_n = ap_const_logic_0))) or (not((a_req_full_n = ap_const_logic_0)) and (ap_ST_st21_fsm_20 = ap_CS_fsm)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_400_p2) and not((ap_const_lv1_0 = isIter0_fu_412_p2))) or ((ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_1_reg_587) and (ap_const_lv1_0 = indvar8_phi_fu_259_p4)))) then 
            a_req_write <= ap_const_logic_1;
        else 
            a_req_write <= ap_const_logic_0;
        end if; 
    end process;


    -- a_rsp_read assign process. --
    a_rsp_read_assign_proc : process(ap_CS_fsm, a_rsp_empty_n)
    begin
        if ((((ap_ST_st9_fsm_8 = ap_CS_fsm) and not((a_rsp_empty_n = ap_const_logic_0))) or (not((a_rsp_empty_n = ap_const_logic_0)) and (ap_ST_st18_fsm_17 = ap_CS_fsm)))) then 
            a_rsp_read <= ap_const_logic_1;
        else 
            a_rsp_read <= ap_const_logic_0;
        end if; 
    end process;


    -- a_size assign process. --
    a_size_assign_proc : process(ap_CS_fsm, a_req_full_n, tmp_1_reg_587, indvar8_phi_fu_259_p4, exitcond_fu_400_p2, isIter0_fu_412_p2)
    begin
        if ((((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((a_req_full_n = ap_const_logic_0))) or (not((a_req_full_n = ap_const_logic_0)) and (ap_ST_st21_fsm_20 = ap_CS_fsm)) or ((ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_1_reg_587) and (ap_const_lv1_0 = indvar8_phi_fu_259_p4)))) then 
            a_size <= ap_const_lv32_1;
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_400_p2) and not((ap_const_lv1_0 = isIter0_fu_412_p2)))) then 
            a_size <= ap_const_lv32_5;
        else 
            a_size <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, debug11ack_in)
    begin
        if (((ap_ST_st23_fsm_22 = ap_CS_fsm) and not((debug11ack_in = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, debug11ack_in)
    begin
        if (((ap_ST_st23_fsm_22 = ap_CS_fsm) and not((debug11ack_in = ap_const_logic_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- app_list_addr0ack_out assign process. --
    app_list_addr0ack_out_assign_proc : process(ap_CS_fsm, debug11ack_in)
    begin
        if (((ap_ST_st23_fsm_22 = ap_CS_fsm) and not((debug11ack_in = ap_const_logic_0)))) then 
            app_list_addr0ack_out <= ap_const_logic_1;
        else 
            app_list_addr0ack_out <= ap_const_logic_0;
        end if; 
    end process;

    buff_addr_gep_fu_182_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- buff_address0 assign process. --
    buff_address0_assign_proc : process(ap_CS_fsm, buff_addr_reg_528, tmp_9_fu_418_p1)
    begin
        if ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then 
            buff_address0 <= tmp_9_fu_418_p1(3 - 1 downto 0);
        elsif ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
            buff_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            buff_address0 <= buff_addr_reg_528;
        else 
            buff_address0 <= "XXX";
        end if; 
    end process;

    buff_address1 <= ap_const_lv64_3(3 - 1 downto 0);

    -- buff_ce0 assign process. --
    buff_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st11_fsm_10 = ap_CS_fsm) or (ap_ST_st10_fsm_9 = ap_CS_fsm))) then 
            buff_ce0 <= ap_const_logic_1;
        else 
            buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buff_ce1 assign process. --
    buff_ce1_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
            buff_ce1 <= ap_const_logic_1;
        else 
            buff_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_d0 <= reg_311;

    -- buff_we0 assign process. --
    buff_we0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st10_fsm_9 = ap_CS_fsm))) then 
            buff_we0 <= ap_const_logic_1;
        else 
            buff_we0 <= ap_const_logic_0;
        end if; 
    end process;

    debug1 <= debug11data_reg;

    -- debug11ack_in assign process. --
    debug11ack_in_assign_proc : process(debug11vld_reg)
    begin
        if (((ap_const_logic_0 = debug11vld_reg) or ((ap_const_logic_1 = debug11vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            debug11ack_in <= ap_const_logic_1;
        else 
            debug11ack_in <= ap_const_logic_0;
        end if; 
    end process;


    -- debug11vld_in assign process. --
    debug11vld_in_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then 
            debug11vld_in <= ap_const_logic_1;
        else 
            debug11vld_in <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_400_p2 <= "1" when (indvar_reg_230 = ap_const_lv3_5) else "0";

    -- grp_fu_301_p1 assign process. --
    grp_fu_301_p1_assign_proc : process(ap_CS_fsm, buff_q0, appStateAddr_reg_576)
    begin
        if ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            grp_fu_301_p1 <= appStateAddr_reg_576;
        elsif ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
            grp_fu_301_p1 <= buff_q0;
        else 
            grp_fu_301_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_301_p4 <= grp_fu_301_p1(31 downto 2);
    i_1_fu_339_p2 <= std_logic_vector(unsigned(i_reg_219) + unsigned(ap_const_lv5_1));

    -- inAppID0ack_out assign process. --
    inAppID0ack_out_assign_proc : process(ap_CS_fsm, debug11ack_in)
    begin
        if (((ap_ST_st23_fsm_22 = ap_CS_fsm) and not((debug11ack_in = ap_const_logic_0)))) then 
            inAppID0ack_out <= ap_const_logic_1;
        else 
            inAppID0ack_out <= ap_const_logic_0;
        end if; 
    end process;

    indvar8_phi_fu_259_p4 <= indvar8_reg_254;
    indvar_next_fu_406_p2 <= std_logic_vector(unsigned(indvar_reg_230) + unsigned(ap_const_lv3_1));
    isIter0_fu_412_p2 <= "1" when (indvar_reg_230 = ap_const_lv3_0) else "0";
    p_shl1_cast_fu_365_p1 <= std_logic_vector(resize(unsigned(p_shl1_fu_357_p3),33));
    p_shl1_fu_357_p3 <= (i_reg_219 & ap_const_lv2_0);
    p_shl_cast_fu_353_p1 <= std_logic_vector(resize(unsigned(p_shl_fu_345_p3),33));
    p_shl_fu_345_p3 <= (i_reg_219 & ap_const_lv4_0);
    read_index_1_fu_450_p2 <= std_logic_vector(unsigned(read_index_load_reg_267) + unsigned(ap_const_lv32_1));
    read_index_3_fu_456_p3 <= 
        read_index_1_fu_450_p2 when (tmp_6_fu_444_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp1_fu_369_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_365_p1) + unsigned(tmp_4_cast_reg_533));
    tmp2_fu_482_p3 <= (tmp_13_fu_479_p1 & ap_const_lv6_10);
    tmp_11_fu_464_p1 <= std_logic_vector(resize(unsigned(tmp_10_reg_597),64));
    tmp_12_fu_474_p2 <= "1" when (appLogAddr_reg_581 = ap_const_lv32_0) else "0";
    tmp_13_fu_479_p1 <= read_index_3_reg_602(26 - 1 downto 0);
    tmp_14_fu_490_p2 <= std_logic_vector(unsigned(tmp2_fu_482_p3) + unsigned(appLogAddr_reg_581));
    tmp_16_fu_505_p1 <= std_logic_vector(resize(unsigned(tmp_15_reg_612),64));
    tmp_1_fu_428_p2 <= "1" when (buff_q0 = ap_const_lv32_0) else "0";
    tmp_2_fu_333_p2 <= "1" when (unsigned(i_reg_219) < unsigned(ap_const_lv5_14)) else "0";
    tmp_3_fu_323_p2 <= std_logic_vector(unsigned(app_list_addr0data_reg) + unsigned(ap_const_lv32_8));
    tmp_4_cast_fu_329_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_323_p2),33));
    tmp_5_fu_434_p1 <= std_logic_vector(resize(unsigned(grp_fu_301_p4),64));
    tmp_6_fu_444_p2 <= "1" when (signed(read_index_load_reg_267) < signed(ap_const_lv32_A)) else "0";
    tmp_7_fu_374_p2 <= std_logic_vector(unsigned(tmp1_fu_369_p2) + unsigned(p_shl_cast_fu_353_p1));
    tmp_8_cast_fu_390_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_380_p4),64));
    tmp_8_fu_380_p4 <= tmp_7_fu_374_p2(32 downto 2);
    tmp_9_fu_418_p1 <= std_logic_vector(resize(unsigned(indvar_reg_230),64));
    tmp_fu_317_p2 <= "1" when (inAppID0data_reg = ap_const_lv32_0) else "0";
    tmp_s_fu_423_p2 <= "1" when (buff_q0 = inAppID0data_reg) else "0";
end behav;
