// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "dummy_hwhb_generator.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dummy_hwhb_generator::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic dummy_hwhb_generator::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> dummy_hwhb_generator::ap_ST_st1_fsm_0 = "0";
const sc_lv<1> dummy_hwhb_generator::ap_ST_st2_fsm_1 = "1";
const sc_lv<64> dummy_hwhb_generator::ap_const_lv64_11280005 = "10001001010000000000000000101";
const sc_lv<64> dummy_hwhb_generator::ap_const_lv64_11280000 = "10001001010000000000000000000";
const sc_lv<32> dummy_hwhb_generator::ap_const_lv32_1 = "1";
const sc_lv<32> dummy_hwhb_generator::ap_const_lv32_A = "1010";

dummy_hwhb_generator::dummy_hwhb_generator(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm );
    sensitive << ( sensor_bus_req_full_n );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );
    sensitive << ( sensor_bus_req_full_n );

    SC_METHOD(thread_ap_sig_bdd_65);
    sensitive << ( ap_start );
    sensitive << ( sensor_bus_req_full_n );

    SC_METHOD(thread_sensor_bus_address);
    sensitive << ( ap_CS_fsm );
    sensitive << ( sensor_bus_req_full_n );
    sensitive << ( ap_sig_bdd_65 );

    SC_METHOD(thread_sensor_bus_dataout);
    sensitive << ( ap_CS_fsm );
    sensitive << ( sensor_bus_req_full_n );
    sensitive << ( ap_sig_bdd_65 );

    SC_METHOD(thread_sensor_bus_req_din);
    sensitive << ( ap_CS_fsm );
    sensitive << ( sensor_bus_req_full_n );
    sensitive << ( ap_sig_bdd_65 );

    SC_METHOD(thread_sensor_bus_req_write);
    sensitive << ( ap_CS_fsm );
    sensitive << ( sensor_bus_req_full_n );
    sensitive << ( ap_sig_bdd_65 );

    SC_METHOD(thread_sensor_bus_rsp_read);

    SC_METHOD(thread_sensor_bus_size);
    sensitive << ( ap_CS_fsm );
    sensitive << ( sensor_bus_req_full_n );
    sensitive << ( ap_sig_bdd_65 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( sensor_bus_req_full_n );
    sensitive << ( ap_sig_bdd_65 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dummy_hwhb_generator_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, sensor_bus_req_din, "(port)sensor_bus_req_din");
    sc_trace(mVcdFile, sensor_bus_req_full_n, "(port)sensor_bus_req_full_n");
    sc_trace(mVcdFile, sensor_bus_req_write, "(port)sensor_bus_req_write");
    sc_trace(mVcdFile, sensor_bus_rsp_empty_n, "(port)sensor_bus_rsp_empty_n");
    sc_trace(mVcdFile, sensor_bus_rsp_read, "(port)sensor_bus_rsp_read");
    sc_trace(mVcdFile, sensor_bus_address, "(port)sensor_bus_address");
    sc_trace(mVcdFile, sensor_bus_datain, "(port)sensor_bus_datain");
    sc_trace(mVcdFile, sensor_bus_dataout, "(port)sensor_bus_dataout");
    sc_trace(mVcdFile, sensor_bus_size, "(port)sensor_bus_size");
    sc_trace(mVcdFile, debug1, "(port)debug1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_bdd_65, "ap_sig_bdd_65");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("dummy_hwhb_generator.hdltvin.dat");
    mHdltvoutHandle.open("dummy_hwhb_generator.hdltvout.dat");
}

dummy_hwhb_generator::~dummy_hwhb_generator() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void dummy_hwhb_generator::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
}

void dummy_hwhb_generator::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(sensor_bus_req_full_n.read(), ap_const_logic_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void dummy_hwhb_generator::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void dummy_hwhb_generator::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(sensor_bus_req_full_n.read(), ap_const_logic_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void dummy_hwhb_generator::thread_ap_sig_bdd_65() {
    ap_sig_bdd_65 = (esl_seteq<1,1,1>(sensor_bus_req_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0));
}

void dummy_hwhb_generator::thread_sensor_bus_address() {
    if ((esl_seteq<1,1,1>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(sensor_bus_req_full_n.read(), ap_const_logic_0))) {
        sensor_bus_address =  (sc_lv<32>) (ap_const_lv64_11280000);
    } else if ((esl_seteq<1,1,1>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                !ap_sig_bdd_65.read())) {
        sensor_bus_address =  (sc_lv<32>) (ap_const_lv64_11280005);
    } else {
        sensor_bus_address = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void dummy_hwhb_generator::thread_sensor_bus_dataout() {
    if ((esl_seteq<1,1,1>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(sensor_bus_req_full_n.read(), ap_const_logic_0))) {
        sensor_bus_dataout = ap_const_lv32_1;
    } else if ((esl_seteq<1,1,1>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                !ap_sig_bdd_65.read())) {
        sensor_bus_dataout = ap_const_lv32_A;
    } else {
        sensor_bus_dataout = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void dummy_hwhb_generator::thread_sensor_bus_req_din() {
    if (((esl_seteq<1,1,1>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
          !ap_sig_bdd_65.read()) || 
         (esl_seteq<1,1,1>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(sensor_bus_req_full_n.read(), ap_const_logic_0)))) {
        sensor_bus_req_din = ap_const_logic_1;
    } else {
        sensor_bus_req_din = ap_const_logic_0;
    }
}

void dummy_hwhb_generator::thread_sensor_bus_req_write() {
    if (((esl_seteq<1,1,1>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
          !ap_sig_bdd_65.read()) || 
         (esl_seteq<1,1,1>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(sensor_bus_req_full_n.read(), ap_const_logic_0)))) {
        sensor_bus_req_write = ap_const_logic_1;
    } else {
        sensor_bus_req_write = ap_const_logic_0;
    }
}

void dummy_hwhb_generator::thread_sensor_bus_rsp_read() {
    sensor_bus_rsp_read = ap_const_logic_0;
}

void dummy_hwhb_generator::thread_sensor_bus_size() {
    sensor_bus_size = ap_const_lv32_1;
}

void dummy_hwhb_generator::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 0 : 
            if (!ap_sig_bdd_65.read()) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            if (!esl_seteq<1,1,1>(sensor_bus_req_full_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}
void dummy_hwhb_generator::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sensor_bus_req_din\" :  \"" << sensor_bus_req_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sensor_bus_req_full_n\" :  \"" << sensor_bus_req_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sensor_bus_req_write\" :  \"" << sensor_bus_req_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sensor_bus_rsp_empty_n\" :  \"" << sensor_bus_rsp_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sensor_bus_rsp_read\" :  \"" << sensor_bus_rsp_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sensor_bus_address\" :  \"" << sensor_bus_address.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sensor_bus_datain\" :  \"" << sensor_bus_datain.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sensor_bus_dataout\" :  \"" << sensor_bus_dataout.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sensor_bus_size\" :  \"" << sensor_bus_size.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"debug1\" :  \"" << debug1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

