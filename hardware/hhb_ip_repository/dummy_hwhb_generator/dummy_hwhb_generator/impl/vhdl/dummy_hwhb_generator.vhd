-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dummy_hwhb_generator is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sensor_bus_req_din : OUT STD_LOGIC;
    sensor_bus_req_full_n : IN STD_LOGIC;
    sensor_bus_req_write : OUT STD_LOGIC;
    sensor_bus_rsp_empty_n : IN STD_LOGIC;
    sensor_bus_rsp_read : OUT STD_LOGIC;
    sensor_bus_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    sensor_bus_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    sensor_bus_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    sensor_bus_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    debug1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dummy_hwhb_generator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dummy_hwhb_generator,hls_ip_2013_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=1,HLS_SYN_TPT=2,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_11280005 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010001001010000000000000000101";
    constant ap_const_lv64_11280000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010001001010000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_sig_bdd_65 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm , sensor_bus_req_full_n , ap_sig_bdd_65)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_65)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((sensor_bus_req_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, sensor_bus_req_full_n)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((sensor_bus_req_full_n = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, sensor_bus_req_full_n)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((sensor_bus_req_full_n = ap_const_logic_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_65 assign process. --
    ap_sig_bdd_65_assign_proc : process(ap_start, sensor_bus_req_full_n)
    begin
                ap_sig_bdd_65 <= ((sensor_bus_req_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    -- sensor_bus_address assign process. --
    sensor_bus_address_assign_proc : process(ap_CS_fsm, sensor_bus_req_full_n, ap_sig_bdd_65)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((sensor_bus_req_full_n = ap_const_logic_0)))) then 
            sensor_bus_address <= ap_const_lv64_11280000(32 - 1 downto 0);
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_65))) then 
            sensor_bus_address <= ap_const_lv64_11280005(32 - 1 downto 0);
        else 
            sensor_bus_address <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- sensor_bus_dataout assign process. --
    sensor_bus_dataout_assign_proc : process(ap_CS_fsm, sensor_bus_req_full_n, ap_sig_bdd_65)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((sensor_bus_req_full_n = ap_const_logic_0)))) then 
            sensor_bus_dataout <= ap_const_lv32_1;
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_65))) then 
            sensor_bus_dataout <= ap_const_lv32_A;
        else 
            sensor_bus_dataout <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- sensor_bus_req_din assign process. --
    sensor_bus_req_din_assign_proc : process(ap_CS_fsm, sensor_bus_req_full_n, ap_sig_bdd_65)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_65)) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((sensor_bus_req_full_n = ap_const_logic_0))))) then 
            sensor_bus_req_din <= ap_const_logic_1;
        else 
            sensor_bus_req_din <= ap_const_logic_0;
        end if; 
    end process;


    -- sensor_bus_req_write assign process. --
    sensor_bus_req_write_assign_proc : process(ap_CS_fsm, sensor_bus_req_full_n, ap_sig_bdd_65)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_65)) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((sensor_bus_req_full_n = ap_const_logic_0))))) then 
            sensor_bus_req_write <= ap_const_logic_1;
        else 
            sensor_bus_req_write <= ap_const_logic_0;
        end if; 
    end process;

    sensor_bus_rsp_read <= ap_const_logic_0;
    sensor_bus_size <= ap_const_lv32_1;
end behav;
