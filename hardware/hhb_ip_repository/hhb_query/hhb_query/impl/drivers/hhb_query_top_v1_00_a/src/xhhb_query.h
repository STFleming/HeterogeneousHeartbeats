// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef XHHB_QUERY_H
#define XHHB_QUERY_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xhhb_query_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Bus_a_BaseAddress;
} XHhb_query_Config;
#endif

typedef struct {
    u32 Bus_a_BaseAddress;
    u32 IsReady;
} XHhb_query;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XHhb_query_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XHhb_query_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XHhb_query_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XHhb_query_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XHhb_query_Initialize(XHhb_query *InstancePtr, u16 DeviceId);
XHhb_query_Config* XHhb_query_LookupConfig(u16 DeviceId);
int XHhb_query_CfgInitialize(XHhb_query *InstancePtr, XHhb_query_Config *ConfigPtr);
#else
int XHhb_query_Initialize(XHhb_query *InstancePtr, const char* InstanceName);
int XHhb_query_Release(XHhb_query *InstancePtr);
#endif

void XHhb_query_Start(XHhb_query *InstancePtr);
u32 XHhb_query_IsDone(XHhb_query *InstancePtr);
u32 XHhb_query_IsIdle(XHhb_query *InstancePtr);
u32 XHhb_query_IsReady(XHhb_query *InstancePtr);
void XHhb_query_EnableAutoRestart(XHhb_query *InstancePtr);
void XHhb_query_DisableAutoRestart(XHhb_query *InstancePtr);

void XHhb_query_SetApplist_phys_addr(XHhb_query *InstancePtr, u32 Data);
u32 XHhb_query_GetApplist_phys_addr(XHhb_query *InstancePtr);
u32 XHhb_query_GetCurrent_heartbeat(XHhb_query *InstancePtr);
u32 XHhb_query_GetStatus(XHhb_query *InstancePtr);

void XHhb_query_InterruptGlobalEnable(XHhb_query *InstancePtr);
void XHhb_query_InterruptGlobalDisable(XHhb_query *InstancePtr);
void XHhb_query_InterruptEnable(XHhb_query *InstancePtr, u32 Mask);
void XHhb_query_InterruptDisable(XHhb_query *InstancePtr, u32 Mask);
void XHhb_query_InterruptClear(XHhb_query *InstancePtr, u32 Mask);
u32 XHhb_query_InterruptGetEnabled(XHhb_query *InstancePtr);
u32 XHhb_query_InterruptGetStatus(XHhb_query *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
