// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dummy_hwhb_generator,hls_ip_2013_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=1,HLS_SYN_TPT=2,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module dummy_hwhb_generator (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sensor_bus_req_din,
        sensor_bus_req_full_n,
        sensor_bus_req_write,
        sensor_bus_rsp_empty_n,
        sensor_bus_rsp_read,
        sensor_bus_address,
        sensor_bus_datain,
        sensor_bus_dataout,
        sensor_bus_size,
        debug1
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   sensor_bus_req_din;
input   sensor_bus_req_full_n;
output   sensor_bus_req_write;
input   sensor_bus_rsp_empty_n;
output   sensor_bus_rsp_read;
output  [31:0] sensor_bus_address;
input  [31:0] sensor_bus_datain;
output  [31:0] sensor_bus_dataout;
output  [31:0] sensor_bus_size;
input  [31:0] debug1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sensor_bus_req_din;
reg sensor_bus_req_write;
reg[31:0] sensor_bus_address;
reg[31:0] sensor_bus_dataout;
reg   [0:0] ap_CS_fsm = 1'b0;
reg    ap_sig_bdd_65;
reg   [0:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 1'b0;
parameter    ap_ST_st2_fsm_1 = 1'b1;
parameter    ap_const_lv64_11280005 = 64'b10001001010000000000000000101;
parameter    ap_const_lv64_11280000 = 64'b10001001010000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_true = 1'b1;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or sensor_bus_req_full_n)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(sensor_bus_req_full_n == ap_const_logic_0))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or sensor_bus_req_full_n)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(sensor_bus_req_full_n == ap_const_logic_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// sensor_bus_address assign process. ///
always @ (ap_CS_fsm or sensor_bus_req_full_n or ap_sig_bdd_65)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(sensor_bus_req_full_n == ap_const_logic_0))) begin
        sensor_bus_address = ap_const_lv64_11280000;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_65)) begin
        sensor_bus_address = ap_const_lv64_11280005;
    end else begin
        sensor_bus_address = 'bx;
    end
end

/// sensor_bus_dataout assign process. ///
always @ (ap_CS_fsm or sensor_bus_req_full_n or ap_sig_bdd_65)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(sensor_bus_req_full_n == ap_const_logic_0))) begin
        sensor_bus_dataout = ap_const_lv32_1;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_65)) begin
        sensor_bus_dataout = ap_const_lv32_A;
    end else begin
        sensor_bus_dataout = 'bx;
    end
end

/// sensor_bus_req_din assign process. ///
always @ (ap_CS_fsm or sensor_bus_req_full_n or ap_sig_bdd_65)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_65) | ((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(sensor_bus_req_full_n == ap_const_logic_0)))) begin
        sensor_bus_req_din = ap_const_logic_1;
    end else begin
        sensor_bus_req_din = ap_const_logic_0;
    end
end

/// sensor_bus_req_write assign process. ///
always @ (ap_CS_fsm or sensor_bus_req_full_n or ap_sig_bdd_65)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_65) | ((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(sensor_bus_req_full_n == ap_const_logic_0)))) begin
        sensor_bus_req_write = ap_const_logic_1;
    end else begin
        sensor_bus_req_write = ap_const_logic_0;
    end
end
always @ (ap_CS_fsm or sensor_bus_req_full_n or ap_sig_bdd_65)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~ap_sig_bdd_65) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if (~(sensor_bus_req_full_n == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        default : 
            ap_NS_fsm = 'bx;
    endcase
end

/// ap_sig_bdd_65 assign process. ///
always @ (ap_start or sensor_bus_req_full_n)
begin
    ap_sig_bdd_65 = ((sensor_bus_req_full_n == ap_const_logic_0) | (ap_start == ap_const_logic_0));
end
assign sensor_bus_rsp_read = ap_const_logic_0;
assign sensor_bus_size = ap_const_lv32_1;


endmodule //dummy_hwhb_generator

