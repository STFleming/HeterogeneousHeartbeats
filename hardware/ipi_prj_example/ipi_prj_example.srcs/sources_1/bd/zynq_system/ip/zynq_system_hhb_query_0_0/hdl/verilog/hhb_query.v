// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hhb_query,hls_ip_2013_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=10,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module hhb_query (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_req_din,
        a_req_full_n,
        a_req_write,
        a_rsp_empty_n,
        a_rsp_read,
        a_address,
        a_datain,
        a_dataout,
        a_size,
        applist_phys_addr,
        current_heartbeat,
        status
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   a_req_din;
input   a_req_full_n;
output   a_req_write;
input   a_rsp_empty_n;
output   a_rsp_read;
output  [31:0] a_address;
input  [31:0] a_datain;
output  [31:0] a_dataout;
output  [31:0] a_size;
input  [31:0] applist_phys_addr;
output  [31:0] current_heartbeat;
output  [31:0] status;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_req_write;
reg a_rsp_read;
reg   [2:0] ap_CS_fsm = 3'b000;
reg   [31:0] applist_phys_addr0data_reg = 32'b00000000000000000000000000000000;
reg    applist_phys_addr0vld_reg = 1'b0;
reg    applist_phys_addr0ack_out;
reg   [31:0] current_heartbeat1data_reg = 32'b00000000000000000000000000000000;
reg    current_heartbeat1vld_reg = 1'b0;
reg    current_heartbeat1vld_in;
reg    current_heartbeat1ack_in;
reg   [31:0] status1data_reg = 32'b00000000000000000000000000000000;
reg   [31:0] status1data_in;
reg    status1vld_reg = 1'b0;
reg    status1vld_in;
reg    status1ack_in;
reg   [31:0] buff_0_s_reg_106;
reg   [0:0] indvar_reg_119;
reg   [0:0] ap_reg_ppstg_indvar_reg_119_pp0_it1;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
reg    ap_reg_ppiten_pp0_it4 = 1'b0;
reg    ap_reg_ppiten_pp0_it5 = 1'b0;
reg   [0:0] ap_reg_ppstg_indvar_reg_119_pp0_it5;
reg    ap_sig_bdd_135;
reg    ap_reg_ppiten_pp0_it6 = 1'b0;
reg   [0:0] ap_reg_ppstg_indvar_reg_119_pp0_it2;
reg   [0:0] ap_reg_ppstg_indvar_reg_119_pp0_it3;
reg   [0:0] ap_reg_ppstg_indvar_reg_119_pp0_it4;
reg   [31:0] a_addr_reg_159;
reg   [0:0] indvar_phi_fu_123_p4;
wire   [63:0] tmp_3_fu_149_p1;
wire   [31:0] tmp_1_fu_133_p2;
wire   [29:0] tmp_2_fu_139_p4;
reg    ap_sig_bdd_191;
reg   [2:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b000;
parameter    ap_ST_st2_fsm_1 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_2 = 3'b10;
parameter    ap_ST_st10_fsm_3 = 3'b11;
parameter    ap_ST_st11_fsm_4 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_true = 1'b1;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~(ap_sig_bdd_135 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6)) & ~(ap_const_lv1_0 == indvar_phi_fu_123_p4))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~(ap_sig_bdd_135 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6)) & (ap_const_lv1_0 == indvar_phi_fu_123_p4))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) | ((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~(ap_sig_bdd_135 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6)) & ~(ap_const_lv1_0 == indvar_phi_fu_123_p4)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~(ap_sig_bdd_135 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6)))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end
    end
end

/// ap_reg_ppiten_pp0_it3 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~(ap_sig_bdd_135 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6)))) begin
            ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
        end
    end
end

/// ap_reg_ppiten_pp0_it4 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it4
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~(ap_sig_bdd_135 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6)))) begin
            ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
        end
    end
end

/// ap_reg_ppiten_pp0_it5 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it5
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~(ap_sig_bdd_135 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6)))) begin
            ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
        end
    end
end

/// ap_reg_ppiten_pp0_it6 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it6
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~(ap_sig_bdd_135 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6)))) begin
            ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
        end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
            ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
        end
    end
end

/// applist_phys_addr0data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_applist_phys_addr0data_reg
    if (ap_rst == 1'b1) begin
        applist_phys_addr0data_reg <= ap_const_lv32_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == ap_const_logic_1) & (ap_const_logic_0 == applist_phys_addr0vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == ap_const_logic_1) & (ap_const_logic_1 == applist_phys_addr0vld_reg) & (ap_const_logic_1 == applist_phys_addr0ack_out)))) begin
            applist_phys_addr0data_reg <= applist_phys_addr;
        end
    end
end

/// current_heartbeat1data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_current_heartbeat1data_reg
    if (ap_rst == 1'b1) begin
        current_heartbeat1data_reg <= ap_const_lv32_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == current_heartbeat1vld_in) & (ap_const_logic_0 == current_heartbeat1vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == current_heartbeat1vld_in) & (ap_const_logic_1 == current_heartbeat1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
            current_heartbeat1data_reg <= buff_0_s_reg_106;
        end
    end
end

/// status1data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_status1data_reg
    if (ap_rst == 1'b1) begin
        status1data_reg <= ap_const_lv32_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == status1vld_in) & (ap_const_logic_0 == status1vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == status1vld_in) & (ap_const_logic_1 == status1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
            status1data_reg <= status1data_in;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_135 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6)) & (indvar_reg_119 == ap_const_lv1_0))) begin
        indvar_reg_119 <= ap_const_lv1_1;
    end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        indvar_reg_119 <= ap_const_lv1_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        a_addr_reg_159[0] <= tmp_3_fu_149_p1[0];
a_addr_reg_159[1] <= tmp_3_fu_149_p1[1];
a_addr_reg_159[2] <= tmp_3_fu_149_p1[2];
a_addr_reg_159[3] <= tmp_3_fu_149_p1[3];
a_addr_reg_159[4] <= tmp_3_fu_149_p1[4];
a_addr_reg_159[5] <= tmp_3_fu_149_p1[5];
a_addr_reg_159[6] <= tmp_3_fu_149_p1[6];
a_addr_reg_159[7] <= tmp_3_fu_149_p1[7];
a_addr_reg_159[8] <= tmp_3_fu_149_p1[8];
a_addr_reg_159[9] <= tmp_3_fu_149_p1[9];
a_addr_reg_159[10] <= tmp_3_fu_149_p1[10];
a_addr_reg_159[11] <= tmp_3_fu_149_p1[11];
a_addr_reg_159[12] <= tmp_3_fu_149_p1[12];
a_addr_reg_159[13] <= tmp_3_fu_149_p1[13];
a_addr_reg_159[14] <= tmp_3_fu_149_p1[14];
a_addr_reg_159[15] <= tmp_3_fu_149_p1[15];
a_addr_reg_159[16] <= tmp_3_fu_149_p1[16];
a_addr_reg_159[17] <= tmp_3_fu_149_p1[17];
a_addr_reg_159[18] <= tmp_3_fu_149_p1[18];
a_addr_reg_159[19] <= tmp_3_fu_149_p1[19];
a_addr_reg_159[20] <= tmp_3_fu_149_p1[20];
a_addr_reg_159[21] <= tmp_3_fu_149_p1[21];
a_addr_reg_159[22] <= tmp_3_fu_149_p1[22];
a_addr_reg_159[23] <= tmp_3_fu_149_p1[23];
a_addr_reg_159[24] <= tmp_3_fu_149_p1[24];
a_addr_reg_159[25] <= tmp_3_fu_149_p1[25];
a_addr_reg_159[26] <= tmp_3_fu_149_p1[26];
a_addr_reg_159[27] <= tmp_3_fu_149_p1[27];
a_addr_reg_159[28] <= tmp_3_fu_149_p1[28];
a_addr_reg_159[29] <= tmp_3_fu_149_p1[29];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~(ap_sig_bdd_135 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6)))) begin
        ap_reg_ppstg_indvar_reg_119_pp0_it1 <= indvar_reg_119;
        ap_reg_ppstg_indvar_reg_119_pp0_it2 <= ap_reg_ppstg_indvar_reg_119_pp0_it1;
        ap_reg_ppstg_indvar_reg_119_pp0_it3 <= ap_reg_ppstg_indvar_reg_119_pp0_it2;
        ap_reg_ppstg_indvar_reg_119_pp0_it4 <= ap_reg_ppstg_indvar_reg_119_pp0_it3;
        ap_reg_ppstg_indvar_reg_119_pp0_it5 <= ap_reg_ppstg_indvar_reg_119_pp0_it4;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_reg_ppstg_indvar_reg_119_pp0_it5 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6) & ~(ap_sig_bdd_135 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6)))) begin
        buff_0_s_reg_106 <= a_datain;
    end
end

/// a_req_write assign process. ///
always @ (ap_CS_fsm or indvar_reg_119 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_135 or ap_reg_ppiten_pp0_it6)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_135 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6)) & (indvar_reg_119 == ap_const_lv1_0))) begin
        a_req_write = ap_const_logic_1;
    end else begin
        a_req_write = ap_const_logic_0;
    end
end

/// a_rsp_read assign process. ///
always @ (ap_CS_fsm or ap_reg_ppstg_indvar_reg_119_pp0_it5 or ap_sig_bdd_135 or ap_reg_ppiten_pp0_it6)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_reg_ppstg_indvar_reg_119_pp0_it5 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6) & ~(ap_sig_bdd_135 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6)))) begin
        a_rsp_read = ap_const_logic_1;
    end else begin
        a_rsp_read = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_191)
begin
    if (((ap_ST_st11_fsm_4 == ap_CS_fsm) & ~ap_sig_bdd_191)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_191)
begin
    if (((ap_ST_st11_fsm_4 == ap_CS_fsm) & ~ap_sig_bdd_191)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// applist_phys_addr0ack_out assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_191)
begin
    if (((ap_ST_st11_fsm_4 == ap_CS_fsm) & ~ap_sig_bdd_191)) begin
        applist_phys_addr0ack_out = ap_const_logic_1;
    end else begin
        applist_phys_addr0ack_out = ap_const_logic_0;
    end
end

/// current_heartbeat1ack_in assign process. ///
always @ (current_heartbeat1vld_reg)
begin
    if (((ap_const_logic_0 == current_heartbeat1vld_reg) | ((ap_const_logic_1 == current_heartbeat1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
        current_heartbeat1ack_in = ap_const_logic_1;
    end else begin
        current_heartbeat1ack_in = ap_const_logic_0;
    end
end

/// current_heartbeat1vld_in assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st10_fsm_3 == ap_CS_fsm)) begin
        current_heartbeat1vld_in = ap_const_logic_1;
    end else begin
        current_heartbeat1vld_in = ap_const_logic_0;
    end
end

/// indvar_phi_fu_123_p4 assign process. ///
always @ (ap_CS_fsm or indvar_reg_119 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (indvar_reg_119 == ap_const_lv1_0))) begin
        indvar_phi_fu_123_p4 = ap_const_lv1_1;
    end else begin
        indvar_phi_fu_123_p4 = indvar_reg_119;
    end
end

/// status1ack_in assign process. ///
always @ (status1vld_reg)
begin
    if (((ap_const_logic_0 == status1vld_reg) | ((ap_const_logic_1 == status1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
        status1ack_in = ap_const_logic_1;
    end else begin
        status1ack_in = ap_const_logic_0;
    end
end

/// status1data_in assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((ap_ST_st10_fsm_3 == ap_CS_fsm)) begin
        status1data_in = ap_const_lv32_1;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        status1data_in = ap_const_lv32_0;
    end else begin
        status1data_in = 'bx;
    end
end

/// status1vld_in assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0)) | (ap_ST_st10_fsm_3 == ap_CS_fsm))) begin
        status1vld_in = ap_const_logic_1;
    end else begin
        status1vld_in = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it5 or ap_sig_bdd_135 or ap_reg_ppiten_pp0_it6 or indvar_phi_fu_123_p4 or ap_sig_bdd_191)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
        ap_ST_pp0_stg0_fsm_2 : 
            if ((~((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6) & ~(ap_sig_bdd_135 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_135 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6)) & ~(ap_const_lv1_0 == indvar_phi_fu_123_p4) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end else if ((((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6) & ~(ap_sig_bdd_135 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_135 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6)) & ~(ap_const_lv1_0 == indvar_phi_fu_123_p4) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st10_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end
        ap_ST_st10_fsm_3 : 
            ap_NS_fsm = ap_ST_st11_fsm_4;
        ap_ST_st11_fsm_4 : 
            if (~ap_sig_bdd_191) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_4;
            end
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign a_address = a_addr_reg_159;
assign a_dataout = ap_const_lv32_0;
assign a_req_din = ap_const_logic_0;
assign a_size = ap_const_lv32_1;

/// ap_sig_bdd_135 assign process. ///
always @ (a_rsp_empty_n or ap_reg_ppstg_indvar_reg_119_pp0_it5)
begin
    ap_sig_bdd_135 = ((a_rsp_empty_n == ap_const_logic_0) & (ap_reg_ppstg_indvar_reg_119_pp0_it5 == ap_const_lv1_0));
end

/// ap_sig_bdd_191 assign process. ///
always @ (current_heartbeat1ack_in or status1ack_in)
begin
    ap_sig_bdd_191 = ((current_heartbeat1ack_in == ap_const_logic_0) | (status1ack_in == ap_const_logic_0));
end
assign current_heartbeat = current_heartbeat1data_reg;
assign status = status1data_reg;
assign tmp_1_fu_133_p2 = (applist_phys_addr0data_reg + ap_const_lv32_8);
assign tmp_2_fu_139_p4 = {{tmp_1_fu_133_p2[ap_const_lv32_1F : ap_const_lv32_2]}};
assign tmp_3_fu_149_p1 = $unsigned(tmp_2_fu_139_p4);
always @ (posedge ap_clk)
begin
    applist_phys_addr0vld_reg <= 1'b0;
    current_heartbeat1vld_reg <= 1'b0;
    status1vld_reg <= 1'b0;
    a_addr_reg_159[31:30] <= 2'b00;
end



endmodule //hhb_query

