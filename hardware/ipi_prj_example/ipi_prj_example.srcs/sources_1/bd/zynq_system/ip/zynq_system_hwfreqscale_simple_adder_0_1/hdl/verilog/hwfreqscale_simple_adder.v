// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hwfreqscale_simple_adder,hls_ip_2013_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.440000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module hwfreqscale_simple_adder (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input1,
        input2,
        output_r,
        frequency_value
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] input1;
input  [31:0] input2;
output  [31:0] output_r;
output  [31:0] frequency_value;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg   [1:0] ap_CS_fsm = 2'b00;
reg   [31:0] input10data_reg = 32'b00000000000000000000000000000000;
reg    input10vld_reg = 1'b0;
reg    input10ack_out;
reg   [31:0] input20data_reg = 32'b00000000000000000000000000000000;
reg    input20vld_reg = 1'b0;
reg    input20ack_out;
reg   [31:0] output_r1data_reg = 32'b00000000000000000000000000000000;
reg    output_r1vld_reg = 1'b0;
reg    output_r1vld_in;
reg    output_r1ack_in;
reg   [31:0] frequency_value1data_reg = 32'b00000000000000000000000000000000;
wire   [31:0] frequency_value1data_in;
reg    frequency_value1vld_reg = 1'b0;
reg    frequency_value1vld_in;
reg    frequency_value1ack_in;
wire   [31:0] output_assign_fu_64_p2;
reg    ap_sig_bdd_134;
reg   [1:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b00;
parameter    ap_ST_st2_fsm_1 = 2'b1;
parameter    ap_ST_st3_fsm_2 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2A = 32'b101010;
parameter    ap_true = 1'b1;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// frequency_value1data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_frequency_value1data_reg
    if (ap_rst == 1'b1) begin
        frequency_value1data_reg[1] <= 1'b0;
        frequency_value1data_reg[3] <= 1'b0;
        frequency_value1data_reg[5] <= 1'b0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == frequency_value1vld_in) & (ap_const_logic_0 == frequency_value1vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == frequency_value1vld_in) & (ap_const_logic_1 == frequency_value1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
            frequency_value1data_reg[1] <= frequency_value1data_in[1];
            frequency_value1data_reg[3] <= frequency_value1data_in[3];
            frequency_value1data_reg[5] <= frequency_value1data_in[5];
        end
    end
end

/// input10data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_input10data_reg
    if (ap_rst == 1'b1) begin
        input10data_reg <= ap_const_lv32_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == ap_const_logic_1) & (ap_const_logic_0 == input10vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == ap_const_logic_1) & (ap_const_logic_1 == input10vld_reg) & (ap_const_logic_1 == input10ack_out)))) begin
            input10data_reg <= input1;
        end
    end
end

/// input20data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_input20data_reg
    if (ap_rst == 1'b1) begin
        input20data_reg <= ap_const_lv32_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == ap_const_logic_1) & (ap_const_logic_0 == input20vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == ap_const_logic_1) & (ap_const_logic_1 == input20vld_reg) & (ap_const_logic_1 == input20ack_out)))) begin
            input20data_reg <= input2;
        end
    end
end

/// output_r1data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_output_r1data_reg
    if (ap_rst == 1'b1) begin
        output_r1data_reg <= ap_const_lv32_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == output_r1vld_in) & (ap_const_logic_0 == output_r1vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == output_r1vld_in) & (ap_const_logic_1 == output_r1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
            output_r1data_reg <= output_assign_fu_64_p2;
        end
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_134)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~ap_sig_bdd_134)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_134)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~ap_sig_bdd_134)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// frequency_value1ack_in assign process. ///
always @ (frequency_value1vld_reg)
begin
    if (((ap_const_logic_0 == frequency_value1vld_reg) | ((ap_const_logic_1 == frequency_value1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
        frequency_value1ack_in = ap_const_logic_1;
    end else begin
        frequency_value1ack_in = ap_const_logic_0;
    end
end

/// frequency_value1vld_in assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        frequency_value1vld_in = ap_const_logic_1;
    end else begin
        frequency_value1vld_in = ap_const_logic_0;
    end
end

/// input10ack_out assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_134)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~ap_sig_bdd_134)) begin
        input10ack_out = ap_const_logic_1;
    end else begin
        input10ack_out = ap_const_logic_0;
    end
end

/// input20ack_out assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_134)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~ap_sig_bdd_134)) begin
        input20ack_out = ap_const_logic_1;
    end else begin
        input20ack_out = ap_const_logic_0;
    end
end

/// output_r1ack_in assign process. ///
always @ (output_r1vld_reg)
begin
    if (((ap_const_logic_0 == output_r1vld_reg) | ((ap_const_logic_1 == output_r1vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
        output_r1ack_in = ap_const_logic_1;
    end else begin
        output_r1ack_in = ap_const_logic_0;
    end
end

/// output_r1vld_in assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        output_r1vld_in = ap_const_logic_1;
    end else begin
        output_r1vld_in = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or ap_sig_bdd_134)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
        ap_ST_st3_fsm_2 : 
            if (~ap_sig_bdd_134) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        default : 
            ap_NS_fsm = 'bx;
    endcase
end

/// ap_sig_bdd_134 assign process. ///
always @ (output_r1ack_in or frequency_value1ack_in)
begin
    ap_sig_bdd_134 = ((output_r1ack_in == ap_const_logic_0) | (frequency_value1ack_in == ap_const_logic_0));
end
assign frequency_value = frequency_value1data_reg;
assign frequency_value1data_in = ap_const_lv32_2A;
assign output_assign_fu_64_p2 = (input20data_reg + input10data_reg);
assign output_r = output_r1data_reg;
always @ (posedge ap_clk)
begin
    input10vld_reg <= 1'b0;
    input20vld_reg <= 1'b0;
    output_r1vld_reg <= 1'b0;
    frequency_value1data_reg[0] <= 1'b0;
    frequency_value1data_reg[2:2] <= 1'b0;
    frequency_value1data_reg[4:4] <= 1'b0;
    frequency_value1data_reg[31:6] <= 26'b00000000000000000000000000;
    frequency_value1vld_reg <= 1'b0;
end



endmodule //hwfreqscale_simple_adder

